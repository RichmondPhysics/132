%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: apparatus.pdf
%%Creator: Adobe Acrobat 11.0.23
%%For: mtrawick
%%CreationDate: 10/26/2019, 5:02:59 PM
%%BoundingBox: 0 0 479 167
%%HiResBoundingBox: 0 0 478.6967 166.6350
%%CropBox: 0 0 478.6967 166.6350
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1185 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c006 80.159825, 2016/09/16-03:31:08        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:ModifyDate="2019-10-26T17:02:50-04:00"
   xmp:CreateDate="2019-10-26T17:02:08-04:00"
   xmp:MetadataDate="2019-10-26T17:02:50-04:00"
   xmp:CreatorTool="Acrobat PDFMaker 11 for Word"
   xmpMM:DocumentID="uuid:13600df0-e9a8-45ef-b730-7c5f9768e116"
   xmpMM:InstanceID="uuid:02c98704-6e91-4260-a728-db438e6d97af"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 11.0"
   pdfx:SourceModified="D:20191026210133"
   pdfx:Company="University of Richmond">
   <xmpMM:subject>
    <rdf:Seq>
     <rdf:li>10</rdf:li>
    </rdf:Seq>
   </xmpMM:subject>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Matt Trawick</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/0 
[/DeviceRGB] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 0 
/Lookup <~
!!!!~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -166.635 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 166.635 li
478.697 166.635 li
478.697 0 li
cp
clp
gsave
-.852188 166.801 mo
479.148 166.801 li
479.148 -.198957 li
-.852188 -.198957 li
-.852188 166.801 li
clp
159.748 40.4011 mo
97.9478 40.4011 li
97.9478 6.44113 li
159.748 6.44113 li
159.748 40.4011 li
false sop
/1 
[/DeviceRGB] /CSA add_res
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[62.04 0 0 34.2 10.9757 126.114 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 517 
/H 285 
/M[517 0 0 -285 0 285 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 517 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 517 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 517 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&q#>j~>

%%EndBinary
grestore
np
gsave
97.8278 40.4011 mo
159.748 40.4011 li
159.748 6.44013 li
97.8278 6.44013 li
97.8278 40.4011 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Calibri def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 77 /M put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 112 /p put
dup 116 /t put
dup 117 /u put
def
/FontBBox {-503 -312 1240 1026} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/M <1C60D8A8C9B68A39A0A3DD2F1EDB806B8EBA2991979DEC8D258B1A02A190
6FD2B1CA205517F0A68C4C6A5BF2AC6E6CDCF7977F45552A42319D772D059495
9118289EBC1461685C8CF4E5DD263C4C1910B7D8FD4E5500044A8F06771B257F
C21C3072148523EDBD4AE8CCE0BCF86532F61410F6C0201E2ADF6D872A8FDBBE
97EA7C8789A51927AEAFFA42E03A39CC922DAB964B6BCFFA4430A330843D8297
EBD008ACDDBEFAE9E40226AF265DABF6CE80E6C4FB13353BC50063552BC66736
0325D0B42F7528AA00A89119A771AE5A7A3F69D8025BCAB7EBC18E2CEFCB7A52
A1D8652FE7D376D9B1F2CA62FEF82187CF27562517F2AA24976B64146E2D4DD2
87500E273B12ACFFC0C2B592A5CFA9E9511593BE31B739BECC693D9698B175F6
8FEC3CF86BC604ABD82815EBA74C3E98930057A86AF494D184AB704B672B8745> |-
/e <1C60D8A8C9B7A9C0DC897A849B356D31E2254DD2E5BDA9320580C3E0839C
715C00D9D27B634D4BEEF0FE1F6AD3CCFBCCE9FDE38A84A563FB744619F62FCB
F09ACBF7337FE050BE068BCA744FAC4471C4195B7CEC353B3CAECCCEC91AAE22
E8955469041D97A8837F9398CE520ABB35C688EEF4229957FD92C79439BF99D2
4AD4D8B3CAC5B975D966AB01856E8FAEAE3BEB03E1CC76DF299391134BFB02DD
61F6D73B2AAAA0D725ABCA9FE504FB3A1EC1E2449C5D921F0DE45A9278013CF0
832F39E3771D2B318D27AFF5849066ED5A64AA8E3E404B520DE5F08BE74DD8D5
8BD1B0FA461EBCBB4DC632B680CFAE62B61DD4FC04FC017D59147CB2E0FBEAAF
A402B5BFBD0C4F13F4BD9227D1353527A23B3EF7CA3E7F599CB51DDAF43A5674
78E4C81011D9D8D5DAD9CB1F948F5FCE67> |-
/i <1C60D8A8C9B887F0644B8F9A77200B5B21E7A46843656F48CC872DF3AFB5
8D86B9B1B70DF0F8BF4F1A9D845350075385C2FAC40F64A57A633024956B42D2
D155265D68692B1DD96FCB1CFEA6F03B67B191D75D9251636A71B366F484AC7D
D61A648087A690F42FCD56728047D5F145B28180BC49A70304D616C17E08688B
C2AB34D235D029750826D6A02D57888DCAF080A15DCB2D8AE91CB7938E088D74
26B3BCAD6531F243F29763FBDE3F087E3965B6148DD52590D1BA20021D15293C
FC> |-
/l <1C60D8A8C9B887F0644B8EDF7E394B2B17D648B60040EB6DBE2B8847CEEB
752ACB6F5AD37E1FA4A050E94786AD18088ED8DC4464B0DE1BE6F00A802A61F4
A34EAA84659717045B37042963C71284B8AC29AE9E0F8305F213AE4489E2DB55
EC12AFE94E44F64596D135D1BEB997D5B9A0BB5A35AE0E0CE05B7B1F89372931
9FB81429> |-
/p <1C60D8A8C9B78E05EA9D973060387C73D1F6FC5283CF49F42B90E3572253
2C0305E99FC2B2F5E8253F0317294CB5BA6F51657EA79E1841CF363B43BBE54B
9E5F683986378119A60103220843BA6B4E1CF012F4407937B0EDEEE409EED971
ED71424C1DE9F58B3C06F2342302220C155C0C840BFB4693FFF8A2CFEEF274FF
E1F4AFBE9757FB2568EE33B9D585CBE0600A7110E1A53D85847EA919EFD9BF18
F44D7EE9518AE64D9DFE7C7267D6429C8F5FD0EF0AF9ABA737132F4E330A3308
77D5AECA1F6DF97EC1ACF219E33EDD988EC9A670EC23A43243C991A099EEE943
0EF67488C01ED11E3C4B1CEB11239FEDA600217AC3F2A3708004F1E2E90E2967
30C207690B19E7D8BB6E1920E2F46C4C2E0CC81AE0ED43696970A1FBC9D409BB
55BDECDE83A356A07B210C4055759107919A9C98A0B1493E8E6816D87FE47A8C
1A70E30E74BD97D6D39D9D984A0D52D9B81565B3C3A0B773497C465883E30959
64CC84> |-
/t <1C60D8A8C9B81D89610FFBFD2F87712D18AB3F2201A6640C86A2CD8B533C
9E9613B748962BD3321D998A13FF4A410946A55D4AE3CDBD806BF0BBD38F8435
DE762245288A30426FF012946D0E2E36D4EBD7E81C44D06926164FB6F91AA67E
EAF9AC4BC77C470E117D4634F7F90C1771292F30769DD575DD5B3F0D104730DE
CDCF41E7D59747B6A2D0EF143B06FA6BBA4F9E744BD6E4827C627C6619571415
1061BE64BA6B45A36E91B80557E1CF613697CA2B60F02790B7CBE3BBB5ABEC19
0F88D2844D8139B7D141D834706D11BA3108576C531B823977B908AC9FF80DF3
22060C351BA43A8EA770319D1AF8085E209B940EDEE1B85419EF87F01EED1C4E
0307B2BC95989AC0998A9EA8A0DFB99539E7D0B836F4EB9E9D6147AFB55082A1
E63F64D57A8E7F63465BA308FA03AEB2787221627AF8F99523DB260C> |-
/u <1C60D8A8C9B78E05EAA3CFED1A062DA00ACB6556B6D2C444D52FE211DC36
88D13631F07F87D2F0851361DDE2CB13BAE303424A55D9BD107D56D22322818F
C76F125ECA1DADD7E1E8164E2DF3A65B67CFAE338C319FC7D07BDCC1CF896B70
8E125021996E87E6805D1416B537CED172F9478027FB9FD1A978C49E725968E2
F5FFC6B56799F9B1D16FFE2085471316923AC7BFBC4E3BBEBA71950AD60EAA4B
EA84B8EB89079B6BEAD01C4E2BC5BF11F5FD2CB41D465D8AD649D765F2A952E2
2AC4EF1DF8297E4E5405180477A9E4F70BB10D787681535F61379438A6888E4F
660E2B1CD68547F69ECDD808A3CD50B9FBBDA239A40EE62332FADD878CD5F875
BAC27E0BDDA94455E030928A249A166F13D134EF255F5783> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QWVADQ+Calibri /HIBBAA+Calibri findfont ct_VMDictPut
/QWVADQ+Calibri*1 
[77{/.notdef}rp /M 23{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
3{/.notdef}rp /p 3{/.notdef}rp /t /u 138{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
110.068 16.8811 mo
(Multiple)
[9.48 5.75951 2.51717 3.72055 2.51717 5.7606 2.51717 0 ]xsh
grestore
gsave
97.8278 40.4011 mo
159.748 40.4011 li
159.748 6.44013 li
97.8278 6.44013 li
97.8278 40.4011 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B888C146> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 32 /space put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 44{/.notdef}rp /M 23{/.notdef}rp /e 3{/.notdef}rp /i 
2{/.notdef}rp /l 3{/.notdef}rp /p 3{/.notdef}rp /t /u 138{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
147.748 16.8811 mo
( )sh
grestore
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B770DA42E8D37F1E32882D4AD6464D850106A0DE7A83B47F0E
C65143E84B8F9887D8EF560BBB7DAED9582F38B6974AE06071D74243DE04377A
9E38C603D44A0AA623BF84EDE575A39EAD4593C4B3F424F5317061A5AEF0FCBD
5198E5F9AB43FD8C228E541FA391BADB0ACDBD5FBBD08EBCA2700B6A1105DB45
395D242F8C44AC433C3725A9D5F6A91B5DF820F4E2F6E66101242BAA426ABA58
4BF91A7E8CBD825612324F28F3BB6B5F4B6A98D5678C5683C423898401C97DB6
AEBB3B08F0E49015B8C09294559F0324646775C30687BA8725A301A8E7ACA559
E180CD1BA525300AD3D8DFA8A8C34309FA6E01CA0BA9F33D60D410C3785C9A35
A4D33DC4DA697FAAF83556B3BAF038631153B21CFA05AC7F6B965B6C9DD580EC
DAA5E19D631487362428CB6C15F8951776CB9C454AE2ECDA7CED1F00599F6057
8050870FD9F672ABB02F7641BFFDFC908D98DE75282B9085EDCE585EED996ACD
325E186C6CC942676730FDB64EACBC2CC9670AC8631DB84FE5F13182767EAE21
F9BC28BA89B244DFD720C9DF35E92F57747BB59E5AF5F4663BAF9B03DC716D74
DBD0D4D1BB2703443369B43A50F5B2916833184106C2158995BEF98CEF08C3DF
5A6182> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 83 /S put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 44{/.notdef}rp /M 5{/.notdef}rp /S 17{/.notdef}rp /e 
3{/.notdef}rp /i 2{/.notdef}rp /l 3{/.notdef}rp /p 3{/.notdef}rp /t 
/u 138{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
113.668 30.4411 mo
(Slit Set)
[5.03424 2.52048 2.52046 3.71945 2.51711 5.03423 5.52002 0 ]xsh
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
144.149 30.4411 mo
( )sh
119.188 146.001 mo
79.4678 146.001 li
79.4678 122.961 li
119.188 122.961 li
119.188 146.001 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[39.96 0 0 23.28 -7.50428 20.5139 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 333 
/H 194 
/M[333 0 0 -194 0 194 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 333 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 333 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 333 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_YHJ,~>

%%EndBinary
grestore
np
gsave
79.4678 145.881 mo
119.068 145.881 li
119.068 122.841 li
79.4678 122.841 li
79.4678 145.881 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/h <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4
C30D8A20FB7C70B167834EB7C5767A7762DBDEADBE99BB9DD1507EDF7CB5B44C
FB5AE7F50CE798A09AFFC2F8A1E21C8BA96A3248C2464366A8BF234A7465BA6B
08C9AB7474ED94583744D778660448C601BC1D9C2E8788B65F173F45C272BBE3
CD6AC55E870CEE94D478E3D51C8A2E608A02982A9D048914B7569407A83B9D3C
DA9FE7ECB2AF4F7816F117CC85330A774976280DEB1A8C317A8A170186F61B3F
5FC1D130A0DA1A6A5AE24C0FB08191CD76F47EDEDB0EAC8DE369D515B3B14661
497F94A2412A37D63D31ABC4AE50DD37B3DDB58CFDBCD2A17246A6058BA85E12
DAD2711083774A128264C809F70CFC31D164703798D4642E5D> |-
/w <1C60D8A8C9B63EE6FBAC6FE430D4C472A6935E9E4E2C9D9C4ACB16C71B03
2F18FE575C6256D49A59D28FA55A64B8F4250FF7EF0F6440082EA55E50C72515
DB779850B563F18307F56C5AA0381D53908E3AA5F7BCF9144924A2084F07EBED
39B22484214EF3445C58E2A31D32B14DA61C85069056233A7D69EDE7D6EAE909
5E582A487ACDCAAEC9B696D9F56177DFCBED54097D97E802545B35B3AFF09395
2061133C2164E4C99E14CC43C1C5FB57627E18AF07CB58B73BD1200A30349006
897A1314704F9560B7EE765A767050BD02ED4C3CB6891E5FA019219CAF9310B1
24D9AF8C5E5547F89705BF1E11BA18C8C6F80D46BFB4F08BBC66AE29B2E81702
937C5AB98472DEAC74C8794C288DBFA220B7F896E2B36F9ECF06883A45930B94
0AFF017D9F3C209761AB734C6F3F199505CD5974FFC0917AC4E2B317FA15146D
5F8C2D8B2A0366984D71D35A1EAF824F2AB69DDEEC3EC469FA5796A63F524D8E
C40E97981C19E148BD51BA03455ACA08443ED8962BD3AB9091> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 104 /h put
dup 119 /w put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 44{/.notdef}rp /M 5{/.notdef}rp /S 17{/.notdef}rp /e 
2{/.notdef}rp /h /i 2{/.notdef}rp /l 3{/.notdef}rp /p 3{/.notdef}rp 
/t /u /.notdef /w 136{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
88.1079 131.481 mo
(wheel)
[6.47997 4.67995 4.43971 4.44061 0 ]xsh
grestore
gsave
79.4678 145.881 mo
119.068 145.881 li
119.068 122.841 li
79.4678 122.841 li
79.4678 145.881 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
110.308 131.481 mo
( )sh
grestore
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/s <1C60D8A8C9B7347873EC11B675AA6F6B461106EA2C61A0AE571750A08267
9294B529694EFA74202690239BCD02BDE93B33BD8DE0F0F0056B04093EE6C4E8
3D6F00E22E61E0A53509E628E3614EF2EF2CA3A8502F22A560E46ED3E4AED0BF
D271CCE464114B6332D17C4A046EF74FFF1283283A642C8C06B85A0D72357B56
65CD862A8E3D30EFFEE242F88B9C12DF917A74252DB462B49970474974786963
8F8FD8E70AF4405F95B11DFD154B7101933A31068AA1E65CC021277CCB9EC0EA
A7B978A081D1A4252A6693984AAF2CEC4413666DCF8B310A71A67C6E7B1DB954
E186EA16C83551DD0516966C156876A3DE36ED7253FFBBC1504668DC98301370
300A04E6753189718288CD7EF0ED409765A888272FDB25977C8A74BC113E188B
3DF6A69F7851A7E60496291AA0B15532572787EAC7F32F09F1E72589E0E74E03
49313472D872E64E7DB78BAB05598FE04B70E52D818F2F7B0B56A5688299352E
62F16B011595A7D7701FD641BB2FCFCADB2E33263B8A208C4183E753AD5C2586
1BF542F2009EA70BB7A67B3BE61085D37469DCDCB97CB2B41A0E2B4DB3BE67C2
BA9A1482E51611AB708AAB8BC978B06758006F3287DD3A3CABA09A9F59A21B0D
386F88> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 115 /s put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 44{/.notdef}rp /M 5{/.notdef}rp /S 17{/.notdef}rp /e 
2{/.notdef}rp /h /i 2{/.notdef}rp /l 3{/.notdef}rp /p 2{/.notdef}rp 
/s /t /u /.notdef /w 136{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
82.9479 142.401 mo
(with slits)
[6.47997 2.04034 2.99976 4.67995 2.04298 3.48035 2.03944 2.04033 3.12036 0 ]xsh
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
115.465 142.401 mo
( )sh
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
103.658 122.17 mo
118.056 91.2798 li
@
46.7078 31.761 mo
7.58779 31.761 li
7.58779 11.6012 li
46.7078 11.6012 li
46.7078 31.761 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[39.36 0 0 20.4 -79.3843 134.754 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 328 
/H 170 
/M[328 0 0 -170 0 170 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 328 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 328 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 328 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)`^fJ,~>

%%EndBinary
grestore
np
gsave
7.58779 31.6412 mo
46.7078 31.6412 li
46.7078 11.6022 li
7.58779 11.6022 li
7.58779 31.6412 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B7171E8B1A8E6313E3398209E3D260B6F15325DCB45ECD7736
181F507CB4487F34F0C59AFEB0721592A12F0589FA4C3A7603462313C63656B0
9A8D44D0BD8D70558844CA341A4EE2AC79F611A3ED366B2D2FE339B138BAAEB8
D89A1F21C50A63D7C75CB2B4AF444273F3D83A0ACE429472C68390F392B236C4
85C1D89000FF66B1CD626A7276BDCB191387CD8BEAF0A2AA6552> |-
/a <1C60D8A8C9B75CBB53379352952B97D633633CE49B1F5650B8155AFDFA57
F94D359804093E4912F3B89577762AB5877203F1CDAD240C521DE74183EDA105
01967DB6487C182138B12C453C5DB9629F7EF021028117511EFEAB941896E32D
9CC68D6E66540771999A4E30C4826A52D7536EDDF7E00016C895CE43408B44BE
33E2D9A6163827E05AB8B1144BC909A74F6D7828DE6E08164A25E320920E3540
20A41D59E9E3B008A20EC107F9E18745DE21F9AF293EB0F319B529D840D8BA93
19522EDDCACA13336C059581181C082BF0D7F4117FAEB429D871E099AEE4394F
ED2FB3A1C712D1799055BA832AD846B95DA8BB4E63B103C908FA309FAA3B7814
0CE2A22AE06B2A1EA5BD3AA13DD1ED75DA4AD37493780FE662EF5D1B53C4AF41
845C0C77655CE94F0C9DEBE29248A1EAAF3A6EA79D5BB5C090457B818DD62F70
E197CEA94F90229AB4FD685A1ADB5E4E4C1DBDB28AA3854323EE2FD22692EC70> |-
/r <1C60D8A8C9B80F37F21112BA81A46E1A1A16E843530DEF66F6901DB9A722
A358478F1B0799F6041BFFF7D05EE602307D474F1DB84BF73C4EC1FF13A4D2D5
B370042C9A314A700782F944BCE36786AFBD72FA62259FABABA90F1F2BE008B7
993D5E1813324C60BD953524A1040FB1A790007846FA5DED6ACE6C7D436FF1C0
B97E4BBDDDA28F066E204B37F8321753E1473DDD8EE76C12A0011B04832F5C47
D3FF30EE31FE70EF82623D628622FAE52A70984ACD43F9718BC02CE5AA3F5832
FAB343FD6D53F2375C811D54E6B415E257D8BB3A2542930D7E0D6DF96FAA0688
822B6655966904164F87FA904C272BFAD51FAFF11CA14EBB5F6472235CA20889
D111211CF90F83807D99EF12B3B6827C1CA4720D03729BEEEA22A1313C4BDCE8
78453F5E6DCAD449D1F3B7D54D32C49DA0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 76 /L put
dup 97 /a put
dup 114 /r put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 43{/.notdef}rp /L /M 5{/.notdef}rp /S 13{/.notdef}rp 
/a 3{/.notdef}rp /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l 
3{/.notdef}rp /p /.notdef /r /s /t /u /.notdef 
/w 136{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
14.7879 22.2811 mo
(Laser)
[4.67983 5.27717 4.32002 5.52001 0 ]xsh
grestore
gsave
7.58779 31.6412 mo
46.7078 31.6412 li
46.7078 11.6022 li
7.58779 11.6022 li
7.58779 31.6412 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
38.3079 22.2811 mo
( )sh
grestore
57.2678 61.4011 mo
4.22793 61.4011 li
4.22793 36.8011 li
57.2678 36.8011 li
57.2678 61.4011 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[53.28 0 0 24.84 -82.7443 105.114 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 444 
/H 207 
/M[444 0 0 -207 0 207 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 444 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 444 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 444 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
J,~>

%%EndBinary
grestore
np
gsave
4.10789 61.4011 mo
57.1478 61.4011 li
57.1478 36.8011 li
4.10789 36.8011 li
4.10789 61.4011 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B78E05EAA3CECCCC7ABA6A35E55F211820F669BFFF2D107F3F
003F84456D947B5557966A2009812B81B51372EB70EB729C8C82B63A473DB516
1C83385AAD04B71C9D388B2F86E7C2E91E06E59E76C532F8A600B530589A218B
CA1E889366120C885033631C7850C65A7F9274D24F9BF6FA89E174B53B0E1A2C
F6D783F32D4C0BE4ACD3EEAF66A8BEC8DB7AC7ADBF3C9CDF5485D002662D310A
CCD320AD0234A2F2251E7C0B1667BFFC7E10EE40C7CB623518E3E168137CE699
E133B767C86E16CACCA64A58BD9D7F6E66BED6D6FE5D80E0381141549FFB2FBF
94ECD2D262EB097909F9092B71E3573FC9B4FD273505C685B327AE9095A2A155
45986A397AE2796BDB3888D16AF3DD82BF32621BC8C1393814540227FC926F77
872F2FAF5DD33717EB461ACFE3EE5C279294EBB5AADC09C8B10C3F2CB25CCD97
C6> |-
/j <1C60D8A8C9B87DE052CBE8EA1F435A396D74A156D684A1B719256AFD088D
E495AA86AB7CCD817A938296CF0F8399FCEE3662F575F22BC642EE0CBF88CC1C
A4E7C552C32B03DACABF153EC87432328A1B586B939F59CFDC9731F30AA1A68D
B84B1EFDC126626FAA4641C6597CC22073BC4D69999C5D6D474DD6908804D154
4FDE037D86AE8A6C3A9927A20091D90229324CDD9FA2941F8BE3C5B43DD929A0
6AA1AD6E0B73E9E2E606C9A69DE2B4F2C6A9FE4A4F1F9F102378426C65CF9936
58CBD59E49F9CFE61F443718943CF94BE0B4F9059A84581CE3CF237B076901A7
8460D8D22ECAD343A9B673E5DB1B8CDBC20B31ADB6632AE6BB266CC352037837
A50F2914B3EF21D046A7AF8296D6E8210A2059C31E> |-
/m <1C60D8A8C9B6D24F7D3842850F4949AEB6B9100F2B78F4C8889450CED823
786FEB32A1B63E88AD56EE02413123CB64791A93EF92133FE4595DA2691E3035
F9F72C6031AE554C5E100D6D83A5170AEAC660F3CD2D2E423C32E393EEDCE69B
38CE6373F6B6777FFB71A30474298882FF21A6474EA00B23874CB701D4949FDA
B683EF52B401CF01FBFB5320858391C36D1B0A5131B6AD88B31FBA5AF7369B53
8683192205F94F973772FC0D1A80750F5CA55E65F4A8760D9FFB5A3E462EB76A
F894987A3AB123C31C6F61A2DE381C11A73194BB9FA663DEB4E0E047953FDCCB
40254C512459EA81EABD29705BEDA8917220B4CD736962EC932D0F91B2A5DC80
8623631D3854D7B6297589945BF94293721596CC4C62C71F5A8040654672D59A
8C73FC39F2C6919502A1FD8EB49A6BB72701DD42520B2F6CD223AC11A22A5CED
8614ABBE01C624D0AED39BB3AE4E8B513F61C37C6BA440280E139545B39C87A0
6867746DDC81F39BACA8E048A7276011988ACE081223D841AEA6DE2418F28BD5
9A30A454BE8DAE3786DDCC7D1BEEFB13E445F279EE7EA8CB61C194C9B25497E6
925AF3BEE4F64F897F4A57BD4C4A1E06EBC8223C35049061> |-
/n <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4
C30D8A20FB7C70B167834EB1FCB2A451DA55CBA774B9C40CA48F3B7AD8E41B3F
0C2665E2AF85619561E070ABE3E4EFEC9983825210D2A0599E48D162F3133798
2CE0D843D2D41F1F7924A343E37439CC75937984C88A0080C28B8BFBFB8F444A
FA11CBAA4BCF4C8D3087770F88F26B0A8B30E46AE29C6BF9720949C50E19D624
8BB58DE961D63651843F9B3B8EE9AA75CDE28D1F95D7703116FE7AA23945B580
8B97F9947888D114BE2523F872057145410E975A2CA83D430B49A7CAE2661901
2C2444BEBF6DC1397EFC38FADD0435CE6D4A1478744BC983827B31CF502C4487
AF1E48BBC2EB6153C1C5367B96A212BCD3FEE3B9DEC12C4E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 100 /d put
dup 106 /j put
dup 109 /m put
dup 110 /n put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 43{/.notdef}rp /L /M 5{/.notdef}rp /S 13{/.notdef}rp 
/a 2{/.notdef}rp /d /e 2{/.notdef}rp /h /i /j 
/.notdef /l /m /n /.notdef /p /.notdef /r 
/s /t /u /.notdef /w 136{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
4.22786 45.3211 mo
(adjustment)
[4.32004 4.67995 2.15998 4.67995 3.48035 2.99976 7.19996 4.56032 4.67993 0 ]xsh
grestore
gsave
4.10789 61.4011 mo
57.1478 61.4011 li
57.1478 36.8011 li
4.10789 36.8011 li
4.10789 61.4011 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
46.1079 45.3211 mo
( )sh
grestore
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B714A578818061920CBD3BB0F0FEC7EB28869C0269DBFC0262
5554E339FA8F23FF202BF6BBA51F73386176CF41E41162B391BD65C46864E1ED
BE38C4A175836382F89D1B282918F37F6A98A1C310371E84DC05CA4D214BBF40
D0904F28663CAA2B1AF41B75D4680E3731D792C10C395648F8CE6283B6D2EA4E
A25EB0077385CC26E37C0D4F9F091C8BC196661820383DC1CFC26D318A92B139
8AE8D24532A475AF0A93A6DC660BFF9F07C9678F9C3412071B0DAC612FC7D6B5
FAE3214E7C7AB18E3145411FCE0CA8B75D2C8C25C05252A375257E1693A2B9D1
1EE377C95BA1746CBCD896C9D8284A96EC1B8BEF12D6460B6828EC26350E91CC
593B47372BD95FFBF8C2322BFC435A5494ED398AAAE3E6E4293369CDCFAC0147
8225F7C60BA6A2722907E6FF92F4B9457F52836FAB37F27C55593B43AB457EA2
91D6DE23> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 99 /c put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 43{/.notdef}rp /L /M 5{/.notdef}rp /S 13{/.notdef}rp 
/a /.notdef /c /d /e 2{/.notdef}rp /h /i 
/j /.notdef /l /m /n /.notdef /p /.notdef 
/r /s /t /u /.notdef /w 136{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
4.22786 56.2411 mo
(screws)
[3.48306 3.83944 3.12029 4.4397 6.47997 0 ]xsh
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
29.0734 56.2411 mo
( )sh
48.5079 141.321 mo
-.572159 141.321 li
-.572159 114.681 li
48.5079 114.681 li
48.5079 141.321 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[49.32 0 0 26.88 -87.5443 25.1938 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 411 
/H 224 
/M[411 0 0 -224 0 224 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 411 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 411 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 411 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)bB@K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a'p
J,~>

%%EndBinary
grestore
np
gsave
-.572159 141.441 mo
48.5079 141.441 li
48.5079 114.681 li
-.572159 114.681 li
-.572159 141.441 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B78C66ECF3075BCC0F7D87F2E9EA9E473D66D53E6D1735C12E
AC0562A2F6FB428E7F7051A3A7B2D4CA6ED90F77808579359B7E539B5388F6F5
4555E1422B5F329989100C1CD5239E87FECD85E14E914ADC27391A1F5624B31E
E69A68B9016D73D6A01A100E004523AC53318A2FC2260E74BA80D4ABD1433EC6
7800CC9F77763DCF8156EA5CA478ABF1FAF7864EAD55939BE7FA4A9E8660CE98
DDE8CBC35F3FFF4E5C2DA4A292CE30D82057E70A8562AFB17C90FC331A4C46B4
8C7BBCED55DB7F94D559D534C59FF211B5A85F0207876BD8D6B2C7BBBC06964A
16F72BBAE841F001B71209E6C81DC64817ADE625E8FF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 111 /o put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 43{/.notdef}rp /L /M 5{/.notdef}rp /S 13{/.notdef}rp 
/a /.notdef /c /d /e 2{/.notdef}rp /h /i 
/j /.notdef /l /m /n /o /p /.notdef 
/r /s /t /u /.notdef /w 136{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
6.62786 123.321 mo
(power)
[4.67995 4.79964 6.47997 4.43701 0 ]xsh
grestore
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
6.62786 134.241 mo
(switch)
[3.48306 6.47997 2.03944 3.00066 3.83943 0 ]xsh
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
30.1449 134.241 mo
( )sh
10.7605 115.854 mo
18.0295 92.5583 li
@
15.978 71.2153 mo
13.33 60.4153 li
@
415.894 4.7124 mo
418.962 5.30444 li
418.962 6.4884 li
415.894 7.08142 li
cp
.783545 .790168 .797695 rgb
ef
415.894 8.40277 mo
418.962 8.99481 li
418.962 10.1788 li
415.894 10.7718 li
cp
ef
415.894 12.0931 mo
418.962 12.6851 li
418.962 13.8691 li
415.894 14.4621 li
cp
ef
415.894 15.7835 mo
418.962 16.3755 li
418.962 17.5595 li
415.894 18.1525 li
cp
ef
415.894 19.4738 mo
418.962 20.0659 li
418.962 21.2498 li
415.894 21.8428 li
cp
ef
415.894 23.1643 mo
418.962 23.7563 li
418.962 24.9403 li
415.894 25.5333 li
cp
ef
415.894 26.8546 mo
418.962 27.4467 li
418.962 28.6306 li
415.894 29.2236 li
cp
ef
415.894 30.5449 mo
418.962 31.1369 li
418.962 32.3209 li
415.894 32.9139 li
cp
ef
415.894 34.2353 mo
418.962 34.8273 li
418.962 36.0113 li
415.894 36.6043 li
cp
ef
415.894 37.9257 mo
418.962 38.5177 li
418.962 39.7017 li
415.894 40.2947 li
cp
ef
415.894 41.616 mo
418.962 42.208 li
418.962 43.392 li
415.894 43.985 li
cp
ef
415.894 45.3063 mo
418.962 45.8983 li
418.962 47.0823 li
415.894 47.6753 li
cp
ef
415.894 48.9968 mo
418.962 49.5888 li
418.962 50.7728 li
415.894 51.3658 li
cp
ef
415.894 52.6871 mo
418.962 53.2791 li
418.962 54.4631 li
415.894 55.0561 li
cp
ef
415.894 56.3775 mo
418.962 56.9695 li
418.962 58.1535 li
415.894 58.7465 li
cp
ef
415.894 60.0678 mo
418.962 60.6599 li
418.962 61.8438 li
415.894 62.4368 li
cp
ef
415.894 63.7582 mo
418.962 64.3502 li
418.962 65.5342 li
415.894 66.1272 li
cp
ef
415.894 67.4486 mo
418.962 68.0406 li
418.962 69.2246 li
415.894 69.8176 li
cp
ef
415.894 71.1389 mo
418.962 71.731 li
418.962 72.9149 li
415.894 73.5079 li
cp
ef
415.894 74.8293 mo
418.962 75.4213 li
418.962 76.6053 li
415.894 77.1983 li
cp
ef
415.894 78.5196 mo
418.962 79.1116 li
418.962 80.2956 li
415.894 80.8886 li
cp
ef
415.894 82.21 mo
418.962 82.802 li
418.962 83.986 li
415.894 84.579 li
cp
ef
415.894 85.9004 mo
418.962 86.4924 li
418.962 87.6764 li
415.894 88.2694 li
cp
ef
415.894 89.5908 mo
418.962 90.1828 li
418.962 91.3668 li
415.894 91.9598 li
cp
ef
415.894 93.281 mo
418.962 93.873 li
418.962 95.057 li
415.894 95.65 li
cp
ef
415.894 96.9714 mo
418.962 97.5634 li
418.962 98.7474 li
415.894 99.3404 li
cp
ef
415.869 99.6511 mo
411.537 99.6511 li
411.537 4.40106 li
415.869 4.40106 li
cp
ef
415.909 67.5009 mo
418.998 68.093 li
418.998 69.2769 li
415.909 69.8699 li
cp
ef
415.909 71.2162 mo
418.998 71.8082 li
418.998 72.9922 li
415.909 73.5852 li
cp
ef
415.909 74.9315 mo
418.998 75.5235 li
418.998 76.7075 li
415.909 77.3005 li
cp
ef
415.909 78.6467 mo
418.998 79.2387 li
418.998 80.4227 li
415.909 81.0157 li
cp
ef
415.909 82.362 mo
418.998 82.954 li
418.998 84.138 li
415.909 84.731 li
cp
ef
415.909 86.0772 mo
418.998 86.6693 li
418.998 87.8532 li
415.909 88.4462 li
cp
ef
415.909 89.7925 mo
418.998 90.3845 li
418.998 91.5685 li
415.909 92.1615 li
cp
ef
415.909 93.5078 mo
418.998 94.0999 li
418.998 95.2838 li
415.909 95.8768 li
cp
ef
415.909 97.223 mo
418.998 97.815 li
418.998 98.999 li
415.909 99.592 li
cp
ef
415.909 100.938 mo
418.998 101.53 li
418.998 102.714 li
415.909 103.307 li
cp
ef
415.909 104.654 mo
418.998 105.246 li
418.998 106.43 li
415.909 107.023 li
cp
ef
415.909 108.369 mo
418.998 108.961 li
418.998 110.145 li
415.909 110.738 li
cp
ef
415.909 112.084 mo
418.998 112.676 li
418.998 113.86 li
415.909 114.453 li
cp
ef
415.909 115.799 mo
418.998 116.391 li
418.998 117.575 li
415.909 118.168 li
cp
ef
415.909 119.515 mo
418.998 120.107 li
418.998 121.291 li
415.909 121.884 li
cp
ef
415.909 123.23 mo
418.998 123.822 li
418.998 125.006 li
415.909 125.599 li
cp
ef
415.909 126.945 mo
418.998 127.537 li
418.998 128.721 li
415.909 129.314 li
cp
ef
415.909 130.66 mo
418.998 131.252 li
418.998 132.436 li
415.909 133.029 li
cp
ef
415.909 134.376 mo
418.998 134.968 li
418.998 136.152 li
415.909 136.745 li
cp
ef
415.909 138.091 mo
418.998 138.683 li
418.998 139.867 li
415.909 140.46 li
cp
ef
415.909 141.806 mo
418.998 142.398 li
418.998 143.582 li
415.909 144.175 li
cp
ef
415.909 145.521 mo
418.998 146.113 li
418.998 147.297 li
415.909 147.89 li
cp
ef
415.909 149.237 mo
418.998 149.829 li
418.998 151.013 li
415.909 151.606 li
cp
ef
415.909 152.952 mo
418.998 153.544 li
418.998 154.728 li
415.909 155.321 li
cp
ef
415.909 156.667 mo
418.998 157.259 li
418.998 158.443 li
415.909 159.035 li
cp
ef
415.909 160.382 mo
418.998 160.974 li
418.998 162.158 li
415.909 162.75 li
cp
ef
415.909 162.751 mo
411.548 162.751 li
411.548 67.5011 li
415.909 67.5011 li
cp
ef
367.906 96.0451 mo
465.674 96.0451 li
465.674 130.345 li
367.906 130.345 li
367.906 96.0451 li
.705021 .712684 .721721 rgb
ef
367.906 96.0451 mo
367.906 95.9201 li
465.674 95.9201 li
465.762 95.9567 li
465.799 96.0451 li
465.799 130.345 li
465.762 130.433 li
465.674 130.47 li
367.906 130.47 li
367.817 130.434 li
367.781 130.345 li
367.781 96.0451 li
367.817 95.9567 li
367.906 95.9201 li
367.906 96.0451 li
368.031 96.0451 li
368.031 130.22 li
465.549 130.22 li
465.549 96.1702 li
367.906 96.1702 li
367.906 96.0451 li
368.031 96.0451 li
367.906 96.0451 li
.21602 .207454 .209307 rgb
f
404.909 96.0451 mo
404.909 130.345 li
405.409 130.345 li
405.409 96.0451 li
405.909 96.0451 mo
405.909 130.345 li
406.409 130.345 li
406.409 96.0451 li
f
407.775 112.66 mo
407.775 101.145 417.107 91.8098 428.618 91.8098 cv
440.129 91.8098 449.461 101.145 449.461 112.66 cv
449.461 124.175 440.129 133.51 428.618 133.51 cv
417.107 133.51 407.775 124.175 407.775 112.66 cv
.783545 .790168 .797695 rgb
ef
408.175 112.66 mo
408.775 112.66 li
408.775 112.49 408.777 112.317 408.781 112.147 cv
408.786 111.978 408.792 111.806 408.801 111.638 cv
408.809 111.47 408.82 111.299 408.833 111.132 cv
408.846 110.965 408.861 110.796 408.878 110.629 cv
408.877 110.629 li
408.894 110.464 408.914 110.296 408.934 110.131 cv
408.955 109.966 408.979 109.799 409.004 109.636 cv
409.029 109.473 409.056 109.307 409.085 109.145 cv
409.114 108.983 409.145 108.819 409.178 108.658 cv
409.211 108.498 409.246 108.336 409.283 108.176 cv
409.32 108.017 409.359 107.856 409.4 107.698 cv
409.44 107.541 409.483 107.382 409.528 107.225 cv
409.572 107.069 409.619 106.912 409.667 106.757 cv
409.715 106.603 409.766 106.446 409.817 106.293 cv
409.869 106.141 409.923 105.986 409.979 105.835 cv
410.034 105.684 410.092 105.531 410.151 105.382 cv
410.21 105.232 410.272 105.082 410.334 104.934 cv
410.396 104.786 410.462 104.637 410.527 104.491 cv
410.593 104.346 410.662 104.199 410.731 104.055 cv
410.801 103.911 410.873 103.766 410.945 103.624 cv
411.018 103.482 411.093 103.339 411.169 103.199 cv
411.245 103.059 411.324 102.918 411.403 102.78 cv
411.483 102.642 411.565 102.504 411.647 102.368 cv
411.73 102.232 411.815 102.095 411.901 101.962 cv
411.986 101.828 412.075 101.694 412.163 101.562 cv
412.252 101.431 412.344 101.299 412.435 101.17 cv
412.527 101.041 412.622 100.911 412.717 100.784 cv
412.811 100.657 412.909 100.53 413.007 100.405 cv
413.105 100.281 413.205 100.156 413.306 100.034 cv
413.407 99.9118 413.51 99.7888 413.614 99.6698 cv
413.717 99.5498 413.824 99.4298 413.93 99.3128 cv
414.036 99.1958 414.145 99.0788 414.254 98.9648 cv
414.363 98.8498 414.475 98.7358 414.587 98.6238 cv
414.699 98.5118 414.813 98.3998 414.928 98.2908 cv
415.042 98.1818 415.16 98.0728 415.276 97.9658 cv
415.393 97.8598 415.513 97.7538 415.633 97.6498 cv
415.752 97.5468 415.875 97.4428 415.997 97.3418 cv
416.119 97.2418 416.244 97.1408 416.368 97.0428 cv
416.492 96.9448 416.62 96.8478 416.746 96.7528 cv
416.873 96.6578 417.003 96.5628 417.132 96.4718 cv
417.261 96.3798 417.393 96.2878 417.524 96.1988 cv
417.656 96.1108 417.79 96.0218 417.924 95.9368 cv
418.057 95.8508 418.194 95.7648 418.33 95.6828 cv
418.465 95.6008 418.604 95.5178 418.742 95.4388 cv
418.88 95.3598 419.021 95.2808 419.161 95.2048 cv
419.3 95.1288 419.444 95.0538 419.585 94.9808 cv
419.727 94.9078 419.872 94.8358 420.016 94.7668 cv
420.16 94.6968 420.307 94.6288 420.452 94.5628 cv
420.453 94.5628 li
420.598 94.4968 420.747 94.4318 420.895 94.3688 cv
421.042 94.3068 421.193 94.2448 421.342 94.1858 cv
421.492 94.1278 421.645 94.0688 421.796 94.0138 cv
421.947 93.9588 422.101 93.9038 422.254 93.8528 cv
422.407 93.8008 422.563 93.7498 422.717 93.7018 cv
422.872 93.6538 423.03 93.6068 423.185 93.5628 cv
423.342 93.5188 423.501 93.4748 423.658 93.4348 cv
423.816 93.3938 423.977 93.3548 424.136 93.3178 cv
424.295 93.2808 424.458 93.2458 424.618 93.2128 cv
424.779 93.1798 424.943 93.1488 425.104 93.1198 cv
425.267 93.0908 425.432 93.0638 425.595 93.0388 cv
425.759 93.0138 425.925 92.9898 426.09 92.9698 cv
426.255 92.9488 426.422 92.9288 426.588 92.9128 cv
426.754 92.8958 426.924 92.8808 427.09 92.8678 cv
427.258 92.8548 427.428 92.8438 427.596 92.8358 cv
427.765 92.8268 427.936 92.8208 428.105 92.8158 cv
428.106 92.8158 li
428.275 92.8118 428.448 92.8098 428.618 92.8098 cv
428.788 92.8098 428.961 92.8118 429.131 92.8158 cv
429.3 92.8208 429.471 92.8268 429.64 92.8358 cv
429.808 92.8438 429.978 92.8548 430.146 92.8678 cv
430.313 92.8808 430.482 92.8958 430.648 92.9128 cv
430.814 92.9288 430.982 92.9488 431.147 92.9698 cv
431.311 92.9898 431.478 93.0138 431.641 93.0388 cv
431.804 93.0638 431.97 93.0908 432.132 93.1198 cv
432.294 93.1488 432.457 93.1798 432.618 93.2128 cv
432.779 93.2458 432.941 93.2808 433.1 93.3178 cv
433.259 93.3548 433.42 93.3938 433.578 93.4348 cv
433.735 93.4748 433.895 93.5188 434.051 93.5628 cv
434.207 93.6068 434.365 93.6538 434.519 93.7018 cv
434.673 93.7498 434.829 93.8008 434.982 93.8528 cv
435.135 93.9038 435.29 93.9588 435.441 94.0138 cv
435.592 94.0688 435.744 94.1278 435.894 94.1858 cv
436.043 94.2448 436.194 94.3068 436.342 94.3688 cv
436.489 94.4318 436.638 94.4968 436.784 94.5628 cv
436.929 94.6288 437.076 94.6968 437.22 94.7668 cv
437.364 94.8358 437.509 94.9078 437.651 94.9808 cv
437.793 95.0538 437.936 95.1288 438.076 95.2048 cv
438.215 95.2808 438.357 95.3598 438.494 95.4388 cv
438.632 95.5178 438.771 95.6008 438.907 95.6828 cv
439.042 95.7648 439.179 95.8508 439.313 95.9368 cv
439.446 96.0218 439.58 96.1108 439.712 96.1988 cv
439.843 96.2878 439.975 96.3798 440.104 96.4718 cv
440.233 96.5628 440.363 96.6578 440.49 96.7528 cv
440.617 96.8478 440.744 96.9448 440.868 97.0428 cv
440.993 97.1408 441.118 97.2418 441.24 97.3418 cv
441.362 97.4428 441.484 97.5468 441.604 97.6498 cv
441.723 97.7538 441.843 97.8598 441.96 97.9658 cv
442.077 98.0728 442.194 98.1818 442.309 98.2908 cv
442.423 98.3998 442.538 98.5118 442.649 98.6238 cv
442.761 98.7358 442.873 98.8498 442.982 98.9648 cv
443.091 99.0788 443.2 99.1958 443.307 99.3128 cv
443.413 99.4298 443.519 99.5498 443.623 99.6698 cv
443.726 99.7888 443.83 99.9118 443.93 100.034 cv
444.031 100.156 444.132 100.281 444.229 100.405 cv
444.327 100.53 444.425 100.657 444.52 100.784 cv
444.614 100.911 444.709 101.041 444.801 101.17 cv
444.893 101.299 444.984 101.431 445.073 101.562 cv
445.162 101.694 445.25 101.828 445.336 101.962 cv
445.421 102.095 445.507 102.232 445.589 102.368 cv
445.672 102.504 445.754 102.642 445.833 102.78 cv
445.912 102.918 445.991 103.059 446.067 103.199 cv
446.143 103.339 446.218 103.482 446.291 103.624 cv
446.364 103.766 446.436 103.911 446.505 104.055 cv
446.574 104.199 446.643 104.346 446.709 104.491 cv
446.775 104.637 446.84 104.786 446.902 104.934 cv
446.965 105.082 447.026 105.232 447.085 105.382 cv
447.144 105.531 447.202 105.684 447.257 105.835 cv
447.313 105.986 447.367 106.141 447.419 106.293 cv
447.471 106.446 447.521 106.603 447.569 106.757 cv
447.617 106.912 447.664 107.069 447.709 107.225 cv
447.753 107.382 447.796 107.541 447.837 107.698 cv
447.877 107.856 447.917 108.017 447.953 108.176 cv
447.99 108.336 448.025 108.498 448.058 108.658 cv
448.091 108.819 448.122 108.983 448.151 109.145 cv
448.18 109.307 448.208 109.473 448.233 109.636 cv
448.258 109.799 448.281 109.966 448.302 110.131 cv
448.323 110.296 448.342 110.464 448.359 110.629 cv
448.376 110.796 448.391 110.965 448.403 111.132 cv
448.416 111.299 448.427 111.47 448.435 111.638 cv
448.444 111.806 448.451 111.978 448.455 112.147 cv
448.459 112.317 448.461 112.49 448.461 112.66 cv
448.461 112.83 448.459 113.003 448.455 113.173 cv
448.451 113.342 448.444 113.514 448.435 113.682 cv
448.427 113.85 448.416 114.021 448.403 114.188 cv
448.391 114.355 448.376 114.525 448.359 114.691 cv
448.342 114.857 448.323 115.024 448.302 115.189 cv
448.281 115.354 448.258 115.521 448.233 115.684 cv
448.208 115.847 448.18 116.013 448.151 116.175 cv
448.122 116.337 448.091 116.501 448.058 116.662 cv
448.025 116.822 447.99 116.984 447.953 117.144 cv
447.917 117.303 447.877 117.464 447.837 117.622 cv
447.796 117.779 447.753 117.939 447.709 118.095 cv
447.664 118.251 447.617 118.409 447.569 118.563 cv
447.521 118.718 447.471 118.874 447.419 119.027 cv
447.367 119.179 447.313 119.334 447.257 119.485 cv
447.202 119.636 447.144 119.789 447.085 119.938 cv
447.026 120.088 446.965 120.239 446.902 120.386 cv
446.84 120.534 446.775 120.683 446.709 120.829 cv
446.643 120.974 446.574 121.121 446.505 121.265 cv
446.436 121.409 446.364 121.554 446.291 121.696 cv
446.218 121.838 446.143 121.981 446.067 122.121 cv
445.991 122.261 445.912 122.402 445.833 122.54 cv
445.754 122.678 445.672 122.817 445.589 122.952 cv
445.507 123.088 445.421 123.225 445.336 123.358 cv
445.25 123.492 445.162 123.626 445.073 123.758 cv
444.984 123.889 444.893 124.021 444.801 124.15 cv
444.709 124.279 444.614 124.409 444.52 124.536 cv
444.425 124.663 444.327 124.79 444.229 124.915 cv
444.132 125.039 444.031 125.164 443.93 125.286 cv
443.83 125.408 443.726 125.531 443.623 125.65 cv
443.519 125.77 443.413 125.89 443.307 126.007 cv
443.2 126.124 443.091 126.241 442.982 126.355 cv
442.873 126.47 442.761 126.584 442.649 126.696 cv
442.538 126.808 442.423 126.92 442.309 127.029 cv
442.194 127.138 442.077 127.247 441.96 127.354 cv
441.843 127.46 441.723 127.566 441.604 127.67 cv
441.484 127.773 441.362 127.877 441.24 127.978 cv
441.118 128.078 440.993 128.179 440.868 128.277 cv
440.744 128.375 440.617 128.472 440.49 128.567 cv
440.363 128.662 440.233 128.757 440.104 128.848 cv
439.975 128.94 439.843 129.032 439.712 129.121 cv
439.58 129.209 439.446 129.298 439.313 129.384 cv
439.179 129.469 439.042 129.555 438.907 129.637 cv
438.771 129.72 438.632 129.802 438.494 129.881 cv
438.357 129.96 438.215 130.039 438.076 130.115 cv
437.936 130.191 437.793 130.266 437.651 130.339 cv
437.509 130.412 437.364 130.484 437.22 130.553 cv
437.076 130.623 436.929 130.691 436.784 130.757 cv
436.638 130.823 436.489 130.888 436.342 130.951 cv
436.194 131.013 436.043 131.075 435.894 131.134 cv
435.744 131.193 435.592 131.251 435.441 131.306 cv
435.29 131.361 435.135 131.416 434.982 131.467 cv
434.829 131.519 434.673 131.57 434.519 131.618 cv
434.365 131.666 434.207 131.713 434.051 131.757 cv
433.895 131.802 433.735 131.845 433.578 131.885 cv
433.42 131.926 433.259 131.965 433.1 132.002 cv
432.941 132.039 432.779 132.074 432.618 132.107 cv
432.457 132.14 432.294 132.171 432.132 132.2 cv
431.97 132.229 431.804 132.256 431.641 132.281 cv
431.478 132.306 431.311 132.33 431.147 132.35 cv
430.982 132.371 430.814 132.391 430.648 132.407 cv
430.482 132.424 430.313 132.439 430.146 132.452 cv
429.978 132.465 429.808 132.476 429.64 132.484 cv
429.471 132.493 429.3 132.499 429.131 132.504 cv
428.961 132.508 428.788 132.51 428.618 132.51 cv
428.448 132.51 428.275 132.508 428.106 132.504 cv
428.105 132.504 li
427.936 132.499 427.765 132.493 427.596 132.484 cv
427.428 132.476 427.258 132.465 427.09 132.452 cv
426.924 132.439 426.754 132.424 426.588 132.407 cv
426.422 132.391 426.255 132.371 426.09 132.35 cv
425.925 132.33 425.759 132.306 425.595 132.281 cv
425.432 132.256 425.267 132.229 425.104 132.2 cv
424.943 132.171 424.779 132.14 424.618 132.107 cv
424.458 132.074 424.295 132.039 424.136 132.002 cv
423.977 131.965 423.816 131.926 423.658 131.885 cv
423.501 131.845 423.342 131.802 423.185 131.757 cv
423.03 131.713 422.872 131.666 422.717 131.618 cv
422.563 131.57 422.407 131.519 422.254 131.467 cv
422.101 131.416 421.947 131.361 421.796 131.306 cv
421.645 131.251 421.492 131.193 421.342 131.134 cv
421.193 131.075 421.042 131.013 420.895 130.951 cv
420.747 130.888 420.598 130.823 420.453 130.757 cv
420.452 130.757 li
420.307 130.691 420.16 130.623 420.016 130.553 cv
419.872 130.484 419.727 130.412 419.585 130.339 cv
419.444 130.266 419.3 130.191 419.161 130.115 cv
419.021 130.039 418.88 129.96 418.742 129.881 cv
418.604 129.802 418.465 129.72 418.33 129.637 cv
418.194 129.555 418.057 129.469 417.924 129.384 cv
417.79 129.298 417.656 129.209 417.524 129.121 cv
417.393 129.032 417.261 128.94 417.132 128.848 cv
417.003 128.757 416.873 128.662 416.746 128.567 cv
416.62 128.472 416.492 128.375 416.368 128.277 cv
416.244 128.179 416.119 128.078 415.997 127.978 cv
415.875 127.877 415.752 127.773 415.633 127.67 cv
415.513 127.566 415.393 127.46 415.276 127.354 cv
415.16 127.247 415.042 127.138 414.928 127.029 cv
414.813 126.92 414.699 126.808 414.587 126.696 cv
414.475 126.584 414.363 126.47 414.254 126.355 cv
414.145 126.241 414.036 126.124 413.93 126.007 cv
413.824 125.89 413.717 125.77 413.614 125.65 cv
413.51 125.531 413.407 125.408 413.306 125.286 cv
413.205 125.164 413.105 125.039 413.007 124.915 cv
412.909 124.79 412.811 124.663 412.717 124.536 cv
412.622 124.409 412.527 124.279 412.435 124.15 cv
412.344 124.021 412.252 123.889 412.163 123.758 cv
412.075 123.626 411.986 123.492 411.901 123.358 cv
411.815 123.225 411.73 123.088 411.647 122.952 cv
411.565 122.817 411.483 122.678 411.403 122.54 cv
411.324 122.402 411.245 122.261 411.169 122.121 cv
411.093 121.981 411.018 121.838 410.945 121.696 cv
410.873 121.554 410.801 121.409 410.731 121.265 cv
410.662 121.121 410.593 120.974 410.527 120.829 cv
410.462 120.683 410.396 120.534 410.334 120.386 cv
410.272 120.239 410.21 120.088 410.151 119.938 cv
410.092 119.789 410.034 119.636 409.979 119.485 cv
409.923 119.334 409.869 119.179 409.817 119.027 cv
409.766 118.874 409.715 118.718 409.667 118.563 cv
409.619 118.409 409.572 118.251 409.528 118.095 cv
409.483 117.939 409.44 117.779 409.4 117.622 cv
409.359 117.464 409.32 117.303 409.283 117.144 cv
409.246 116.984 409.211 116.822 409.178 116.662 cv
409.145 116.501 409.114 116.337 409.085 116.175 cv
409.056 116.013 409.029 115.847 409.004 115.684 cv
408.979 115.521 408.955 115.354 408.934 115.189 cv
408.914 115.024 408.894 114.857 408.877 114.691 cv
408.878 114.691 li
408.861 114.525 408.846 114.355 408.833 114.188 cv
408.82 114.021 408.809 113.85 408.801 113.682 cv
408.792 113.514 408.786 113.342 408.781 113.173 cv
408.777 113.003 408.775 112.83 408.775 112.66 cv
408.175 112.66 li
407.575 112.66 li
407.575 112.841 407.577 113.023 407.582 113.203 cv
407.586 113.383 407.593 113.564 407.602 113.743 cv
407.611 113.921 407.623 114.102 407.636 114.279 cv
407.65 114.457 407.666 114.636 407.684 114.812 cv
407.701 114.988 407.722 115.166 407.744 115.341 cv
407.766 115.515 407.791 115.692 407.817 115.866 cv
407.817 115.865 li
407.844 116.039 407.873 116.214 407.904 116.386 cv
407.934 116.558 407.968 116.731 408.003 116.902 cv
408.037 117.072 408.075 117.244 408.114 117.414 cv
408.153 117.582 408.194 117.753 408.237 117.921 cv
408.28 118.088 408.326 118.256 408.373 118.423 cv
408.42 118.588 408.47 118.755 408.521 118.92 cv
408.572 119.083 408.626 119.249 408.681 119.411 cv
408.736 119.573 408.793 119.737 408.852 119.898 cv
408.911 120.058 408.972 120.22 409.035 120.379 cv
409.097 120.537 409.162 120.697 409.229 120.854 cv
409.295 121.01 409.364 121.168 409.434 121.323 cv
409.504 121.478 409.577 121.633 409.65 121.786 cv
409.724 121.939 409.8 122.092 409.877 122.243 cv
409.954 122.394 410.034 122.545 410.115 122.694 cv
410.196 122.842 410.279 122.991 410.363 123.138 cv
410.447 123.284 410.534 123.431 410.622 123.575 cv
410.709 123.719 410.799 123.864 410.89 124.006 cv
410.981 124.148 411.075 124.29 411.169 124.429 cv
411.263 124.569 411.36 124.709 411.457 124.846 cv
411.555 124.983 411.655 125.12 411.756 125.255 cv
411.856 125.389 411.96 125.524 412.063 125.656 cv
412.167 125.788 412.273 125.92 412.38 126.05 cv
412.487 126.179 412.597 126.309 412.706 126.436 cv
412.816 126.562 412.929 126.689 413.042 126.814 cv
413.154 126.938 413.27 127.062 413.386 127.183 cv
413.501 127.305 413.62 127.426 413.738 127.545 cv
413.857 127.663 413.978 127.782 414.1 127.897 cv
414.221 128.013 414.345 128.129 414.469 128.242 cv
414.593 128.354 414.72 128.467 414.847 128.577 cv
414.974 128.687 415.103 128.796 415.233 128.903 cv
415.362 129.01 415.494 129.117 415.626 129.22 cv
415.758 129.324 415.893 129.427 416.028 129.528 cv
416.162 129.629 416.3 129.729 416.436 129.826 cv
416.573 129.924 416.713 130.021 416.853 130.115 cv
416.992 130.209 417.134 130.303 417.276 130.394 cv
417.418 130.485 417.562 130.575 417.706 130.662 cv
417.85 130.75 417.997 130.837 418.144 130.921 cv
418.29 131.005 418.439 131.089 418.588 131.169 cv
418.736 131.25 418.888 131.33 419.038 131.407 cv
419.189 131.484 419.342 131.561 419.495 131.634 cv
419.648 131.708 419.803 131.781 419.958 131.85 cv
420.113 131.92 420.271 131.989 420.427 132.056 cv
420.584 132.122 420.744 132.187 420.902 132.25 cv
421.061 132.313 421.223 132.374 421.383 132.433 cv
421.543 132.491 421.707 132.549 421.869 132.604 cv
422.032 132.659 422.197 132.713 422.361 132.764 cv
422.525 132.815 422.692 132.864 422.857 132.911 cv
423.023 132.959 423.192 133.004 423.359 133.047 cv
423.527 133.09 423.697 133.132 423.866 133.171 cv
424.035 133.21 424.207 133.248 424.377 133.282 cv
424.548 133.317 424.722 133.351 424.893 133.381 cv
425.066 133.412 425.241 133.441 425.414 133.467 cv
425.587 133.494 425.764 133.519 425.938 133.541 cv
426.113 133.563 426.291 133.584 426.467 133.601 cv
426.643 133.619 426.822 133.635 426.999 133.649 cv
427.177 133.662 427.357 133.674 427.535 133.683 cv
427.714 133.692 427.896 133.699 428.075 133.703 cv
428.255 133.708 428.438 133.71 428.618 133.71 cv
428.799 133.71 428.981 133.708 429.161 133.703 cv
429.341 133.699 429.522 133.692 429.701 133.683 cv
429.879 133.674 430.059 133.662 430.237 133.649 cv
430.414 133.635 430.593 133.619 430.769 133.601 cv
430.945 133.584 431.123 133.563 431.298 133.541 cv
431.473 133.519 431.649 133.494 431.823 133.467 cv
431.996 133.441 432.171 133.412 432.343 133.381 cv
432.515 133.351 432.688 133.317 432.859 133.282 cv
433.029 133.248 433.201 133.21 433.37 133.171 cv
433.539 133.132 433.709 133.09 433.877 133.047 cv
434.044 133.004 434.213 132.959 434.379 132.911 cv
434.544 132.864 434.711 132.815 434.876 132.764 cv
435.04 132.713 435.205 132.659 435.367 132.604 cv
435.529 132.549 435.693 132.491 435.854 132.433 cv
436.014 132.374 436.175 132.313 436.334 132.25 cv
436.493 132.187 436.652 132.122 436.809 132.056 cv
436.966 131.989 437.123 131.92 437.278 131.85 cv
437.433 131.781 437.589 131.708 437.741 131.634 cv
437.894 131.561 438.047 131.484 438.198 131.407 cv
438.349 131.33 438.5 131.25 438.649 131.169 cv
438.797 131.089 438.946 131.005 439.093 130.921 cv
439.239 130.837 439.386 130.75 439.53 130.662 cv
439.674 130.575 439.819 130.485 439.96 130.394 cv
440.102 130.303 440.244 130.209 440.384 130.115 cv
440.523 130.021 440.663 129.924 440.8 129.826 cv
440.937 129.729 441.074 129.629 441.209 129.528 cv
441.343 129.427 441.478 129.324 441.61 129.22 cv
441.742 129.117 441.874 129.01 442.004 128.903 cv
442.133 128.796 442.263 128.687 442.389 128.577 cv
442.516 128.467 442.643 128.354 442.767 128.242 cv
442.891 128.129 443.015 128.013 443.137 127.897 cv
443.258 127.782 443.379 127.663 443.498 127.545 cv
443.616 127.426 443.735 127.305 443.851 127.183 cv
443.966 127.062 444.082 126.938 444.195 126.814 cv
444.307 126.689 444.42 126.562 444.53 126.436 cv
444.64 126.309 444.749 126.179 444.856 126.05 cv
444.963 125.92 445.069 125.788 445.173 125.656 cv
445.277 125.524 445.38 125.389 445.481 125.255 cv
445.581 125.12 445.682 124.983 445.779 124.846 cv
445.876 124.709 445.973 124.569 446.067 124.429 cv
446.162 124.29 446.255 124.148 446.346 124.006 cv
446.437 123.864 446.527 123.719 446.615 123.575 cv
446.702 123.431 446.789 123.284 446.873 123.138 cv
446.957 122.991 447.041 122.842 447.121 122.694 cv
447.202 122.545 447.282 122.394 447.359 122.243 cv
447.436 122.092 447.513 121.939 447.586 121.786 cv
447.66 121.633 447.732 121.478 447.802 121.323 cv
447.872 121.168 447.941 121.01 448.008 120.854 cv
448.074 120.697 448.139 120.537 448.202 120.379 cv
448.264 120.22 448.326 120.058 448.384 119.898 cv
448.443 119.737 448.501 119.573 448.556 119.411 cv
448.611 119.249 448.664 119.083 448.715 118.92 cv
448.766 118.755 448.816 118.588 448.863 118.423 cv
448.91 118.256 448.956 118.088 448.999 117.921 cv
449.042 117.753 449.084 117.582 449.122 117.414 cv
449.162 117.244 449.199 117.072 449.234 116.902 cv
449.269 116.731 449.302 116.558 449.333 116.386 cv
449.363 116.214 449.392 116.039 449.419 115.865 cv
449.419 115.866 li
449.445 115.692 449.47 115.515 449.492 115.341 cv
449.514 115.166 449.535 114.988 449.553 114.812 cv
449.571 114.636 449.586 114.457 449.6 114.279 cv
449.613 114.102 449.625 113.921 449.634 113.743 cv
449.643 113.564 449.65 113.383 449.654 113.203 cv
449.659 113.023 449.661 112.841 449.661 112.66 cv
449.661 112.48 449.659 112.297 449.654 112.117 cv
449.65 111.937 449.643 111.756 449.634 111.577 cv
449.625 111.399 449.613 111.218 449.6 111.041 cv
449.586 110.864 449.571 110.685 449.553 110.508 cv
449.535 110.332 449.514 110.154 449.492 109.979 cv
449.47 109.805 449.445 109.628 449.419 109.455 cv
449.392 109.281 449.363 109.106 449.333 108.934 cv
449.302 108.762 449.269 108.589 449.234 108.418 cv
449.199 108.248 449.162 108.076 449.122 107.906 cv
449.084 107.738 449.042 107.567 448.999 107.399 cv
448.956 107.232 448.91 107.064 448.863 106.897 cv
448.816 106.732 448.766 106.565 448.715 106.4 cv
448.664 106.237 448.611 106.071 448.556 105.909 cv
448.501 105.747 448.443 105.583 448.384 105.422 cv
448.326 105.262 448.264 105.1 448.202 104.941 cv
448.139 104.783 448.074 104.623 448.008 104.466 cv
447.941 104.31 447.872 104.152 447.802 103.997 cv
447.732 103.842 447.66 103.687 447.586 103.534 cv
447.513 103.381 447.436 103.228 447.359 103.077 cv
447.282 102.926 447.202 102.775 447.121 102.626 cv
447.041 102.478 446.957 102.329 446.873 102.182 cv
446.789 102.036 446.702 101.889 446.615 101.745 cv
446.527 101.601 446.437 101.456 446.346 101.314 cv
446.255 101.173 446.162 101.03 446.067 100.891 cv
445.973 100.751 445.876 100.611 445.779 100.474 cv
445.682 100.337 445.581 100.2 445.481 100.065 cv
445.38 99.9308 445.277 99.7958 445.173 99.6638 cv
445.069 99.5318 444.963 99.3998 444.856 99.2698 cv
444.749 99.1408 444.64 99.0108 444.53 98.8839 cv
444.42 98.7578 444.307 98.6308 444.195 98.5058 cv
444.082 98.3818 443.966 98.2578 443.851 98.1368 cv
443.735 98.0148 443.616 97.8938 443.498 97.7748 cv
443.379 97.6568 443.258 97.5378 443.137 97.4228 cv
443.015 97.3068 442.891 97.1908 442.767 97.0788 cv
442.643 96.9658 442.516 96.8528 442.389 96.7428 cv
442.263 96.6328 442.133 96.5238 442.004 96.4168 cv
441.874 96.3098 441.742 96.2038 441.61 96.0998 cv
441.478 95.9958 441.343 95.8928 441.209 95.7918 cv
441.074 95.6908 440.937 95.5908 440.8 95.4938 cv
440.663 95.3958 440.523 95.2988 440.384 95.2048 cv
440.244 95.1108 440.102 95.0168 439.96 94.9258 cv
439.819 94.8348 439.674 94.7448 439.53 94.6578 cv
439.386 94.5698 439.239 94.4828 439.093 94.3988 cv
438.946 94.3148 438.797 94.2308 438.649 94.1508 cv
438.5 94.0698 438.349 93.9898 438.198 93.9128 cv
438.047 93.8358 437.894 93.7589 437.741 93.6858 cv
437.589 93.6118 437.433 93.5398 437.278 93.4698 cv
437.123 93.3998 436.966 93.3308 436.809 93.2638 cv
436.652 93.1978 436.493 93.1328 436.334 93.0698 cv
436.175 93.0078 436.014 92.9458 435.854 92.8868 cv
435.693 92.8288 435.529 92.7708 435.367 92.7158 cv
435.205 92.6608 435.04 92.6068 434.876 92.5558 cv
434.711 92.5048 434.544 92.4558 434.379 92.4088 cv
434.213 92.3608 434.044 92.3158 433.877 92.2728 cv
433.709 92.2298 433.539 92.1878 433.37 92.1488 cv
433.201 92.1098 433.029 92.0728 432.859 92.0378 cv
432.688 92.0028 432.515 91.9698 432.343 91.9388 cv
432.171 91.9078 431.996 91.8788 431.823 91.8528 cv
431.649 91.8258 431.473 91.8008 431.298 91.7788 cv
431.123 91.7568 430.945 91.7368 430.769 91.7188 cv
430.593 91.7008 430.414 91.6848 430.237 91.6708 cv
430.059 91.6578 429.879 91.6458 429.701 91.6368 cv
429.522 91.6278 429.341 91.6208 429.161 91.6168 cv
428.981 91.6118 428.799 91.6098 428.618 91.6098 cv
428.438 91.6098 428.255 91.6118 428.075 91.6168 cv
427.896 91.6208 427.714 91.6278 427.535 91.6368 cv
427.357 91.6458 427.177 91.6578 426.999 91.6708 cv
426.822 91.6848 426.643 91.7008 426.467 91.7188 cv
426.291 91.7368 426.113 91.7568 425.938 91.7788 cv
425.764 91.8008 425.587 91.8258 425.414 91.8528 cv
425.241 91.8788 425.066 91.9078 424.893 91.9388 cv
424.722 91.9698 424.548 92.0028 424.377 92.0378 cv
424.207 92.0728 424.035 92.1098 423.866 92.1488 cv
423.697 92.1878 423.527 92.2298 423.359 92.2728 cv
423.192 92.3158 423.023 92.3608 422.857 92.4088 cv
422.692 92.4558 422.525 92.5048 422.361 92.5558 cv
422.197 92.6068 422.032 92.6608 421.869 92.7158 cv
421.707 92.7708 421.543 92.8288 421.383 92.8868 cv
421.223 92.9458 421.061 93.0078 420.902 93.0698 cv
420.744 93.1328 420.584 93.1978 420.427 93.2638 cv
420.271 93.3308 420.113 93.3998 419.958 93.4698 cv
419.803 93.5398 419.648 93.6118 419.495 93.6858 cv
419.342 93.7589 419.189 93.8358 419.038 93.9128 cv
418.888 93.9898 418.736 94.0698 418.588 94.1508 cv
418.439 94.2308 418.29 94.3148 418.144 94.3988 cv
417.997 94.4828 417.85 94.5698 417.706 94.6578 cv
417.562 94.7448 417.418 94.8348 417.276 94.9258 cv
417.134 95.0168 416.992 95.1108 416.853 95.2048 cv
416.713 95.2988 416.573 95.3958 416.436 95.4938 cv
416.3 95.5908 416.162 95.6908 416.028 95.7918 cv
415.893 95.8928 415.758 95.9958 415.626 96.0998 cv
415.494 96.2038 415.362 96.3098 415.233 96.4168 cv
415.103 96.5238 414.974 96.6328 414.847 96.7428 cv
414.72 96.8528 414.593 96.9658 414.469 97.0788 cv
414.345 97.1908 414.221 97.3068 414.1 97.4228 cv
413.978 97.5378 413.857 97.6568 413.738 97.7748 cv
413.62 97.8938 413.501 98.0148 413.386 98.1368 cv
413.27 98.2578 413.154 98.3818 413.042 98.5058 cv
412.929 98.6308 412.816 98.7578 412.706 98.8839 cv
412.597 99.0108 412.487 99.1408 412.38 99.2698 cv
412.273 99.3998 412.167 99.5318 412.063 99.6638 cv
411.96 99.7958 411.856 99.9308 411.756 100.065 cv
411.655 100.2 411.555 100.337 411.457 100.474 cv
411.36 100.611 411.263 100.751 411.169 100.891 cv
411.075 101.03 410.981 101.173 410.89 101.314 cv
410.799 101.456 410.709 101.601 410.622 101.745 cv
410.534 101.889 410.447 102.036 410.363 102.182 cv
410.279 102.329 410.196 102.478 410.115 102.626 cv
410.034 102.775 409.954 102.926 409.877 103.077 cv
409.8 103.228 409.724 103.381 409.65 103.534 cv
409.577 103.687 409.504 103.842 409.434 103.997 cv
409.364 104.152 409.295 104.31 409.229 104.466 cv
409.162 104.623 409.097 104.783 409.035 104.941 cv
408.972 105.1 408.911 105.262 408.852 105.422 cv
408.793 105.583 408.736 105.747 408.681 105.909 cv
408.626 106.071 408.572 106.237 408.521 106.4 cv
408.47 106.565 408.42 106.732 408.373 106.897 cv
408.326 107.064 408.28 107.232 408.237 107.399 cv
408.194 107.567 408.153 107.738 408.114 107.906 cv
408.075 108.076 408.037 108.248 408.003 108.418 cv
407.968 108.589 407.934 108.762 407.904 108.934 cv
407.873 109.106 407.844 109.281 407.817 109.455 cv
407.791 109.628 407.766 109.805 407.744 109.979 cv
407.722 110.154 407.701 110.332 407.684 110.508 cv
407.666 110.685 407.65 110.864 407.636 111.041 cv
407.623 111.218 407.611 111.399 407.602 111.577 cv
407.593 111.756 407.586 111.937 407.582 112.117 cv
407.577 112.297 407.575 112.48 407.575 112.66 cv
cp
406.975 112.66 mo
407.175 112.66 li
407.175 112.476 407.177 112.29 407.182 112.107 cv
407.187 111.924 407.194 111.739 407.203 111.557 cv
407.212 111.375 407.224 111.191 407.238 111.01 cv
407.251 110.83 407.267 110.647 407.286 110.468 cv
407.304 110.289 407.325 110.107 407.347 109.929 cv
407.37 109.751 407.395 109.571 407.422 109.394 cv
407.449 109.218 407.479 109.039 407.51 108.864 cv
407.541 108.689 407.575 108.512 407.611 108.338 cv
407.646 108.164 407.684 107.989 407.724 107.816 cv
407.764 107.644 407.806 107.471 407.85 107.3 cv
407.894 107.13 407.941 106.957 407.989 106.788 cv
408.036 106.62 408.087 106.449 408.139 106.282 cv
408.191 106.115 408.246 105.946 408.302 105.781 cv
408.358 105.615 408.416 105.449 408.476 105.285 cv
408.536 105.122 408.599 104.957 408.663 104.795 cv
408.726 104.633 408.793 104.47 408.86 104.311 cv
408.928 104.151 408.998 103.99 409.069 103.832 cv
409.141 103.675 409.215 103.516 409.29 103.36 cv
409.365 103.205 409.443 103.048 409.521 102.895 cv
409.6 102.741 409.681 102.587 409.763 102.435 cv
409.845 102.284 409.931 102.132 410.016 101.983 cv
410.102 101.834 410.191 101.684 410.28 101.537 cv
410.369 101.39 410.461 101.243 410.554 101.098 cv
410.646 100.954 410.742 100.809 410.837 100.667 cv
410.933 100.525 411.032 100.382 411.131 100.243 cv
411.231 100.103 411.333 99.9628 411.435 99.8258 cv
411.538 99.6888 411.643 99.5508 411.749 99.4168 cv
411.854 99.2818 411.963 99.1469 412.072 99.0158 cv
412.18 98.8839 412.292 98.7518 412.404 98.6218 cv
412.516 98.4928 412.631 98.3638 412.746 98.2368 cv
412.86 98.1108 412.978 97.9838 413.096 97.8608 cv
413.214 97.7368 413.335 97.6128 413.455 97.4928 cv
413.576 97.3718 413.7 97.2508 413.824 97.1328 cv
413.947 97.0148 414.074 96.8969 414.2 96.7828 cv
414.326 96.6678 414.456 96.5528 414.585 96.4408 cv
414.714 96.3288 414.846 96.2168 414.978 96.1078 cv
415.11 95.9998 415.245 95.8908 415.379 95.7848 cv
415.513 95.6798 415.651 95.5738 415.788 95.4718 cv
415.925 95.3688 416.065 95.2668 416.205 95.1678 cv
416.344 95.0688 416.487 94.9698 416.629 94.8738 cv
416.771 94.7778 416.916 94.6818 417.06 94.5898 cv
417.204 94.4968 417.352 94.4048 417.499 94.3158 cv
417.645 94.2268 417.795 94.1378 417.944 94.0518 cv
418.093 93.9668 418.246 93.8808 418.397 93.7988 cv
418.548 93.7168 418.702 93.6358 418.856 93.5568 cv
419.009 93.4778 419.166 93.3998 419.321 93.3258 cv
419.477 93.2508 419.636 93.1758 419.793 93.1048 cv
419.951 93.0338 420.112 92.9628 420.271 92.8958 cv
420.431 92.8278 420.594 92.7618 420.755 92.6978 cv
420.917 92.6339 421.082 92.5718 421.245 92.5118 cv
421.409 92.4518 421.576 92.3928 421.741 92.3368 cv
421.906 92.2808 422.075 92.2258 422.242 92.1738 cv
422.409 92.1218 422.58 92.0718 422.748 92.0238 cv
422.917 91.9758 423.089 91.9288 423.26 91.8848 cv
423.43 91.8408 423.604 91.7988 423.776 91.7589 cv
423.948 91.7198 424.124 91.6808 424.297 91.6458 cv
424.471 91.6098 424.648 91.5758 424.823 91.5448 cv
424.999 91.5138 425.177 91.4838 425.353 91.4568 cv
425.53 91.4298 425.71 91.4048 425.888 91.3818 cv
426.066 91.3598 426.247 91.3388 426.426 91.3208 cv
426.606 91.3028 426.789 91.2858 426.969 91.2728 cv
427.15 91.2589 427.334 91.2468 427.515 91.2378 cv
427.697 91.2288 427.882 91.2218 428.065 91.2168 cv
428.248 91.2118 428.434 91.2098 428.618 91.2098 cv
428.802 91.2098 428.988 91.2118 429.171 91.2168 cv
429.354 91.2218 429.539 91.2288 429.721 91.2378 cv
429.903 91.2468 430.086 91.2589 430.267 91.2728 cv
430.448 91.2858 430.63 91.3028 430.81 91.3208 cv
430.989 91.3388 431.17 91.3598 431.349 91.3818 cv
431.526 91.4048 431.706 91.4298 431.883 91.4568 cv
432.059 91.4838 432.238 91.5138 432.413 91.5448 cv
432.588 91.5758 432.765 91.6098 432.939 91.6458 cv
433.112 91.6808 433.288 91.7198 433.46 91.7589 cv
433.632 91.7988 433.806 91.8408 433.977 91.8848 cv
434.147 91.9288 434.319 91.9758 434.488 92.0238 cv
434.657 92.0718 434.827 92.1218 434.995 92.1738 cv
435.161 92.2258 435.33 92.2808 435.496 92.3368 cv
435.661 92.3928 435.827 92.4518 435.991 92.5118 cv
436.154 92.5718 436.319 92.6339 436.481 92.6978 cv
436.642 92.7618 436.805 92.8278 436.965 92.8958 cv
437.124 92.9628 437.285 93.0338 437.443 93.1048 cv
437.601 93.1758 437.759 93.2508 437.915 93.3258 cv
438.07 93.3998 438.227 93.4778 438.381 93.5568 cv
438.534 93.6358 438.688 93.7168 438.84 93.7988 cv
438.991 93.8808 439.143 93.9668 439.292 94.0518 cv
439.441 94.1378 439.591 94.2268 439.738 94.3158 cv
439.884 94.4048 440.032 94.4968 440.176 94.5898 cv
440.321 94.6818 440.466 94.7778 440.608 94.8738 cv
440.75 94.9698 440.892 95.0688 441.032 95.1678 cv
441.171 95.2668 441.311 95.3688 441.448 95.4718 cv
441.585 95.5738 441.723 95.6798 441.857 95.7848 cv
441.992 95.8908 442.127 95.9998 442.258 96.1078 cv
442.39 96.2168 442.522 96.3288 442.651 96.4408 cv
442.78 96.5528 442.91 96.6678 443.036 96.7828 cv
443.163 96.8969 443.289 97.0148 443.413 97.1328 cv
443.536 97.2508 443.66 97.3718 443.781 97.4928 cv
443.902 97.6128 444.022 97.7368 444.14 97.8608 cv
444.258 97.9838 444.376 98.1108 444.491 98.2368 cv
444.606 98.3638 444.72 98.4928 444.832 98.6218 cv
444.944 98.7518 445.056 98.8839 445.165 99.0158 cv
445.273 99.1469 445.382 99.2818 445.488 99.4168 cv
445.593 99.5508 445.699 99.6888 445.801 99.8258 cv
445.904 99.9628 446.006 100.103 446.105 100.243 cv
446.204 100.382 446.303 100.525 446.399 100.667 cv
446.495 100.809 446.59 100.954 446.683 101.098 cv
446.775 101.243 446.868 101.39 446.957 101.537 cv
447.046 101.684 447.134 101.834 447.22 101.983 cv
447.306 102.132 447.391 102.284 447.473 102.435 cv
447.555 102.587 447.637 102.741 447.715 102.895 cv
447.794 103.048 447.872 103.205 447.946 103.36 cv
448.021 103.516 448.096 103.675 448.167 103.832 cv
448.238 103.99 448.309 104.151 448.376 104.311 cv
448.444 104.47 448.51 104.633 448.574 104.795 cv
448.638 104.957 448.7 105.122 448.76 105.285 cv
448.82 105.449 448.879 105.615 448.935 105.781 cv
448.991 105.946 449.045 106.115 449.097 106.282 cv
449.149 106.449 449.2 106.62 449.248 106.788 cv
449.296 106.957 449.342 107.13 449.386 107.3 cv
449.43 107.471 449.473 107.644 449.512 107.816 cv
449.552 107.989 449.59 108.164 449.626 108.338 cv
449.661 108.512 449.695 108.689 449.726 108.864 cv
449.758 109.039 449.787 109.218 449.814 109.394 cv
449.841 109.571 449.866 109.751 449.889 109.929 cv
449.912 110.107 449.932 110.289 449.951 110.468 cv
449.969 110.647 449.985 110.83 449.999 111.01 cv
450.013 111.191 450.024 111.375 450.033 111.557 cv
450.043 111.739 450.05 111.924 450.054 112.107 cv
450.059 112.29 450.061 112.476 450.061 112.66 cv
450.061 112.844 450.059 113.03 450.054 113.213 cv
450.05 113.396 450.043 113.581 450.033 113.763 cv
450.024 113.945 450.013 114.129 449.999 114.31 cv
449.985 114.49 449.969 114.673 449.951 114.852 cv
449.932 115.031 449.912 115.213 449.889 115.391 cv
449.866 115.569 449.841 115.749 449.814 115.926 cv
449.787 116.102 449.758 116.281 449.726 116.456 cv
449.695 116.631 449.661 116.808 449.626 116.982 cv
449.59 117.156 449.552 117.331 449.512 117.504 cv
449.473 117.676 449.43 117.849 449.386 118.02 cv
449.342 118.191 449.296 118.363 449.248 118.532 cv
449.2 118.7 449.149 118.871 449.097 119.038 cv
449.045 119.205 448.991 119.374 448.935 119.54 cv
448.879 119.705 448.82 119.871 448.76 120.035 cv
448.7 120.199 448.638 120.363 448.574 120.525 cv
448.51 120.687 448.444 120.85 448.376 121.009 cv
448.309 121.169 448.238 121.33 448.167 121.488 cv
448.096 121.645 448.021 121.804 447.946 121.96 cv
447.872 122.115 447.794 122.272 447.715 122.426 cv
447.637 122.579 447.555 122.733 447.473 122.885 cv
447.391 123.036 447.306 123.188 447.22 123.337 cv
447.134 123.486 447.046 123.636 446.957 123.783 cv
446.868 123.93 446.775 124.077 446.683 124.222 cv
446.59 124.366 446.495 124.511 446.399 124.653 cv
446.303 124.795 446.204 124.938 446.105 125.077 cv
446.006 125.217 445.904 125.357 445.801 125.494 cv
445.699 125.631 445.593 125.769 445.488 125.903 cv
445.382 126.038 445.273 126.173 445.165 126.304 cv
445.056 126.436 444.944 126.568 444.832 126.698 cv
444.72 126.827 444.606 126.956 444.491 127.083 cv
444.376 127.209 444.258 127.336 444.14 127.459 cv
444.022 127.583 443.902 127.707 443.781 127.827 cv
443.66 127.948 443.536 128.069 443.413 128.187 cv
443.289 128.305 443.163 128.423 443.036 128.538 cv
442.91 128.652 442.78 128.767 442.651 128.879 cv
442.522 128.991 442.39 129.103 442.258 129.212 cv
442.127 129.32 441.992 129.429 441.857 129.535 cv
441.723 129.64 441.585 129.746 441.448 129.848 cv
441.311 129.951 441.171 130.053 441.032 130.152 cv
440.892 130.251 440.75 130.35 440.608 130.446 cv
440.466 130.542 440.321 130.638 440.176 130.73 cv
440.032 130.823 439.884 130.915 439.738 131.004 cv
439.591 131.093 439.441 131.182 439.292 131.268 cv
439.143 131.353 438.991 131.439 438.84 131.521 cv
438.688 131.603 438.534 131.685 438.381 131.763 cv
438.227 131.842 438.07 131.92 437.915 131.994 cv
437.759 132.069 437.601 132.144 437.443 132.215 cv
437.285 132.286 437.124 132.357 436.965 132.424 cv
436.805 132.492 436.642 132.558 436.481 132.622 cv
436.319 132.686 436.154 132.748 435.991 132.808 cv
435.827 132.868 435.661 132.927 435.496 132.983 cv
435.33 133.039 435.161 133.094 434.995 133.146 cv
434.827 133.198 434.657 133.248 434.488 133.296 cv
434.319 133.344 434.147 133.391 433.977 133.435 cv
433.806 133.479 433.632 133.521 433.46 133.561 cv
433.288 133.601 433.112 133.639 432.939 133.674 cv
432.765 133.71 432.588 133.744 432.413 133.775 cv
432.238 133.806 432.059 133.836 431.883 133.863 cv
431.706 133.89 431.526 133.915 431.349 133.938 cv
431.17 133.96 430.989 133.981 430.81 133.999 cv
430.63 134.018 430.448 134.034 430.267 134.048 cv
430.086 134.061 429.903 134.073 429.721 134.082 cv
429.539 134.091 429.354 134.098 429.171 134.103 cv
428.988 134.108 428.802 134.11 428.618 134.11 cv
428.434 134.11 428.248 134.108 428.065 134.103 cv
427.882 134.098 427.697 134.091 427.515 134.082 cv
427.334 134.073 427.15 134.061 426.969 134.048 cv
426.789 134.034 426.606 134.018 426.426 133.999 cv
426.247 133.981 426.066 133.96 425.888 133.938 cv
425.71 133.915 425.53 133.89 425.353 133.863 cv
425.177 133.836 424.999 133.806 424.823 133.775 cv
424.648 133.744 424.471 133.71 424.297 133.674 cv
424.124 133.639 423.948 133.601 423.776 133.561 cv
423.604 133.521 423.43 133.479 423.26 133.435 cv
423.089 133.391 422.917 133.344 422.748 133.296 cv
422.58 133.248 422.409 133.198 422.242 133.146 cv
422.075 133.094 421.906 133.039 421.741 132.983 cv
421.576 132.927 421.409 132.868 421.245 132.808 cv
421.082 132.748 420.917 132.686 420.755 132.622 cv
420.594 132.558 420.431 132.492 420.271 132.424 cv
420.112 132.357 419.951 132.286 419.793 132.215 cv
419.636 132.144 419.477 132.069 419.321 131.994 cv
419.166 131.92 419.009 131.842 418.856 131.763 cv
418.702 131.685 418.548 131.603 418.397 131.521 cv
418.246 131.439 418.093 131.353 417.944 131.268 cv
417.795 131.182 417.645 131.093 417.499 131.004 cv
417.352 130.915 417.204 130.823 417.06 130.73 cv
416.916 130.638 416.771 130.542 416.629 130.446 cv
416.487 130.35 416.344 130.251 416.205 130.152 cv
416.065 130.053 415.925 129.951 415.788 129.848 cv
415.651 129.746 415.513 129.64 415.379 129.535 cv
415.245 129.429 415.11 129.32 414.978 129.212 cv
414.846 129.103 414.714 128.991 414.585 128.879 cv
414.456 128.767 414.326 128.652 414.2 128.538 cv
414.074 128.423 413.947 128.305 413.824 128.187 cv
413.7 128.069 413.576 127.948 413.455 127.827 cv
413.335 127.707 413.214 127.583 413.096 127.459 cv
412.978 127.336 412.86 127.209 412.746 127.083 cv
412.631 126.956 412.516 126.827 412.404 126.698 cv
412.292 126.568 412.18 126.436 412.072 126.304 cv
411.963 126.173 411.854 126.038 411.749 125.903 cv
411.643 125.769 411.538 125.631 411.435 125.494 cv
411.333 125.357 411.231 125.217 411.131 125.077 cv
411.032 124.938 410.933 124.795 410.837 124.653 cv
410.742 124.511 410.646 124.366 410.554 124.222 cv
410.461 124.077 410.369 123.93 410.28 123.783 cv
410.191 123.636 410.102 123.486 410.016 123.337 cv
409.931 123.188 409.845 123.036 409.763 122.885 cv
409.681 122.733 409.6 122.579 409.521 122.425 cv
409.443 122.272 409.365 122.115 409.29 121.96 cv
409.215 121.804 409.141 121.645 409.069 121.488 cv
408.998 121.33 408.928 121.169 408.86 121.009 cv
408.793 120.85 408.726 120.687 408.663 120.525 cv
408.599 120.363 408.536 120.199 408.476 120.035 cv
408.416 119.871 408.358 119.705 408.302 119.54 cv
408.246 119.374 408.191 119.205 408.139 119.038 cv
408.087 118.871 408.036 118.7 407.989 118.532 cv
407.941 118.363 407.894 118.191 407.85 118.02 cv
407.806 117.849 407.764 117.676 407.724 117.504 cv
407.684 117.331 407.646 117.156 407.611 116.982 cv
407.575 116.808 407.541 116.631 407.51 116.456 cv
407.479 116.281 407.449 116.102 407.422 115.926 cv
407.395 115.749 407.37 115.569 407.347 115.391 cv
407.325 115.213 407.304 115.031 407.286 114.852 cv
407.267 114.673 407.251 114.49 407.238 114.31 cv
407.224 114.129 407.212 113.945 407.203 113.763 cv
407.194 113.581 407.187 113.396 407.182 113.213 cv
407.177 113.03 407.175 112.844 407.175 112.66 cv
406.975 112.66 li
406.775 112.66 li
406.775 112.847 406.777 113.037 406.782 113.223 cv
406.787 113.41 406.794 113.598 406.803 113.784 cv
406.813 113.969 406.825 114.156 406.839 114.34 cv
406.853 114.524 406.869 114.71 406.888 114.893 cv
406.906 115.075 406.927 115.26 406.95 115.442 cv
406.973 115.623 406.999 115.806 407.027 115.986 cv
407.054 116.166 407.084 116.348 407.116 116.527 cv
407.148 116.705 407.182 116.885 407.219 117.062 cv
407.255 117.239 407.294 117.418 407.334 117.594 cv
407.375 117.769 407.418 117.946 407.463 118.12 cv
407.507 118.293 407.555 118.469 407.604 118.641 cv
407.653 118.813 407.704 118.986 407.757 119.157 cv
407.81 119.327 407.866 119.499 407.923 119.668 cv
407.98 119.836 408.04 120.006 408.101 120.173 cv
408.162 120.339 408.225 120.507 408.29 120.672 cv
408.355 120.836 408.423 121.002 408.492 121.165 cv
408.561 121.328 408.632 121.492 408.705 121.652 cv
408.778 121.813 408.853 121.975 408.929 122.133 cv
409.006 122.292 409.085 122.451 409.165 122.608 cv
409.245 122.764 409.328 122.921 409.412 123.076 cv
409.495 123.23 409.582 123.385 409.67 123.537 cv
409.757 123.688 409.847 123.841 409.938 123.991 cv
410.029 124.14 410.122 124.29 410.217 124.438 cv
410.311 124.585 410.408 124.732 410.506 124.877 cv
410.604 125.022 410.704 125.167 410.805 125.309 cv
410.906 125.451 411.01 125.594 411.115 125.734 cv
411.219 125.873 411.327 126.013 411.434 126.15 cv
411.542 126.287 411.652 126.425 411.763 126.559 cv
411.874 126.693 411.988 126.828 412.102 126.959 cv
412.216 127.091 412.333 127.223 412.45 127.352 cv
412.567 127.48 412.687 127.609 412.807 127.735 cv
412.927 127.861 413.05 127.987 413.173 128.11 cv
413.296 128.233 413.422 128.356 413.547 128.476 cv
413.673 128.596 413.802 128.716 413.931 128.833 cv
414.06 128.95 414.192 129.068 414.323 129.181 cv
414.455 129.295 414.589 129.409 414.723 129.52 cv
414.858 129.631 414.995 129.742 415.132 129.849 cv
415.269 129.957 415.409 130.064 415.548 130.169 cv
415.688 130.273 415.831 130.377 415.973 130.478 cv
416.115 130.579 416.26 130.68 416.405 130.778 cv
416.549 130.876 416.697 130.973 416.844 131.067 cv
416.991 131.161 417.141 131.255 417.291 131.346 cv
417.44 131.437 417.593 131.527 417.745 131.614 cv
417.897 131.702 418.052 131.789 418.206 131.872 cv
418.36 131.956 418.517 132.039 418.673 132.119 cv
418.83 132.199 418.989 132.278 419.148 132.355 cv
419.306 132.431 419.468 132.507 419.628 132.579 cv
419.789 132.652 419.953 132.724 420.115 132.793 cv
420.278 132.861 420.444 132.929 420.609 132.994 cv
420.773 133.059 420.941 133.123 421.108 133.184 cv
421.274 133.245 421.444 133.305 421.613 133.362 cv
421.781 133.419 421.953 133.475 422.123 133.527 cv
422.293 133.581 422.467 133.632 422.639 133.681 cv
422.811 133.73 422.986 133.777 423.16 133.822 cv
423.334 133.867 423.511 133.91 423.686 133.95 cv
423.862 133.991 424.04 134.03 424.217 134.066 cv
424.394 134.102 424.574 134.137 424.753 134.169 cv
424.932 134.201 425.113 134.231 425.293 134.258 cv
425.473 134.286 425.656 134.311 425.837 134.334 cv
426.019 134.358 426.204 134.379 426.386 134.397 cv
426.569 134.416 426.755 134.432 426.939 134.446 cv
427.123 134.46 427.31 134.472 427.495 134.482 cv
427.68 134.491 427.869 134.498 428.055 134.503 cv
428.242 134.508 428.431 134.51 428.618 134.51 cv
428.805 134.51 428.995 134.508 429.181 134.503 cv
429.368 134.498 429.556 134.491 429.741 134.482 cv
429.926 134.472 430.113 134.46 430.298 134.446 cv
430.481 134.432 430.667 134.416 430.85 134.397 cv
431.033 134.379 431.217 134.358 431.399 134.334 cv
431.58 134.311 431.763 134.286 431.943 134.258 cv
432.123 134.231 432.305 134.201 432.484 134.169 cv
432.662 134.137 432.842 134.102 433.019 134.066 cv
433.196 134.03 433.375 133.991 433.55 133.95 cv
433.725 133.91 433.902 133.867 434.076 133.822 cv
434.25 133.777 434.425 133.73 434.597 133.681 cv
434.769 133.632 434.943 133.581 435.113 133.527 cv
435.283 133.475 435.455 133.419 435.624 133.362 cv
435.792 133.305 435.962 133.245 436.129 133.184 cv
436.295 133.123 436.463 133.059 436.628 132.994 cv
436.792 132.929 436.958 132.861 437.121 132.793 cv
437.283 132.724 437.447 132.652 437.608 132.579 cv
437.768 132.507 437.93 132.431 438.089 132.355 cv
438.247 132.278 438.407 132.199 438.563 132.119 cv
438.719 132.039 438.876 131.956 439.031 131.872 cv
439.185 131.789 439.34 131.702 439.492 131.614 cv
439.643 131.527 439.796 131.437 439.946 131.346 cv
440.095 131.255 440.245 131.161 440.392 131.067 cv
440.539 130.973 440.687 130.876 440.832 130.778 cv
440.976 130.68 441.121 130.579 441.264 130.478 cv
441.406 130.377 441.548 130.273 441.688 130.169 cv
441.827 130.064 441.968 129.957 442.104 129.849 cv
442.241 129.742 442.379 129.631 442.513 129.52 cv
442.647 129.409 442.782 129.295 442.913 129.181 cv
443.045 129.068 443.177 128.95 443.305 128.833 cv
443.434 128.716 443.563 128.596 443.689 128.476 cv
443.815 128.356 443.941 128.233 444.064 128.11 cv
444.187 127.987 444.31 127.861 444.43 127.735 cv
444.55 127.609 444.67 127.48 444.787 127.352 cv
444.904 127.223 445.021 127.091 445.135 126.959 cv
445.249 126.828 445.362 126.693 445.473 126.559 cv
445.584 126.425 445.695 126.287 445.802 126.15 cv
445.91 126.013 446.017 125.873 446.121 125.734 cv
446.226 125.594 446.33 125.451 446.431 125.309 cv
446.532 125.167 446.633 125.022 446.73 124.877 cv
446.828 124.732 446.925 124.585 447.02 124.438 cv
447.114 124.29 447.208 124.14 447.298 123.991 cv
447.389 123.841 447.48 123.688 447.567 123.537 cv
447.654 123.385 447.741 123.23 447.824 123.076 cv
447.908 122.921 447.991 122.764 448.071 122.608 cv
448.151 122.451 448.231 122.292 448.307 122.133 cv
448.383 121.975 448.459 121.813 448.531 121.652 cv
448.604 121.492 448.676 121.328 448.744 121.165 cv
448.813 121.002 448.881 120.836 448.946 120.672 cv
449.011 120.507 449.075 120.339 449.136 120.173 cv
449.197 120.006 449.256 119.836 449.313 119.668 cv
449.37 119.499 449.426 119.327 449.479 119.157 cv
449.532 118.986 449.584 118.813 449.633 118.641 cv
449.682 118.469 449.729 118.293 449.774 118.12 cv
449.818 117.946 449.862 117.769 449.902 117.594 cv
449.943 117.418 449.981 117.239 450.018 117.062 cv
450.054 116.885 450.088 116.705 450.12 116.527 cv
450.152 116.348 450.182 116.166 450.21 115.986 cv
450.237 115.806 450.263 115.623 450.286 115.442 cv
450.309 115.26 450.33 115.075 450.349 114.893 cv
450.367 114.71 450.384 114.524 450.398 114.34 cv
450.412 114.156 450.424 113.969 450.433 113.784 cv
450.442 113.598 450.449 113.41 450.454 113.223 cv
450.459 113.037 450.461 112.847 450.461 112.66 cv
450.461 112.473 450.459 112.283 450.454 112.097 cv
450.449 111.91 450.442 111.722 450.433 111.536 cv
450.424 111.352 450.412 111.164 450.398 110.98 cv
450.384 110.796 450.367 110.61 450.349 110.427 cv
450.33 110.245 450.309 110.06 450.286 109.878 cv
450.263 109.697 450.237 109.514 450.21 109.334 cv
450.182 109.154 450.152 108.972 450.12 108.793 cv
450.088 108.615 450.054 108.435 450.018 108.258 cv
449.981 108.081 449.943 107.902 449.902 107.726 cv
449.862 107.551 449.818 107.374 449.774 107.2 cv
449.729 107.027 449.682 106.851 449.633 106.679 cv
449.584 106.507 449.532 106.334 449.479 106.163 cv
449.426 105.993 449.37 105.821 449.313 105.652 cv
449.256 105.484 449.197 105.314 449.136 105.147 cv
449.075 104.981 449.011 104.813 448.946 104.648 cv
448.881 104.484 448.813 104.318 448.744 104.155 cv
448.676 103.992 448.604 103.828 448.531 103.668 cv
448.459 103.507 448.383 103.345 448.307 103.187 cv
448.231 103.028 448.151 102.869 448.071 102.712 cv
447.991 102.556 447.908 102.399 447.824 102.244 cv
447.741 102.09 447.654 101.935 447.567 101.783 cv
447.48 101.632 447.389 101.479 447.298 101.329 cv
447.208 101.18 447.114 101.03 447.02 100.882 cv
446.925 100.736 446.828 100.588 446.73 100.443 cv
446.633 100.298 446.532 100.153 446.431 100.011 cv
446.33 99.8688 446.226 99.7258 446.121 99.5858 cv
446.017 99.4468 445.91 99.3068 445.802 99.1698 cv
445.695 99.0328 445.584 98.8948 445.473 98.7608 cv
445.362 98.6268 445.249 98.4918 445.135 98.3608 cv
445.021 98.2288 444.904 98.0968 444.787 97.9678 cv
444.67 97.8398 444.55 97.7108 444.43 97.5848 cv
444.31 97.4588 444.187 97.3328 444.064 97.2098 cv
443.941 97.0868 443.815 96.9638 443.689 96.8438 cv
443.563 96.7238 443.434 96.6038 443.305 96.4868 cv
443.177 96.3698 443.045 96.2528 442.913 96.1388 cv
442.782 96.0248 442.647 95.9108 442.513 95.7998 cv
442.379 95.6888 442.241 95.5778 442.104 95.4708 cv
441.968 95.3628 441.827 95.2558 441.688 95.1508 cv
441.548 95.0468 441.406 94.9428 441.264 94.8418 cv
441.121 94.7408 440.976 94.6398 440.832 94.5418 cv
440.687 94.4448 440.539 94.3468 440.392 94.2528 cv
440.245 94.1588 440.095 94.0648 439.946 93.9738 cv
439.796 93.8828 439.643 93.7928 439.492 93.7058 cv
439.34 93.6178 439.185 93.5318 439.031 93.4478 cv
438.876 93.3638 438.719 93.2808 438.563 93.2008 cv
438.407 93.1208 438.247 93.0418 438.089 92.9648 cv
437.93 92.8888 437.768 92.8128 437.608 92.7408 cv
437.447 92.6678 437.283 92.5958 437.121 92.5278 cv
436.958 92.4588 436.792 92.3908 436.628 92.3258 cv
436.463 92.2608 436.295 92.1968 436.129 92.1358 cv
435.962 92.0748 435.792 92.0148 435.624 91.9578 cv
435.455 91.9008 435.283 91.8448 435.113 91.7928 cv
434.943 91.7388 434.769 91.6878 434.597 91.6388 cv
434.425 91.5898 434.25 91.5428 434.076 91.4978 cv
433.902 91.4528 433.725 91.4098 433.55 91.3698 cv
433.375 91.3288 433.196 91.2898 433.019 91.2538 cv
432.842 91.2178 432.662 91.1828 432.484 91.1508 cv
432.305 91.1188 432.123 91.0888 431.943 91.0618 cv
431.763 91.0338 431.58 91.0089 431.399 90.9858 cv
431.217 90.9618 431.033 90.9408 430.85 90.9228 cv
430.667 90.9038 430.481 90.8878 430.298 90.8738 cv
430.113 90.8598 429.926 90.8478 429.741 90.8378 cv
429.556 90.8288 429.368 90.8218 429.181 90.8168 cv
428.995 90.8118 428.805 90.8098 428.618 90.8098 cv
428.431 90.8098 428.242 90.8118 428.055 90.8168 cv
427.869 90.8218 427.68 90.8288 427.495 90.8378 cv
427.31 90.8478 427.123 90.8598 426.939 90.8738 cv
426.755 90.8878 426.569 90.9038 426.386 90.9228 cv
426.204 90.9408 426.019 90.9618 425.837 90.9858 cv
425.656 91.0089 425.473 91.0338 425.293 91.0618 cv
425.113 91.0888 424.932 91.1188 424.753 91.1508 cv
424.574 91.1828 424.394 91.2178 424.217 91.2538 cv
424.04 91.2898 423.862 91.3288 423.686 91.3698 cv
423.511 91.4098 423.334 91.4528 423.16 91.4978 cv
422.986 91.5428 422.811 91.5898 422.639 91.6388 cv
422.467 91.6878 422.293 91.7388 422.123 91.7928 cv
421.953 91.8448 421.781 91.9008 421.613 91.9578 cv
421.444 92.0148 421.274 92.0748 421.108 92.1358 cv
420.941 92.1968 420.773 92.2608 420.609 92.3258 cv
420.444 92.3908 420.278 92.4588 420.115 92.5278 cv
419.953 92.5958 419.789 92.6678 419.628 92.7408 cv
419.468 92.8128 419.306 92.8888 419.148 92.9648 cv
418.989 93.0418 418.83 93.1208 418.673 93.2008 cv
418.517 93.2808 418.36 93.3638 418.206 93.4478 cv
418.052 93.5318 417.897 93.6178 417.745 93.7058 cv
417.593 93.7928 417.44 93.8828 417.291 93.9738 cv
417.141 94.0648 416.991 94.1588 416.844 94.2528 cv
416.697 94.3468 416.549 94.4448 416.405 94.5418 cv
416.26 94.6398 416.115 94.7408 415.973 94.8418 cv
415.831 94.9428 415.688 95.0468 415.548 95.1508 cv
415.409 95.2558 415.269 95.3628 415.132 95.4708 cv
414.995 95.5778 414.858 95.6888 414.723 95.7998 cv
414.589 95.9108 414.455 96.0248 414.323 96.1388 cv
414.192 96.2528 414.06 96.3698 413.931 96.4868 cv
413.802 96.6038 413.673 96.7238 413.547 96.8438 cv
413.422 96.9638 413.296 97.0868 413.173 97.2098 cv
413.05 97.3328 412.927 97.4588 412.807 97.5848 cv
412.687 97.7108 412.567 97.8398 412.45 97.9678 cv
412.333 98.0968 412.216 98.2288 412.102 98.3608 cv
411.988 98.4918 411.874 98.6268 411.763 98.7608 cv
411.652 98.8948 411.542 99.0328 411.434 99.1698 cv
411.327 99.3068 411.219 99.4468 411.115 99.5858 cv
411.01 99.7258 410.906 99.8688 410.805 100.011 cv
410.704 100.153 410.604 100.298 410.506 100.443 cv
410.408 100.588 410.311 100.736 410.217 100.882 cv
410.122 101.03 410.029 101.18 409.938 101.329 cv
409.847 101.479 409.757 101.632 409.67 101.783 cv
409.582 101.935 409.495 102.09 409.412 102.244 cv
409.328 102.399 409.245 102.556 409.165 102.712 cv
409.085 102.869 409.006 103.028 408.929 103.187 cv
408.853 103.345 408.778 103.507 408.705 103.668 cv
408.632 103.828 408.561 103.992 408.492 104.155 cv
408.423 104.318 408.355 104.484 408.29 104.648 cv
408.225 104.813 408.162 104.981 408.101 105.147 cv
408.04 105.314 407.98 105.484 407.923 105.652 cv
407.866 105.821 407.81 105.993 407.757 106.163 cv
407.704 106.334 407.653 106.507 407.604 106.679 cv
407.555 106.851 407.507 107.027 407.463 107.2 cv
407.418 107.374 407.375 107.551 407.334 107.726 cv
407.294 107.902 407.255 108.081 407.219 108.258 cv
407.182 108.435 407.148 108.615 407.116 108.793 cv
407.084 108.972 407.054 109.154 407.027 109.334 cv
406.999 109.514 406.973 109.697 406.95 109.878 cv
406.927 110.06 406.906 110.245 406.888 110.427 cv
406.869 110.61 406.853 110.796 406.839 110.98 cv
406.825 111.164 406.813 111.352 406.803 111.536 cv
406.794 111.722 406.787 111.91 406.782 112.097 cv
406.777 112.283 406.775 112.473 406.775 112.66 cv
cp
.21602 .207454 .209307 rgb
f
418.105 112.643 mo
418.105 106.844 422.804 102.143 428.602 102.143 cv
434.399 102.143 439.098 106.844 439.098 112.643 cv
439.098 118.442 434.399 123.143 428.602 123.143 cv
422.804 123.143 418.105 118.442 418.105 112.643 cv
.783545 .790168 .797695 rgb
ef
418.505 112.643 mo
419.105 112.643 li
419.108 112.397 li
419.117 112.153 li
419.133 111.911 li
419.154 111.67 li
419.181 111.432 li
419.214 111.195 li
419.253 110.96 li
419.298 110.727 li
419.348 110.497 li
419.404 110.268 li
419.465 110.042 li
419.532 109.818 li
419.532 109.817 li
419.604 109.596 li
419.681 109.376 li
419.763 109.16 li
419.851 108.945 li
419.943 108.734 li
420.041 108.525 li
420.143 108.319 li
420.251 108.115 li
420.363 107.915 li
420.479 107.718 li
420.601 107.523 li
420.726 107.332 li
420.857 107.144 li
420.991 106.959 li
421.13 106.778 li
421.273 106.6 li
421.421 106.426 li
421.572 106.255 li
421.727 106.089 li
421.887 105.925 li
422.05 105.766 li
422.217 105.611 li
422.387 105.459 li
422.561 105.312 li
422.739 105.169 li
422.92 105.03 li
423.105 104.895 li
423.293 104.765 li
423.484 104.639 li
423.678 104.518 li
423.875 104.401 li
424.076 104.289 li
424.279 104.182 li
424.485 104.079 li
424.694 103.982 li
424.905 103.889 li
425.12 103.802 li
425.336 103.719 li
425.556 103.642 li
425.777 103.57 li
426.001 103.503 li
426.228 103.442 li
426.456 103.386 li
426.687 103.336 li
426.919 103.291 li
427.154 103.252 li
427.391 103.219 li
427.629 103.192 li
427.87 103.171 li
428.112 103.155 li
428.356 103.146 li
428.602 103.143 li
428.847 103.146 li
429.091 103.155 li
429.333 103.171 li
429.574 103.192 li
429.812 103.219 li
430.049 103.252 li
430.284 103.291 li
430.516 103.336 li
430.747 103.386 li
430.976 103.442 li
431.202 103.503 li
431.426 103.57 li
431.647 103.642 li
431.867 103.719 li
432.083 103.802 li
432.298 103.889 li
432.509 103.982 li
432.718 104.079 li
432.924 104.182 li
433.127 104.289 li
433.328 104.401 li
433.525 104.518 li
433.719 104.639 li
433.91 104.765 li
434.098 104.895 li
434.283 105.03 li
434.464 105.169 li
434.642 105.312 li
434.816 105.459 li
434.986 105.611 li
435.153 105.766 li
435.316 105.925 li
435.476 106.089 li
435.631 106.255 li
435.782 106.426 li
435.93 106.6 li
436.073 106.778 li
436.212 106.959 li
436.346 107.144 li
436.477 107.332 li
436.603 107.523 li
436.724 107.718 li
436.84 107.915 li
436.952 108.115 li
437.06 108.319 li
437.162 108.525 li
437.26 108.734 li
437.352 108.945 li
437.44 109.16 li
437.522 109.376 li
437.599 109.596 li
437.671 109.817 li
437.671 109.818 li
437.738 110.042 li
437.799 110.268 li
437.855 110.497 li
437.905 110.727 li
437.95 110.96 li
437.989 111.195 li
438.022 111.432 li
438.049 111.67 li
438.07 111.911 li
438.086 112.153 li
438.095 112.397 li
438.098 112.643 li
438.095 112.889 li
438.086 113.133 li
438.07 113.375 li
438.049 113.616 li
438.022 113.854 li
437.989 114.091 li
437.95 114.326 li
437.905 114.559 li
437.855 114.789 li
437.799 115.018 li
437.738 115.244 li
437.671 115.468 li
437.671 115.469 li
437.599 115.69 li
437.522 115.91 li
437.44 116.126 li
437.352 116.341 li
437.26 116.552 li
437.162 116.761 li
437.06 116.967 li
436.952 117.171 li
436.84 117.371 li
436.724 117.568 li
436.603 117.763 li
436.477 117.954 li
436.346 118.142 li
436.212 118.327 li
436.073 118.508 li
435.93 118.686 li
435.782 118.86 li
435.631 119.031 li
435.476 119.197 li
435.316 119.361 li
435.153 119.52 li
434.986 119.675 li
434.816 119.827 li
434.642 119.974 li
434.464 120.117 li
434.283 120.256 li
434.098 120.391 li
433.91 120.521 li
433.719 120.647 li
433.525 120.768 li
433.328 120.885 li
433.127 120.997 li
432.924 121.104 li
432.718 121.207 li
432.509 121.304 li
432.298 121.397 li
432.083 121.484 li
431.867 121.567 li
431.647 121.644 li
431.426 121.716 li
431.202 121.783 li
430.976 121.844 li
430.747 121.9 li
430.516 121.95 li
430.284 121.995 li
430.049 122.034 li
429.812 122.067 li
429.574 122.094 li
429.333 122.115 li
429.091 122.131 li
428.847 122.14 li
428.602 122.143 li
428.356 122.14 li
428.112 122.131 li
427.87 122.115 li
427.629 122.094 li
427.391 122.067 li
427.154 122.034 li
426.919 121.995 li
426.687 121.95 li
426.456 121.9 li
426.228 121.844 li
426.001 121.783 li
425.777 121.716 li
425.556 121.644 li
425.336 121.567 li
425.12 121.484 li
424.905 121.397 li
424.694 121.304 li
424.485 121.207 li
424.279 121.104 li
424.076 120.997 li
423.875 120.885 li
423.678 120.768 li
423.484 120.647 li
423.293 120.521 li
423.105 120.391 li
422.92 120.256 li
422.739 120.117 li
422.561 119.974 li
422.387 119.827 li
422.217 119.675 li
422.05 119.52 li
421.887 119.361 li
421.727 119.197 li
421.572 119.031 li
421.421 118.86 li
421.273 118.686 li
421.13 118.508 li
420.991 118.327 li
420.857 118.142 li
420.726 117.954 li
420.601 117.763 li
420.479 117.568 li
420.363 117.371 li
420.251 117.171 li
420.143 116.967 li
420.041 116.761 li
419.943 116.552 li
419.851 116.341 li
419.763 116.126 li
419.681 115.91 li
419.604 115.69 li
419.532 115.469 li
419.532 115.468 li
419.465 115.244 li
419.404 115.018 li
419.348 114.789 li
419.298 114.559 li
419.253 114.326 li
419.214 114.091 li
419.181 113.854 li
419.154 113.616 li
419.133 113.375 li
419.117 113.133 li
419.108 112.889 li
419.105 112.643 li
418.505 112.643 li
417.905 112.643 li
417.905 112.735 417.906 112.827 417.909 112.919 cv
417.911 113.01 417.914 113.102 417.919 113.193 cv
417.924 113.284 417.929 113.376 417.936 113.466 cv
417.943 113.556 417.951 113.647 417.96 113.737 cv
417.969 113.826 417.98 113.916 417.991 114.006 cv
417.991 114.005 li
418.028 114.272 li
418.072 114.537 li
418.122 114.799 li
418.179 115.059 li
418.242 115.317 li
418.311 115.572 li
418.386 115.825 li
418.467 116.075 li
418.554 116.322 li
418.647 116.566 li
418.746 116.808 li
418.85 117.047 li
418.96 117.282 li
419.075 117.514 li
419.196 117.743 li
419.322 117.969 li
419.454 118.191 li
419.59 118.41 li
419.732 118.626 li
419.879 118.837 li
420.03 119.045 li
420.187 119.249 li
420.348 119.449 li
420.513 119.645 li
420.684 119.837 li
420.859 120.025 li
421.038 120.209 li
421.222 120.388 li
421.409 120.563 li
421.601 120.734 li
421.797 120.9 li
421.998 121.061 li
421.997 121.061 li
422.201 121.217 li
422.409 121.369 li
422.621 121.515 li
422.836 121.657 li
423.055 121.794 li
423.277 121.925 li
423.503 122.051 li
423.732 122.172 li
423.964 122.288 li
424.199 122.398 li
424.438 122.502 li
424.679 122.601 li
424.924 122.694 li
425.171 122.781 li
425.421 122.862 li
425.673 122.937 li
425.928 123.006 li
426.186 123.069 li
426.446 123.126 li
426.708 123.176 li
426.973 123.22 li
427.239 123.257 li
427.508 123.288 li
427.598 123.297 427.689 123.305 427.779 123.312 cv
427.869 123.319 427.961 123.324 428.051 123.329 cv
428.142 123.334 428.234 123.337 428.326 123.34 cv
428.417 123.342 428.51 123.343 428.602 123.343 cv
428.693 123.343 428.786 123.342 428.878 123.34 cv
428.969 123.337 429.061 123.334 429.152 123.329 cv
429.242 123.324 429.334 123.319 429.424 123.312 cv
429.514 123.305 429.605 123.297 429.695 123.288 cv
429.964 123.257 li
430.23 123.22 li
430.495 123.176 li
430.757 123.126 li
431.017 123.069 li
431.275 123.006 li
431.53 122.937 li
431.782 122.862 li
432.032 122.781 li
432.279 122.694 li
432.524 122.601 li
432.765 122.502 li
433.004 122.398 li
433.239 122.288 li
433.471 122.172 li
433.7 122.051 li
433.926 121.925 li
434.148 121.794 li
434.367 121.657 li
434.582 121.515 li
434.794 121.369 li
435.002 121.217 li
435.206 121.061 li
435.406 120.9 li
435.602 120.734 li
435.794 120.563 li
435.982 120.388 li
436.165 120.209 li
436.344 120.025 li
436.519 119.837 li
436.69 119.645 li
436.855 119.449 li
437.017 119.249 li
437.173 119.045 li
437.325 118.837 li
437.471 118.626 li
437.613 118.41 li
437.749 118.191 li
437.881 117.969 li
438.007 117.743 li
438.128 117.514 li
438.243 117.282 li
438.353 117.047 li
438.457 116.808 li
438.556 116.566 li
438.649 116.322 li
438.736 116.075 li
438.817 115.825 li
438.892 115.572 li
438.961 115.317 li
439.024 115.059 li
439.081 114.799 li
439.131 114.537 li
439.175 114.272 li
439.212 114.005 li
439.212 114.006 li
439.223 113.916 439.234 113.826 439.243 113.737 cv
439.252 113.647 439.26 113.556 439.267 113.466 cv
439.274 113.376 439.28 113.284 439.284 113.193 cv
439.289 113.102 439.292 113.01 439.295 112.919 cv
439.297 112.827 439.298 112.735 439.298 112.643 cv
439.298 112.551 439.297 112.459 439.295 112.367 cv
439.292 112.276 439.289 112.184 439.284 112.093 cv
439.28 112.002 439.274 111.91 439.267 111.82 cv
439.26 111.73 439.252 111.639 439.243 111.549 cv
439.234 111.46 439.223 111.37 439.212 111.28 cv
439.212 111.281 li
439.175 111.014 li
439.131 110.749 li
439.081 110.487 li
439.024 110.227 li
438.961 109.969 li
438.892 109.714 li
438.817 109.461 li
438.736 109.211 li
438.649 108.964 li
438.556 108.72 li
438.457 108.478 li
438.353 108.239 li
438.243 108.004 li
438.128 107.772 li
438.007 107.543 li
437.881 107.317 li
437.749 107.095 li
437.613 106.876 li
437.471 106.66 li
437.325 106.449 li
437.173 106.241 li
437.017 106.037 li
436.855 105.837 li
436.69 105.641 li
436.519 105.449 li
436.344 105.261 li
436.165 105.077 li
435.982 104.898 li
435.794 104.723 li
435.602 104.552 li
435.406 104.386 li
435.206 104.225 li
435.002 104.069 li
434.794 103.917 li
434.582 103.771 li
434.367 103.629 li
434.148 103.492 li
433.926 103.361 li
433.7 103.235 li
433.471 103.114 li
433.239 102.998 li
433.004 102.888 li
432.765 102.784 li
432.524 102.685 li
432.279 102.592 li
432.032 102.505 li
431.782 102.424 li
431.53 102.349 li
431.275 102.28 li
431.017 102.217 li
430.757 102.16 li
430.495 102.11 li
430.23 102.066 li
429.964 102.029 li
429.695 101.998 li
429.605 101.989 429.514 101.981 429.424 101.974 cv
429.334 101.967 429.242 101.962 429.152 101.957 cv
429.061 101.952 428.969 101.949 428.878 101.946 cv
428.786 101.944 428.693 101.943 428.602 101.943 cv
428.51 101.943 428.417 101.944 428.326 101.946 cv
428.234 101.949 428.142 101.952 428.051 101.957 cv
427.961 101.962 427.869 101.967 427.779 101.974 cv
427.689 101.981 427.598 101.989 427.508 101.998 cv
427.239 102.029 li
426.973 102.066 li
426.708 102.11 li
426.446 102.16 li
426.186 102.217 li
425.928 102.28 li
425.673 102.349 li
425.421 102.424 li
425.171 102.505 li
424.924 102.592 li
424.679 102.685 li
424.438 102.784 li
424.199 102.888 li
423.964 102.998 li
423.732 103.114 li
423.503 103.235 li
423.277 103.361 li
423.055 103.492 li
422.836 103.629 li
422.621 103.771 li
422.409 103.917 li
422.202 104.069 li
421.997 104.225 li
421.998 104.225 li
421.797 104.386 li
421.601 104.552 li
421.409 104.723 li
421.222 104.898 li
421.038 105.077 li
420.859 105.261 li
420.684 105.449 li
420.513 105.641 li
420.348 105.837 li
420.186 106.037 li
420.03 106.241 li
419.879 106.449 li
419.732 106.66 li
419.59 106.876 li
419.454 107.095 li
419.322 107.317 li
419.196 107.543 li
419.075 107.772 li
418.96 108.004 li
418.85 108.239 li
418.746 108.478 li
418.647 108.72 li
418.554 108.964 li
418.467 109.211 li
418.386 109.461 li
418.311 109.714 li
418.242 109.969 li
418.179 110.227 li
418.122 110.487 li
418.072 110.749 li
418.028 111.014 li
417.991 111.281 li
417.991 111.28 li
417.98 111.37 417.969 111.46 417.96 111.549 cv
417.951 111.639 417.943 111.73 417.936 111.82 cv
417.929 111.91 417.924 112.002 417.919 112.093 cv
417.914 112.184 417.911 112.276 417.909 112.367 cv
417.906 112.459 417.905 112.551 417.905 112.643 cv
cp
417.305 112.643 mo
417.505 112.643 li
417.505 112.548 417.506 112.452 417.509 112.357 cv
417.511 112.262 417.515 112.167 417.519 112.072 cv
417.524 111.978 417.53 111.883 417.537 111.79 cv
417.544 111.696 417.553 111.602 417.562 111.509 cv
417.572 111.416 417.582 111.322 417.594 111.23 cv
417.606 111.138 417.619 111.045 417.633 110.953 cv
417.647 110.862 417.662 110.77 417.678 110.679 cv
417.694 110.588 417.712 110.497 417.73 110.407 cv
417.749 110.317 417.769 110.226 417.789 110.137 cv
417.854 109.869 li
417.926 109.605 li
418.004 109.342 li
418.088 109.083 li
418.178 108.827 li
418.275 108.573 li
418.377 108.322 li
418.485 108.075 li
418.6 107.83 li
418.719 107.589 li
418.845 107.352 li
418.975 107.118 li
419.112 106.887 li
419.253 106.66 li
419.4 106.437 li
419.553 106.217 li
419.71 106.001 li
419.872 105.79 li
420.039 105.582 li
420.211 105.379 li
420.388 105.18 li
420.569 104.985 li
420.755 104.794 li
420.945 104.608 li
421.14 104.427 li
421.339 104.25 li
421.543 104.078 li
421.75 103.911 li
421.962 103.749 li
422.177 103.591 li
422.397 103.439 li
422.62 103.292 li
422.847 103.15 li
423.078 103.014 li
423.312 102.883 li
423.549 102.758 li
423.79 102.638 li
424.035 102.524 li
424.282 102.416 li
424.533 102.313 li
424.786 102.217 li
425.043 102.126 li
425.302 102.042 li
425.564 101.964 li
425.829 101.893 li
426.096 101.827 li
426.185 101.807 426.276 101.787 426.366 101.768 cv
426.456 101.75 426.547 101.733 426.638 101.716 cv
426.729 101.7 426.821 101.685 426.912 101.671 cv
427.004 101.657 427.097 101.644 427.189 101.632 cv
427.281 101.62 427.375 101.61 427.468 101.6 cv
427.561 101.591 427.655 101.582 427.748 101.575 cv
427.842 101.568 427.937 101.562 428.031 101.557 cv
428.125 101.553 428.221 101.549 428.315 101.547 cv
428.41 101.544 428.507 101.543 428.602 101.543 cv
428.697 101.543 428.793 101.544 428.888 101.547 cv
428.982 101.549 429.078 101.553 429.172 101.557 cv
429.266 101.562 429.361 101.568 429.455 101.575 cv
429.548 101.582 429.642 101.591 429.735 101.6 cv
429.828 101.61 429.922 101.62 430.014 101.632 cv
430.106 101.644 430.199 101.657 430.291 101.671 cv
430.382 101.685 430.474 101.7 430.565 101.716 cv
430.656 101.733 430.747 101.75 430.837 101.768 cv
430.927 101.787 431.018 101.807 431.107 101.827 cv
431.374 101.893 li
431.639 101.964 li
431.901 102.042 li
432.16 102.126 li
432.417 102.217 li
432.67 102.313 li
432.921 102.416 li
433.168 102.524 li
433.413 102.638 li
433.654 102.758 li
433.891 102.883 li
434.125 103.014 li
434.356 103.15 li
434.583 103.292 li
434.806 103.439 li
435.026 103.591 li
435.241 103.749 li
435.453 103.911 li
435.66 104.078 li
435.864 104.25 li
436.063 104.427 li
436.258 104.608 li
436.448 104.794 li
436.634 104.985 li
436.815 105.18 li
436.992 105.379 li
437.164 105.582 li
437.331 105.79 li
437.493 106.001 li
437.651 106.217 li
437.803 106.437 li
437.95 106.66 li
438.091 106.887 li
438.228 107.118 li
438.358 107.352 li
438.484 107.589 li
438.604 107.83 li
438.718 108.075 li
438.826 108.322 li
438.928 108.573 li
439.025 108.827 li
439.115 109.083 li
439.199 109.342 li
439.277 109.605 li
439.349 109.869 li
439.414 110.137 li
439.435 110.226 439.454 110.317 439.473 110.407 cv
439.491 110.497 439.509 110.588 439.525 110.679 cv
439.541 110.77 439.556 110.862 439.57 110.953 cv
439.584 111.045 439.597 111.138 439.609 111.23 cv
439.621 111.322 439.631 111.416 439.641 111.509 cv
439.65 111.602 439.659 111.696 439.666 111.79 cv
439.673 111.883 439.679 111.978 439.684 112.072 cv
439.688 112.167 439.692 112.262 439.694 112.357 cv
439.697 112.452 439.698 112.548 439.698 112.643 cv
439.698 112.738 439.697 112.834 439.694 112.929 cv
439.692 113.024 439.688 113.119 439.684 113.214 cv
439.679 113.308 439.673 113.403 439.666 113.496 cv
439.659 113.59 439.65 113.684 439.641 113.777 cv
439.631 113.87 439.621 113.964 439.609 114.056 cv
439.597 114.148 439.584 114.241 439.57 114.333 cv
439.556 114.424 439.541 114.516 439.525 114.607 cv
439.509 114.698 439.491 114.789 439.473 114.879 cv
439.454 114.969 439.435 115.06 439.414 115.149 cv
439.349 115.417 li
439.277 115.681 li
439.199 115.944 li
439.115 116.203 li
439.025 116.459 li
438.928 116.713 li
438.826 116.964 li
438.718 117.211 li
438.604 117.456 li
438.484 117.697 li
438.358 117.934 li
438.228 118.168 li
438.091 118.399 li
437.95 118.626 li
437.803 118.849 li
437.651 119.069 li
437.493 119.285 li
437.331 119.496 li
437.164 119.704 li
436.992 119.907 li
436.815 120.106 li
436.634 120.301 li
436.448 120.492 li
436.258 120.678 li
436.063 120.859 li
435.864 121.036 li
435.66 121.208 li
435.453 121.375 li
435.241 121.537 li
435.026 121.695 li
434.806 121.847 li
434.583 121.994 li
434.356 122.136 li
434.125 122.272 li
433.891 122.403 li
433.654 122.528 li
433.413 122.648 li
433.168 122.762 li
432.921 122.87 li
432.67 122.973 li
432.417 123.069 li
432.16 123.16 li
431.901 123.244 li
431.639 123.322 li
431.374 123.393 li
431.107 123.459 li
431.018 123.479 430.927 123.499 430.837 123.518 cv
430.747 123.536 430.656 123.553 430.565 123.57 cv
430.474 123.586 430.382 123.601 430.291 123.615 cv
430.199 123.629 430.106 123.642 430.014 123.654 cv
429.922 123.666 429.828 123.676 429.735 123.686 cv
429.642 123.695 429.548 123.704 429.455 123.711 cv
429.361 123.718 429.266 123.724 429.172 123.729 cv
429.078 123.733 428.982 123.737 428.888 123.739 cv
428.793 123.742 428.697 123.743 428.602 123.743 cv
428.507 123.743 428.41 123.742 428.315 123.739 cv
428.221 123.737 428.125 123.733 428.031 123.729 cv
427.937 123.724 427.842 123.718 427.748 123.711 cv
427.655 123.704 427.561 123.695 427.468 123.686 cv
427.375 123.676 427.281 123.666 427.189 123.654 cv
427.097 123.642 427.004 123.629 426.912 123.615 cv
426.821 123.601 426.729 123.586 426.638 123.57 cv
426.547 123.553 426.456 123.536 426.366 123.518 cv
426.276 123.499 426.185 123.479 426.096 123.459 cv
425.829 123.393 li
425.564 123.322 li
425.302 123.244 li
425.043 123.16 li
424.786 123.069 li
424.533 122.973 li
424.282 122.87 li
424.035 122.762 li
423.79 122.648 li
423.549 122.528 li
423.312 122.403 li
423.078 122.272 li
422.847 122.136 li
422.62 121.994 li
422.397 121.847 li
422.177 121.695 li
421.962 121.537 li
421.75 121.375 li
421.543 121.208 li
421.339 121.036 li
421.14 120.859 li
420.945 120.678 li
420.755 120.492 li
420.569 120.301 li
420.388 120.106 li
420.211 119.907 li
420.039 119.704 li
419.872 119.496 li
419.71 119.285 li
419.553 119.069 li
419.4 118.849 li
419.253 118.626 li
419.112 118.399 li
418.975 118.168 li
418.845 117.934 li
418.719 117.697 li
418.6 117.456 li
418.485 117.211 li
418.377 116.964 li
418.275 116.713 li
418.178 116.459 li
418.088 116.203 li
418.004 115.944 li
417.926 115.681 li
417.854 115.417 li
417.789 115.149 li
417.769 115.06 417.749 114.969 417.73 114.879 cv
417.712 114.789 417.694 114.698 417.678 114.607 cv
417.662 114.516 417.647 114.424 417.633 114.333 cv
417.619 114.241 417.606 114.148 417.594 114.056 cv
417.582 113.964 417.572 113.87 417.562 113.777 cv
417.553 113.684 417.544 113.59 417.537 113.496 cv
417.53 113.403 417.524 113.308 417.519 113.214 cv
417.515 113.119 417.511 113.024 417.509 112.929 cv
417.506 112.834 417.505 112.738 417.505 112.643 cv
417.305 112.643 li
417.105 112.643 li
417.105 112.741 417.106 112.841 417.109 112.939 cv
417.111 113.037 417.115 113.136 417.12 113.234 cv
417.125 113.331 417.131 113.43 417.138 113.527 cv
417.146 113.623 417.155 113.721 417.164 113.818 cv
417.174 113.914 417.185 114.011 417.197 114.106 cv
417.209 114.202 417.223 114.298 417.237 114.393 cv
417.252 114.488 417.268 114.583 417.285 114.677 cv
417.301 114.771 417.319 114.866 417.339 114.96 cv
417.358 115.053 417.378 115.147 417.399 115.239 cv
417.421 115.331 417.443 115.425 417.467 115.516 cv
417.491 115.608 417.515 115.7 417.541 115.791 cv
417.567 115.881 417.594 115.972 417.622 116.062 cv
417.65 116.152 417.679 116.242 417.709 116.331 cv
417.803 116.597 li
417.903 116.86 li
418.009 117.12 li
418.121 117.376 li
418.239 117.629 li
418.363 117.879 li
418.493 118.125 li
418.629 118.368 li
418.77 118.607 li
418.917 118.842 li
419.069 119.073 li
419.227 119.301 li
419.389 119.524 li
419.557 119.743 li
419.731 119.958 li
419.909 120.169 li
420.092 120.375 li
420.28 120.577 li
420.472 120.775 li
420.669 120.967 li
420.871 121.155 li
421.077 121.338 li
421.288 121.516 li
421.503 121.69 li
421.722 121.858 li
421.946 122.021 li
422.173 122.178 li
422.404 122.331 li
422.639 122.477 li
422.878 122.619 li
423.121 122.754 li
423.367 122.884 li
423.617 123.008 li
423.87 123.127 li
424.126 123.239 li
424.386 123.345 li
424.649 123.445 li
424.914 123.539 li
425.183 123.626 li
425.273 123.654 425.364 123.681 425.455 123.707 cv
425.545 123.732 425.638 123.757 425.729 123.781 cv
425.821 123.804 425.914 123.827 426.006 123.849 cv
426.099 123.87 426.193 123.89 426.286 123.909 cv
426.379 123.928 426.474 123.947 426.568 123.963 cv
426.662 123.98 426.757 123.996 426.852 124.011 cv
426.947 124.025 427.043 124.039 427.139 124.051 cv
427.234 124.063 427.331 124.074 427.427 124.084 cv
427.524 124.093 427.621 124.102 427.718 124.109 cv
427.815 124.117 427.913 124.123 428.011 124.128 cv
428.108 124.133 428.207 124.137 428.305 124.139 cv
428.404 124.142 428.503 124.143 428.602 124.143 cv
428.7 124.143 428.8 124.142 428.898 124.139 cv
428.996 124.137 429.095 124.133 429.192 124.128 cv
429.29 124.123 429.388 124.117 429.485 124.109 cv
429.582 124.102 429.679 124.093 429.776 124.084 cv
429.872 124.074 429.969 124.063 430.065 124.051 cv
430.16 124.039 430.256 124.025 430.351 124.011 cv
430.446 123.996 430.541 123.98 430.636 123.963 cv
430.729 123.947 430.824 123.928 430.918 123.909 cv
431.011 123.89 431.105 123.87 431.197 123.849 cv
431.289 123.827 431.382 123.804 431.474 123.781 cv
431.565 123.757 431.658 123.732 431.748 123.707 cv
431.839 123.681 431.93 123.654 432.02 123.626 cv
432.289 123.539 li
432.555 123.445 li
432.817 123.345 li
433.077 123.239 li
433.333 123.127 li
433.586 123.008 li
433.836 122.884 li
434.082 122.754 li
434.325 122.619 li
434.564 122.477 li
434.799 122.331 li
435.03 122.178 li
435.258 122.021 li
435.481 121.858 li
435.7 121.69 li
435.915 121.516 li
436.126 121.338 li
436.332 121.155 li
436.534 120.967 li
436.731 120.775 li
436.924 120.577 li
437.111 120.375 li
437.294 120.169 li
437.473 119.958 li
437.646 119.743 li
437.814 119.524 li
437.977 119.301 li
438.134 119.073 li
438.286 118.842 li
438.433 118.607 li
438.574 118.368 li
438.71 118.125 li
438.84 117.879 li
438.964 117.629 li
439.082 117.376 li
439.194 117.12 li
439.3 116.86 li
439.4 116.597 li
439.494 116.331 li
439.524 116.242 439.553 116.152 439.581 116.062 cv
439.609 115.972 439.636 115.881 439.662 115.791 cv
439.688 115.7 439.713 115.608 439.736 115.516 cv
439.76 115.425 439.782 115.331 439.804 115.239 cv
439.825 115.147 439.845 115.053 439.865 114.96 cv
439.884 114.866 439.902 114.771 439.919 114.677 cv
439.935 114.583 439.951 114.488 439.966 114.393 cv
439.98 114.298 439.994 114.202 440.006 114.106 cv
440.018 114.011 440.029 113.914 440.039 113.818 cv
440.049 113.721 440.057 113.623 440.065 113.527 cv
440.072 113.43 440.078 113.331 440.083 113.234 cv
440.088 113.136 440.092 113.037 440.094 112.939 cv
440.097 112.841 440.098 112.741 440.098 112.643 cv
440.098 112.545 440.097 112.445 440.094 112.347 cv
440.092 112.249 440.088 112.15 440.083 112.052 cv
440.078 111.955 440.072 111.856 440.065 111.759 cv
440.057 111.663 440.049 111.565 440.039 111.468 cv
440.029 111.372 440.018 111.275 440.006 111.18 cv
439.994 111.084 439.98 110.988 439.966 110.893 cv
439.951 110.798 439.935 110.703 439.919 110.609 cv
439.902 110.515 439.884 110.42 439.865 110.326 cv
439.845 110.233 439.825 110.139 439.804 110.047 cv
439.782 109.955 439.76 109.861 439.736 109.77 cv
439.713 109.678 439.688 109.586 439.662 109.495 cv
439.636 109.405 439.609 109.314 439.581 109.224 cv
439.553 109.134 439.524 109.044 439.494 108.955 cv
439.4 108.689 li
439.3 108.426 li
439.194 108.166 li
439.082 107.91 li
438.964 107.657 li
438.84 107.407 li
438.71 107.161 li
438.574 106.918 li
438.433 106.679 li
438.286 106.444 li
438.134 106.213 li
437.977 105.985 li
437.814 105.762 li
437.646 105.543 li
437.473 105.328 li
437.294 105.117 li
437.111 104.911 li
436.924 104.709 li
436.731 104.511 li
436.534 104.319 li
436.332 104.131 li
436.126 103.948 li
435.915 103.77 li
435.7 103.596 li
435.481 103.428 li
435.258 103.265 li
435.03 103.108 li
434.799 102.955 li
434.564 102.809 li
434.325 102.667 li
434.082 102.532 li
433.836 102.402 li
433.586 102.278 li
433.333 102.159 li
433.077 102.047 li
432.817 101.941 li
432.555 101.841 li
432.289 101.747 li
432.02 101.66 li
431.93 101.632 431.839 101.605 431.748 101.579 cv
431.658 101.554 431.565 101.529 431.474 101.505 cv
431.382 101.482 431.289 101.459 431.197 101.437 cv
431.105 101.416 431.011 101.396 430.918 101.377 cv
430.824 101.358 430.729 101.339 430.636 101.323 cv
430.541 101.306 430.446 101.29 430.351 101.275 cv
430.256 101.261 430.16 101.247 430.065 101.235 cv
429.969 101.223 429.872 101.212 429.776 101.202 cv
429.679 101.193 429.582 101.184 429.485 101.177 cv
429.388 101.169 429.29 101.163 429.192 101.158 cv
429.095 101.153 428.996 101.149 428.898 101.147 cv
428.8 101.144 428.7 101.143 428.602 101.143 cv
428.503 101.143 428.404 101.144 428.305 101.147 cv
428.207 101.149 428.108 101.153 428.011 101.158 cv
427.913 101.163 427.815 101.169 427.718 101.177 cv
427.621 101.184 427.524 101.193 427.427 101.202 cv
427.331 101.212 427.234 101.223 427.139 101.235 cv
427.043 101.247 426.947 101.261 426.852 101.275 cv
426.757 101.29 426.662 101.306 426.568 101.323 cv
426.474 101.339 426.379 101.358 426.286 101.377 cv
426.193 101.396 426.099 101.416 426.006 101.437 cv
425.914 101.459 425.821 101.482 425.729 101.505 cv
425.638 101.529 425.545 101.554 425.455 101.579 cv
425.364 101.605 425.273 101.632 425.183 101.66 cv
424.914 101.747 li
424.649 101.841 li
424.386 101.941 li
424.126 102.047 li
423.87 102.159 li
423.617 102.278 li
423.367 102.402 li
423.121 102.532 li
422.878 102.667 li
422.639 102.809 li
422.404 102.955 li
422.173 103.108 li
421.946 103.265 li
421.722 103.428 li
421.503 103.596 li
421.288 103.77 li
421.077 103.948 li
420.871 104.131 li
420.669 104.319 li
420.472 104.511 li
420.28 104.709 li
420.092 104.911 li
419.909 105.117 li
419.731 105.328 li
419.557 105.543 li
419.389 105.762 li
419.227 105.985 li
419.069 106.213 li
418.917 106.444 li
418.77 106.679 li
418.629 106.918 li
418.493 107.161 li
418.363 107.407 li
418.239 107.657 li
418.121 107.91 li
418.009 108.166 li
417.903 108.426 li
417.803 108.689 li
417.709 108.955 li
417.679 109.044 417.65 109.134 417.622 109.224 cv
417.594 109.314 417.567 109.405 417.541 109.495 cv
417.515 109.586 417.491 109.678 417.467 109.77 cv
417.443 109.861 417.421 109.955 417.399 110.047 cv
417.378 110.139 417.358 110.233 417.339 110.326 cv
417.319 110.42 417.301 110.515 417.285 110.609 cv
417.268 110.703 417.252 110.798 417.237 110.893 cv
417.223 110.988 417.209 111.084 417.197 111.18 cv
417.185 111.275 417.174 111.372 417.164 111.468 cv
417.155 111.565 417.146 111.663 417.138 111.759 cv
417.131 111.856 417.125 111.955 417.12 112.052 cv
417.115 112.15 417.111 112.249 417.109 112.347 cv
417.106 112.445 417.105 112.545 417.105 112.643 cv
cp
.21602 .207454 .209307 rgb
f
1.5 lw
366.848 66.751 mo
366.848 159.701 li
.783545 .790168 .797695 rgb
@
367.906 92.8687 mo
367.906 133.769 li
.21602 .207454 .209307 rgb
@
454.393 97.413 mo
464.455 97.413 li
464.455 128.743 li
454.393 128.743 li
454.393 97.413 li
.48562 .491648 .500845 rgb
ef
464.117 128.544 mo
454.637 128.544 li
454.637 97.7035 li
464.117 97.7035 li
464.117 128.544 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[0 31.08 -9.72 0 377.385 37.9715 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 259 
/H 81 
/M[259 0 0 -81 0 81 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 259 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 259 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 259 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2b
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.nl^J~>

%%EndBinary
grestore
np
gsave
454.588 128.601 mo
464.188 128.601 li
464.188 97.7611 li
454.588 97.7611 li
454.588 128.601 li
clp
1 1 1 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+Calibri-Italic def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 65 /A put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 84 /T put
dup 89 /Y put
def
/FontBBox {-725 -276 1260 1026} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/.notdef <1C60D8A8C9B7A0865786BC308F2320639BB536432D0898AEB6E2A7
5CF9EC2A9EC0700EC985467C5EB75BAFAE6BE92B47D4665D1FFB7CDD63B993D8
CAF292A657BB84C1D7B11457D454AE84F45E42136F191EC6E3B3983E5AB3335D
EC1B5DA070AA269E3098A95D700B7A877E0B90FEA50C57240FE69A623C227A24
32F0D09A0AB3B37F9929A87FD9AD5B69FC3DDBBDE0A657548A6A0CA57D1D47D5
FE926BE7FF962360C0A9B770C0895EF6EBFFA4DC6BEC37F71748863B9F794A34
58D5F95997EC1E7D14F6BEF0F24D8F15E48015D300AB35CF12A219244AC1E96B
AAD98C9FB5AA9AB620D4759046C90591AD5B5DB9058FED9B2DEAA5C289619C69
E6B8AFBA78E92BA7CAD51162C8E19B9CE3A002008E1F2E7A1C2CA8B94E16AF51
1B72C953877A73A560545823ADD0EF14F1A99CBC77A9AEB372F7F84402780C34
1A1F3B424BB5BB3D045333E21109BF0BFC6DF2C339E12B2157F8A656B74474F0
BCE53FA32D21B2F841C437CBC8FF800542665AE6B6AE1AB4D9D2CA7B4C4D6695
3BDAE1223DC341C8BCCF7DF80B0EAE877C569B5D2FC0CF06741B78357213D2C0
36105C76D1B0229545F400BC4FF0C330A129DED3A7DD021F5A29FF7E933705A9
10D64D991F85DB9CFE06DFBE23A1219DBA72230B> |-
/space <1C60D8A8C9B888C146> |-
/A <1C60D8A8C9B7F88C24E7C7C18A99AFA695E77890405AEC786C5E164127CE
DB6D0431921DDE076A91730CCF34AC8021E96CCDAEFB72FBEE35C69B7C9974AB
FE2ED042302CA1463ABE5172E3C300830C941825CFB07435A0FA431408DF0394
FC3501727BF64B001FB84519931BD81572DDACF187EAA923E7D53C077380AAA1
4C9B7BFAD56722055151EF8E4F81033FECCD0BF39EFB51DD5FABE0C67CA51A3F
ED05766CE1E7FD548D38717CCFBD53EF35936DBAB663AAB2BD8662E7EF20093C
F4F5EBB615F1F96620A4A1A8CBB74573398C245433216A> |-
/I <1C60D8A8C9B86ED904CFDA1DF007FC1CE7608A9223986CE0C40B459B7A89
A1802B675886B3F3C36D915BE5BF4C5A084993D0B749C3401939895025DCB6BA
3C4439C5D4CF362801C9B98D90056ED94FE24AA438B3E47F3170F30963E9D6A4
7540667717F3223331BC78DA4B2EA1CCD114AC1A932B129FC80C70B9B5608F5D
FF32087D0ABA> |-
/M <1C60D8A8C9B68A39A0D45F5B31123F5781C6114A619CB02A9E825FF65DBD
6C259BF8BB3F514059127C1392C9CE498FD621CC2F85C5C32CC64E040C3B6A42
4B91073EF2ECD310E0FC7AF92B525BE1C521EA1FF625263535A5EB2D2F2C360A
855CABA2DE433F8392D30722165A5FD7856A546C1B6CC50B39AEEE09441E9C7F
3B23ED7AB676C5FA86439712B3A69E4FFFF5F89DC42460A82E9A7A614DA7EF65
397856D4CD608065EB437EF3BEBC666518AA8133D2DB881A31B56B8989D3DD4E
8C3B99CCF58FD8F16835282ADF9D31DE658BDF6EB9D3EAC7D29F9D3FF03B6802
2FDADA4711E27E5F0DF50A86FCF9E238F9A3C5585C18114CC73E811E99431592
0BBB1B6882D9972EE84B53A2B687214E51C5A9966AC9BBD93553AEDF03581622
B5F546DF1FDEDE3BC36B7501CC9A44A66F22BC52F4E636A4> |-
/N <1C60D8A8C9B678BD1706B03FB791EF68EE7AE12BEF9FB15871CA1F4493B7
891F63A910B969A95DA78942400325AE1AB87F57F25ABE75B7EC669EFDAACC6E
4860BA386669D8D86B91EEFB0274AAFA5FC5AA2FDDD886FBE32FD16BC2570529
6ECC0754CACB8145F15F14B221692F038A94113A5F42F42E6A0B8742FFFC5D2B
075A5D8F907D56ABA5018E23C641C6B4EF2C0F0CEEF7383A7C19BA5D190AEBEF
6D3B206AF9C21120D19340E03B9DEC0AA84CD656E1C7D18B7C83EDFBD46FC77F
5923D4F8F9004428AC7E33766D10BDF6B5A197852DAFB6D781506361599E6C39
D2B0AE0CD1A6375E910537419786A1E50B5887C87D735C775F3E5633BE3074AB
06A63CDBC05007ABC736B37B31F4256FBE6C3260583AEB9A2643AE30873B9F47
FD74C34D6A290F84E77F32A1025F4FAEFD9967842906C6EE> |-
/O <1C60D8A8C9B643FE998BF334CB54589080B08FD047C8EA70C075C89319F3
8C208F25003D47299C0C7477FAF3F073685594BD6AA44322558C3085CC51397A
21A82A76F9A7CBC5722D5D1CDEEDD9349A598367C211B407DEEA4BEFFFC24315
61106E7D33C1B30104713DFCE7E6E005F00D88B6CE01D7928D3949541AF8E3A6
D388C0378BA08AAD05DCCA583A51B604792548B95FD35CC6D1ACAB299BA635BD
FB1B9BE9F6EFA0C0297E713824531275ADD7A5958192DD50EA74B270A483DF03
302152B8CF075A2BDC1BC647B742A15A58761822A05E2B752310A62274AA05F7
72EBB97011BE60027D095E08EA9164C87B1C5F4020A0FABC49EB27C1A3842E6F
53C7308D07EACB902B3814AD38C9656D19CF96055908197B3D0DD0BD00FE0E18
4CB704A03965AB6FCD1FD1A75970> |-
/R <1C60D8A8C9B79C5FEE5889580CAAEE06AFC223BDFFC3CA3519830EC0F9FA
B71F618C52B990E895DCD265F905758C917E27F274DEF695DF2AC4DB9BAF6D4F
8F19AB3E8AFFF7535EE236989C1449417440D48EF871EE4CD50B0390DA03C485
B41BD790673367A9F882A7917E3318EC8551DF58673348A496F1A81D7B40DA84
148053B44A66BA9C6E55BFA543DAFD9CAFAE8A3D14BC29BD44133FC3AAC403ED
63D20E308658AE90E1AA0809FB3AE94E3EEB38948FE84A72573A81491C1556CC
446CED7690076F9264E51368E32411F61F588CBBED2E664675C3DF9534D93B11
3BC405446063D8DED1ED59662EDA9C6630CB148101701DBA410D4C26547DF61E
A6C7368C97B966A5ED9CE41B9A7055179359DDB781CF1F2AE68BA08717158AE6
D98B5864EC956C0CCE0D27D5C2DE03B9A1009AED0B9FE505C318D2E1FACC0ABE
41E9212DB66C66CEF42F425CE54F9965C304FA3B7CC62939C12D> |-
/T <1C60D8A8C9B7544E0BD44792D5D51E7EFCE09B1F437A065C1ABBB5A6333E
3764B2AEA2CBC8943EE494D37AE9E8B4B022DF299781883C0B6D3E716309AB37
BB95B1A20B71E792716835C11049804FB9D451C9BCB60593CFD2929BE1D90829
B58FE7E0C726A9A55222BD86B806D9A8A1CD1C8F4F72598F356ABE24C4FD3643
E0B5D89C109685B0A70FA874F54E3E0105A6A3D6FA5D197B609699C56A509C56
2E43ADD5BD167DD184F9590E26432C7E237A2CF61565241FD0AC018081E59BBE
76C95639F729FD80CBFBE736> |-
/Y <1C60D8A8C9B7544E0BC55DA821CA16A425E06BCF85E7B080DF45C9491DCC
3E340523781B56BF6370B4920B51B181B240A0794C729CD847BC2C39BCD78769
A346E8AE54EE55078239C14ACB301941CEA4DE9EFA6BEA4EA8B9444B83B15DEF
B606488380C9D303994D3289B815B6ED75648518203305B7C94223FED7605BDC
06B34811CAC008DDC2A284AAE16913D37D24A797589D3E2E964A32770A7EA79F
18FAA6CD4C2E8F6C6273CBCDDBD47F4A289E24FB1493719F97B6031D8F6D44AC
537FBC44EDDAEFB8E5BC6C2ED70B7252B89E8C0F3EAA5D2EA87101A840CCD956
250840383F0B4B46B73CBB86> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QWVADR+Calibri-Italic /QJJAAA+Calibri-Italic findfont ct_VMDictPut
/QWVADR+Calibri-Italic*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 7{/.notdef}rp /I 3{/.notdef}rp /M 
/N /O 2{/.notdef}rp /R /.notdef /T 4{/.notdef}rp /Y 
166{/.notdef}rp]
QWVADR+Calibri-Italic nf
QWVADR+Calibri-Italic*1 [0 -3.96 -3.96 0 0 0 ]msf
458.477 127.344 mo
(ROTARY MOTION)
[-2.15979 -2.64014 -1.92059 -2.27979 -2.16016 -1.92059 -.958313 -3.36005 -2.6402 -1.92059 -.9599 -2.76013 
0 ]ysh
grestore
gsave
454.588 128.601 mo
464.188 128.601 li
464.188 97.7611 li
454.588 97.7611 li
454.588 128.601 li
clp
1 1 1 rgb
QWVADR+Calibri-Italic*1 [0 -3.96 -3.96 0 0 0 ]msf
458.477 99.0235 mo
( )sh
grestore
gsave
454.588 128.601 mo
464.188 128.601 li
464.188 97.7611 li
454.588 97.7611 li
454.588 128.601 li
clp
1 1 1 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADR+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B75378CE3CBBB380144F94BC5021A60DCF8ED34E986D643369
621970E1429000F94D61AB696E6A4875E3D05044DEA0166E4B76E518EA03F8F7
7889339A2469718141379375D152FB9D81061EEAB6560380124BD7FE30883B23
9DCBDFB127F9F7C05C810A52E215B74BC05E2E97928ADE0AD65DE20B2C9BC003
467FE13A975F355BAE7F01C9E9477781417D28687F2228D405438AE05BAA5C7E
9CE0BAC490E483E6F72DCF515E04BCD1D45B1A027B08C636C0C506A1F264258A
9030906C155CAB692B2E5F1142339F5AD966B71A4ED86A8F593520C7755A1547
9A65C4BC14EDE3FEF0405B8CDB1D6B4E97E401067E950AE023> |-
/S <1C60D8A8C9B77771B08BEA3A0F7464497DF7400B7F87F65E3EAA75A088DF
46D5DD6ACE7EC271276F7B43215E2F56362CFDAC2104F43572239884809E79BA
8102F8F788059CECAEFB64BBAE4A2F4685046FCABB6C70ED04D005AA111FF7A6
8542555809BEA9D46D911D2E87FCAF3DAE3429054D4DB073DDABC6F47974E6F8
488C7E07052B9A51125DC88A09534EA8A3B113C49A9FE4B53317E9990F9F78D2
FF3646581ADB2CE817150EF1C51E8B177CE355209CFCF24C2D47A4F4C583B5DC
D2B353499083EA924A333D41E3CAC577CFA29813FDEB4B05C97559CEAAB65A9F
2B674E9D7B2DEC779F0E9D9D7B23B3A4E4C800ED039244ADCA60BE6E4365135E
BDC8812FD382E62909550CDE204FC5DB43C03DDD9503823CC9FE985E18918C0C
A358B99D346A46C23D379630DCC37BE2A28474DEB4A9A6CACE755017F8F375B4
A853A33198AB153D92BB684EB82952529EE9349FDD3D21140F33598C89C6ECA9
B2A2A71433FA630F550743595D18A9DC8F776E08F22002C4D0D8F0A6AFC543AF
B0666F252DF2FD8C9BA704ED744399BE2A92F9726F8995C1477016724C0B17F0
9709E81F7BFBA4816F2666F51DDC1230EAB8FBC8BE2178D85E0E1EDF9409C154
E1B6C571D477FAA49586> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADR+Calibri-Italic /Encoding get
dup 69 /E put
dup 83 /S put
pop
%ADOEndSubsetFont
/QWVADR+Calibri-Italic*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 3{/.notdef}rp /E 3{/.notdef}rp /I 
3{/.notdef}rp /M /N /O 2{/.notdef}rp /R /S /T 
4{/.notdef}rp /Y 166{/.notdef}rp]
QWVADR+Calibri-Italic nf
QWVADR+Calibri-Italic*1 [0 -3.96 -3.96 0 0 0 ]msf
463.277 119.664 mo
(SENSOR)
[-1.79785 -1.92023 -2.52014 -1.79779 -2.6402 0 ]ysh
grestore
1 1 1 rgb
QWVADR+Calibri-Italic*1 [0 -3 -3 0 0 0 ]msf
463.277 106.703 mo
( )sh
368.965 110.161 mo
381.961 110.161 li
381.961 114.961 li
368.965 114.961 li
368.965 110.161 li
.865862 .870293 .87527 rgb
ef
368.965 110.161 mo
368.965 110.036 li
381.961 110.036 li
382.049 110.073 li
382.086 110.161 li
382.086 114.961 li
382.049 115.049 li
381.961 115.086 li
368.965 115.086 li
368.876 115.05 li
368.84 114.961 li
368.84 110.161 li
368.876 110.073 li
368.965 110.036 li
368.965 110.161 li
369.09 110.161 li
369.09 114.836 li
381.836 114.836 li
381.836 110.286 li
368.965 110.286 li
368.965 110.161 li
369.09 110.161 li
368.965 110.161 li
.21602 .207454 .209307 rgb
f
403.087 110.161 mo
416.083 110.161 li
416.083 114.961 li
403.087 114.961 li
cp
.945802 .947668 .949748 rgb
ef
.25 lw
403.087 110.161 mo
416.083 110.161 li
416.083 114.961 li
403.087 114.961 li
cp
.21602 .207454 .209307 rgb
@
375.896 106.827 mo
411.884 106.827 li
411.884 118.227 li
375.896 118.227 li
375.896 106.827 li
.48562 .491648 .500845 rgb
ef
2 lw
435.076 111.894 mo
440.352 112.727 445.628 113.561 449.071 116.894 cv
452.515 120.227 452.737 127.949 455.736 131.894 cv
458.735 135.839 464.455 139.005 467.065 140.561 cv
469.676 142.116 470.537 141.672 471.397 141.227 cv
@
382.827 113.361 mo
382.827 113.236 li
392.054 113.236 li
392.142 113.273 li
392.179 113.361 li
392.179 117.061 li
392.142 117.149 li
392.054 117.186 li
382.827 117.186 li
382.738 117.15 li
382.702 117.061 li
382.702 113.361 li
382.738 113.273 li
382.827 113.236 li
382.827 113.361 li
382.952 113.361 li
382.952 116.936 li
391.929 116.936 li
391.929 113.486 li
382.827 113.486 li
382.827 113.361 li
382.952 113.361 li
382.827 113.361 li
.21602 .207454 .209307 rgb
f
384.16 114.027 mo
386.319 114.027 li
386.319 116.187 li
384.16 116.187 li
384.16 114.027 li
ef
396.81 116.999 mo
392.179 116.999 li
392.179 113.361 li
392.142 113.273 li
392.054 113.236 li
392.009 113.236 li
392.009 108.599 li
396.81 108.599 li
396.81 116.999 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[0 -8.64 5.04 0 305.037 58.1559 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 72 
/H 42 
/M[72 0 0 -42 0 42 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 72 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 72 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 72 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm"gN
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm"gN
Jm!\.Jm!\.Jm!\.Jm!t6J,~>

%%EndBinary
grestore
np
392.179 116.999 mo
392.009 116.999 li
392.009 113.236 li
392.054 113.236 li
392.142 113.273 li
392.179 113.361 li
392.179 116.999 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[0 -3.96 .36 0 305.037 53.4759 ]ct
snap_to_device
<<
/T 1
/W 33 
/H 3 
/M[33 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
gsave
392.068 117.081 mo
396.869 117.081 li
396.869 108.561 li
392.068 108.561 li
392.068 117.081 li
clp
1 1 1 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B7F88C2B6CB105045FB5B2B32CEE3D567021E87FFA3A108F22
F0AD769D89AF310F9FA2A63D83B348F1CD4D9158D831C2637A040F2E3D2AD1E0
C1265C252DE42DC685024335218B88110082607887337A49D14691BEEC919D91
764E7A708708CD55D39F5C43F91BAAAD2C1BF631413626FEAC47C21B08151BEA
5901545C7204664D0C76E7A812FB56764BAC701D80F5CBA63A3746A10BE794CC
B8FEAE9714EDA1C180ECED7E77C8C4917875CE0D099349356F25861C18102A30
8F1467786491B4C86DDD6D90CF5B29B935592B1FC4BC1C> |-
/G <1C60D8A8C9B66A6BA50E0427E25C5714ADB8C9B9CF0FC0CEF6EE73D1E99B
B48B900A90A8481CB0697FC364877CAB3F0BAC107A5985C7A4D22440DA86F4A9
72F9AFAD2B169D45864F0EB43DFECDDF9B48F748106257F4F8A2F98C4740F90E
153B966076108E686FDB751ED3AC53F21A2FAA2C75F9056AEA3EB40EDEB41C5F
72D0EF46D311E14708C0419D0AC71F5FE9C06FB58B47761CFB807462BB0A24A7
D0172F51822DC6883A662FC9DBBDBA3E8948059B6C4326073AC305C8231D1641
2AEBF639A030B98E67468E40FB37E8D82AB470D76A0B4CA1958F3AEDAB615CBB
F7723B110D3F305B8C697351253EF1C09371E19868671A0BEA47ECCFD73C997B
F454FFC2CF56E14355A442A5A8537BE7A8FA7927378E9DE7FF23A7517FA9A542
8764E2BD5DE89433E003ED402D46984E8DB49ADB11CDCBC4DD9C883C19F27BC2
FF3EC88E440D2AA6B8AEA249A1DEC56C08060C9516634A8A739E722F4CE20E07
C6ED145411FCB762CDFE27B9AA> |-
/I <1C60D8A8C9B86ED904793239D5A87846341C6685DE5ABE7704D2C21702B1
9492F988F7BDB944EF3CF61808A6DB9D1F22BBD335BB859C853102ABDC306BF0
344F58C180F59706796F6A9C1DD4450E8611E916B0A530128C4C5E0E96FFF301
F980705D57CD45F3B705E62B3216F34902178F51AC490CA8AF3698463F806A35
B46CD69D> |-
/N <1C60D8A8C9B67B16EC17A11C9303513193038382E210A42B5CE850AFC118
B8F8E20755C8A90C95C89303B8AF97DF2083371B19301E0DB8111A384A8E035C
8C8FD179B5FF5DEE9371CE5D28447AD71E5F20621DEE2C342616335A1AAB1669
E519E232E79C4980DE37E3F1E4DCD25C4506A181A5E635190DDA595BDDE1573C
B44863FF5A83BD7D7E515B71492920EF87FE789C8908736F38EB074EA06C50C8
F913E2E6E48D5D36311F7C911CB6784E303E758C4B3B979518975255BBF01EB8
B827E2459ECECE07A833BA1FB2794232A02C9AD337BE827A573B5E9CE89F5D6E
BE26850BF2926DF1667989BD0A0C14BF6B80D7EA27888CC10DB4AF2B2A5C69A8
F8245C9A4E02EC85AC1422B48B35F04B8FEAA16155CD67FB40B03E773C1C5BCA
284053C42517C1397CDE066EE439C5025920AAC2AF0AA2792D9E710F7897AACD
F305> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 65 /A put
dup 71 /G put
dup 73 /I put
dup 78 /N put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 5{/.notdef}rp /G /.notdef /I 
2{/.notdef}rp /L /M /N 4{/.notdef}rp /S 13{/.notdef}rp /a 
/.notdef /c /d /e 2{/.notdef}rp /h /i /j 
/.notdef /l /m /n /o /p /.notdef /r 
/s /t /u /.notdef /w 136{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [0 3 3 0 0 0 ]msf
394.049 109.559 mo
(GAIN)
[1.91998 1.67999 .719971 0 ]ysh
grestore
1 1 1 rgb
QWVADQ+Calibri*1 [0 2.04 2.04 0 0 0 ]msf
394.049 115.919 mo
( )sh
391.962 106.827 mo
379.962 106.827 li
379.962 106.279 li
391.962 106.279 li
391.962 106.827 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[0 -.84 12.24 0 292.99 60.4755 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 7 
/H 102 
/M[7 0 0 -102 0 102 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 7 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 7 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 7 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
Ju4-sJu4-sJu4-sJu4-sJu4-sJu4-sJu4-sJu4-sPGWj~>

%%EndBinary
grestore
np
391.929 114.679 mo
386.319 114.679 li
386.319 114.027 li
384.16 114.027 li
384.16 114.679 li
382.952 114.679 li
382.952 113.486 li
391.929 113.486 li
391.929 114.679 li
382.702 114.679 mo
379.962 114.679 li
379.962 106.827 li
391.962 106.827 li
391.962 113.236 li
382.827 113.236 li
382.738 113.273 li
382.702 113.361 li
382.702 114.679 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[0 -8.04 12.24 0 292.99 59.8755 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 67 
/H 102 
/M[67 0 0 -102 0 102 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 67 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 67 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 67 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
l</^AJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm%AAJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.l</^AJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm%AAJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.l<1i(J,~>

%%EndBinary
grestore
np
391.962 114.679 mo
391.929 114.679 li
391.929 113.486 li
382.952 113.486 li
382.952 114.679 li
382.702 114.679 li
382.702 113.361 li
382.738 113.273 li
382.827 113.236 li
391.962 113.236 li
391.962 114.679 li
382.952 113.361 mo
382.952 113.361 li
382.827 113.361 mo
382.827 113.361 li
382.952 113.361 li
382.827 113.361 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[0 -1.68 9.48 0 295.75 53.5155 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 14 
/H 79 
/M[14 0 0 -79 0 79 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 14 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 14 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 14 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&nGn(~>

%%EndBinary
grestore
np
386.319 114.679 mo
384.16 114.679 li
384.16 114.027 li
386.319 114.027 li
386.319 114.679 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[0 -.84 2.4 0 297.19 52.6755 ]ct
snap_to_device
<<
/T 1
/W 7 
/H 20 
/M[7 0 0 -20 0 20 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
gsave
379.948 114.561 mo
392.067 114.561 li
392.067 106.16 li
379.948 106.16 li
379.948 114.561 li
clp
1 1 1 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A0860A305D7D1540DECC7BE2F83965065BA1F58088FE75
1F51768999AF3CB0CBD98712B4A20A30CFDD23F3D718AE6664545AA64C90E87A
977C061638AE7B9844BD53D39E1CD919540EC0AFC0ADDD639213BAA3C2156ECF
4D5FEFDF4B77C92C9A62F21FEF596A47F254F30F662D97990A276CD1E50761DD
9D07D78B626617E74128BC5D647B42ED807FE6DD0588AD25D211834DAC9410A0
AEBD06E6565C1DCBD86013B11A7BE0A2010B12635869FAC3323D92D6BCCC10D0
2550F431D6753E5E6C65DB63D883AF6BCE4C75C5A66BF9AE47A5570BA4B61C57
63C152A7FDEC11C0C748631E999D604A7F2938BB57220CBE02AE758E60183316
61C475AA9DED7C59> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 15{/.notdef}rp /A 5{/.notdef}rp /G 
/.notdef /I 2{/.notdef}rp /L /M /N 4{/.notdef}rp /S 
13{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h 
/i /j /.notdef /l /m /n /o /p 
/.notdef /r /s /t /u /.notdef /w 136{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [0 3 3 0 0 0 ]msf
389.442 109.639 mo
(1)sh
grestore
gsave
379.948 114.561 mo
392.067 114.561 li
392.067 106.16 li
379.948 106.16 li
379.948 114.561 li
clp
1 1 1 rgb
QWVADQ+Calibri*1 [0 3 3 0 0 0 ]msf
389.442 111.199 mo
( )sh
grestore
1 1 1 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A0860A0ABA2698AC8E090156BBF2C9C30ADDAE7DCB3D9
7848CC5D38A5C6D85B8937F2533AAB8D6BFA0DD62B7BCE11E4F148006AA53F16
B7661785227AEDEF098A1104625EF68DF52BAE87BC71C0E793E6FAD1A965E4D3
8BA9CF4CEDAADD0504EE4CE20EF80FE3B0F494717869AEF9FD48C1A316DF08AD
A9E5D4CE0C25CB68B43C1EB2B9FE55F89B0B22C758BDED5FDD580CE702C559F6
E1F276FBE929DD9A2C3557CE4E2CABBF3EDF814307556BE2579995A57ECC922B
3376DB39CC4DC2518F12025BDC7A3EE507BE357864FDBF8F62FBD571913B8657
13255C738D4AEB39D8820C2AC5F5D7DF55CB64B7CD192349742D481F16CF8009
5A893636D91177B06233710432F07D42A84BDDC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 2{/.notdef}rp /L /M /N 4{/.notdef}rp 
/S 13{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp 
/h /i /j /.notdef /l /m /n /o 
/p /.notdef /r /s /t /u /.notdef /w 
136{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [0 3 3 0 0 0 ]msf
386.202 108.919 mo
(10)
[1.56 0 ]ysh
386.202 111.919 mo
( )sh
382.842 108.199 mo
(100)
[1.56 1.56 0 ]ysh
382.842 112.759 mo
( )sh
gsave
379.948 114.561 mo
392.067 114.561 li
392.067 106.16 li
379.948 106.16 li
379.948 114.561 li
clp
QWVADQ+Calibri*1 [0 2.04 2.04 0 0 0 ]msf
380.562 110.479 mo
( )sh
grestore
413.75 109.094 mo
435.443 109.094 li
435.443 115.944 li
413.75 115.944 li
cp
.48562 .491648 .500845 rgb
ef
.25 lw
413.75 109.094 mo
435.443 109.094 li
435.443 115.944 li
413.75 115.944 li
cp
.21602 .207454 .209307 rgb
@
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
65.6679 53.7211 mo
(incident)
[2.04033 4.67995 3.83945 2.04033 4.67995 4.5603 4.67995 0 ]xsh
95.3049 53.7211 mo
( )sh
gsave
60.8679 67.1611 mo
100.229 67.1611 li
100.229 41.9611 li
60.8679 41.9611 li
60.8679 67.1611 li
clp
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B78E05EA9D9733F4614DDE4F3CCBD772458631C06B9585CEC3
067196C085285D4EBCA830523DBA980A7903E7CCB9545952E933EA287D309550
0A08B5FF1250FB2472C48AA643F9948B713834174A32233FFD00CE8E2A02CD92
CD0EB36D86747ABA3C4EE4A7096B26460185FCF827CE5E1862348B87101A5C9D
384541120A40C8C71F0748956E48EF5E095EAD17FBE5B28249366E6BEAFC298E
E015C31B731D6166501448A2851B390CD5E1032DCB65F726222BA5085B034CFC
917DC36E2C73558D1FCD108B1B305D16C97136B39697A594C46D2F068CC61EBC
8B61EEBACA2E9B9971F359DB93A6910B3669C04870AE086A03B453BCE1E9F2C9
24C2B94631466A458EB1B3FD708C18C058A8B05845E2D231DD130E2BCA4DCE6C
A2C90256ED106A2B8A867758EB2E1D464AB1AA657324F30AFED658994E772592
420FD616D7BD6885B5350E3F2A59010B037CCEDD5B3D83A476690BED59BBD82D
D2D74F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 2{/.notdef}rp /L /M /N 4{/.notdef}rp 
/S 13{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp 
/h /i /j /.notdef /l /m /n /o 
/p /.notdef /r /s /t /u /.notdef /w 
136{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
70.1079 64.6411 mo
(beam)
[4.67995 4.43701 4.32004 0 ]xsh
grestore
gsave
60.8679 67.1611 mo
100.229 67.1611 li
100.229 41.9611 li
60.8679 41.9611 li
60.8679 67.1611 li
clp
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
90.8679 64.6411 mo
( )sh
grestore
.75 lw
46.7978 77.251 mo
115.443 77.251 li
@
1 lc
0 lj
111.443 74.7509 mo
115.443 77.2509 li
111.443 79.7509 li
@
gsave
413.548 63.8011 mo
475.348 63.8011 li
475.348 32.6011 li
413.548 32.6011 li
413.548 63.8011 li
clp
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B7D4743405E233890E0A55534F43CA9133B29299791AB3DBBE
2A168EA78A7CB17DB0B060289D007AE138DDD7A874C20C0D1520156DF13FACE4
9220AECA91409AE8B52232B88DA851C2DCC83FF3926F0A798122A50015C04B7E
00C749CF9804781F643848BCD8EE92B57CB757A23284ECD5E56D8CA18327E984
54C09854624F1CB0E6F9646D20C4617F03B71EB8405F3505A5816E6439DF15D9
1294CE077BD16B66305872E9E54213ED4B2F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 68 /D put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 2{/.notdef}rp 
/D 2{/.notdef}rp /G /.notdef /I 2{/.notdef}rp /L /M 
/N 4{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d 
/e 2{/.notdef}rp /h /i /j /.notdef /l /m 
/n /o /p /.notdef /r /s /t /u 
/.notdef /w 136{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
424.828 43.0411 mo
(Detector)
[6.84045 5.52002 3.59912 5.51996 4.67993 3.59912 5.87982 0 ]xsh
grestore
gsave
413.548 63.8011 mo
475.348 63.8011 li
475.348 32.6011 li
413.548 32.6011 li
413.548 63.8011 li
clp
QWVADQ+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
464.188 43.0411 mo
( )sh
grestore
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B776A06C625D9575F6DBFFEE93EC1CB9A335325BD9E365428E
EA1BD5B7A305D96437BF24D2E59BF0DFE2360EDCA01120D4DA769624265DE986
6EA970971BD84B20E81D769B1F13D7A21674FB5E8C4844518680BB1DE710B743
8090302965C932285C6A137B1923CFCED74D1C71B686BDF1263BE348B2F06F53
4EDA8A2856376F820F03A76FD878686946B3B179B9CD823AA55541A535E0CCC6
D2D21B3D6A73597DDD43BBEFD829B55A26664F2F8221FA6814449CF6D0CFA134
92A2A7CF82E9D18F6E0413> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 2{/.notdef}rp 
/D 2{/.notdef}rp /G /.notdef /I 2{/.notdef}rp /L /M 
/N 4{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d 
/e 2{/.notdef}rp /h /i /j /.notdef /l /m 
/n /o /p /.notdef /r /s /t /u 
/.notdef /w /.notdef /y 134{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
423.268 56.7211 mo
(Assembly)
[6.36011 4.31671 4.31671 5.52002 8.87939 5.76062 2.40015 0 ]xsh
465.75 56.7211 mo
( )sh
0 lc
1 lj
364.448 62.801 mo
364.448 61.683 365.666 60.776 367.168 60.776 cv
434.295 60.776 li
435.797 60.776 437.015 59.869 437.015 58.751 cv
437.015 59.869 438.232 60.776 439.734 60.776 cv
461.528 60.776 li
463.03 60.776 464.248 61.683 464.248 62.801 cv
@
351.028 165.081 mo
310.828 165.081 li
310.828 139.041 li
351.028 139.041 li
351.028 165.081 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[40.44 0 0 26.28 223.856 1.43384 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 337 
/H 219 
/M[337 0 0 -219 0 219 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 337 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 337 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 337 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^u5J,~>

%%EndBinary
grestore
np
gsave
310.828 165.081 mo
351.027 165.081 li
351.027 139.041 li
310.828 139.041 li
310.828 165.081 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
314.908 146.721 mo
(aperture )
[4.32004 4.67993 4.43701 3.1203 3.00067 4.67993 3.23999 4.43701 0 ]xsh
grestore
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
319.828 156.561 mo
(wheel)
[6.47998 4.67993 4.4397 4.44061 0 ]xsh
342.031 156.561 mo
( )sh
479.148 89.361 mo
426.268 89.361 li
426.268 64.6411 li
479.148 64.6411 li
479.148 89.361 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[53.16 0 0 24.96 339.296 77.1539 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 443 
/H 208 
/M[443 0 0 -208 0 208 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 443 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 443 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 443 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a0s
K)^H&K)^H&K)^H&K)^H&K)^H&`rCP~>

%%EndBinary
grestore
np
gsave
426.268 89.3611 mo
483.269 89.3611 li
483.269 64.521 li
426.268 64.521 li
426.268 89.3611 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
QWVADQ+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B7445140600976780BBEB6A3D2658D3A4C7F919C88C52D412C
8E364C5F7636792196FD221C121AC8A143979AFAA3A09359F0F2A21E651450F6
F05ACC0E82C2760ECA4A653600DE52AE0D5358458AF930D6BDEB0904E4313A0C
BCA78B5C6EE35CCCF928264F350C0A023EDD3B664C736748E408C524202A3326
D95C7DCABC59764E7D97C53C3E04189FF055F0A0F707215CE9EBCE6A5429EBED
17A701726A8DEDD69C85101530BFD06F1546D47732DA28D5440C29DB9FD39281
2122E25828F7402340CB2AAD1BBC054F22EBE3B4068E1189E1BBFDEDCE3380BE
2A1BC64D61665F8EA89BD12E55203D2F412C82771F2C0ABF3E56A249110A5F4D
FD7E943B7CBB3957D78564ABEBC14037C62116307C9CC2770007504568A496F0
E371B5E27EA91CE4ED6B158CDD56E512A87B38DA763ADE44907E57CB7229D283
C8A7D867519E31285088BE518A70B9193ED1297DE2FF3E929169124C3A44E72E
DA1A3B2C0E0DA57F0E79BC1C7BEFED8509DD8CC00683DBCDE9C2A776B95D5831
197913BF75A301F1EB13F5C4E48D99B31FDB0B54BB7B640060AFF7A1619C4EE7
C3CA0DE734198387C7205D8F2F952A1BC7A9DB628AB7F298888007AA604549FA
9EA5ECD6ED4A814A52FD636085B1A8D57F31E70472C30EB60858254A7B95E2F6
778797B84C60B2ED0823FE7265B0CE1B1A64D8F159C443134DC16E39D207947A
0FD5903276> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QWVADQ+Calibri /Encoding get
dup 103 /g put
pop
%ADOEndSubsetFont
/QWVADQ+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 2{/.notdef}rp 
/D 2{/.notdef}rp /G /.notdef /I 2{/.notdef}rp /L /M 
/N 4{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d 
/e /.notdef /g /h /i /j /.notdef /l 
/m /n /o /p /.notdef /r /s /t 
/u /.notdef /w /.notdef /y 134{/.notdef}rp]
QWVADQ+Calibri nf
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
434.428 72.3211 mo
(positioning)
[4.67993 4.79962 3.48041 2.04028 2.99982 2.04028 4.79968 4.67993 2.04034 4.80054 0 ]xsh
grestore
gsave
426.268 89.3611 mo
483.269 89.3611 li
483.269 64.521 li
426.268 64.521 li
426.268 89.3611 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
474.988 72.3211 mo
( )sh
grestore
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
443.668 82.0411 mo
(wheel)
[6.47998 4.67993 4.4397 4.4397 0 ]xsh
465.871 82.0411 mo
( )sh
407.428 88.7611 mo
371.548 88.7611 li
371.548 65.8411 li
407.428 65.8411 li
407.428 88.7611 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[36.12 0 0 23.16 284.576 77.7539 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 301 
/H 193 
/M[301 0 0 -193 0 193 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 301 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 301 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 301 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&RfA!>K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_;>K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&[f:j~>

%%EndBinary
grestore
np
gsave
371.428 88.8811 mo
407.428 88.8811 li
407.428 65.8411 li
371.428 65.8411 li
371.428 88.8811 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
381.388 73.5211 mo
(light)
[2.04034 2.03943 4.20023 4.67996 0 ]xsh
grestore
gsave
371.428 88.8811 mo
407.428 88.8811 li
407.428 65.8411 li
371.428 65.8411 li
371.428 88.8811 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
397.468 73.5211 mo
( )sh
grestore
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
377.428 83.2411 mo
(sensor)
[3.48306 4.4397 4.67996 3.48306 4.79962 0 ]xsh
401.548 83.2411 mo
( )sh
.5 lw
349.211 142.407 mo
366.699 120.586 li
@
379.797 112.45 mo
380.341 86.9257 li
@
435.416 98.4555 mo
447.636 83.0335 li
@
393.508 27.5611 mo
368.068 27.5611 li
368.068 10.7611 li
393.508 10.7611 li
393.508 27.5611 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[25.68 0 0 17.04 281.096 138.954 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 214 
/H 142 
/M[214 0 0 -142 0 142 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 214 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 214 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 214 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
s8R]NK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)blNK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&s8R]NK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)blNK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&s8R]NK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)blNK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&s8R]NK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)blNK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&s8R]NK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)blNK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&s8R]NK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)blNK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&s8R]NK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)blNK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&s8R]NK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)blNK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&s8R]NK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)blNK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&s8R]NK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)blNK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&s8R]NK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)blNK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)`dhJ,~>

%%EndBinary
grestore
np
gsave
368.068 27.5611 mo
393.507 27.5611 li
393.507 10.7611 li
368.068 10.7611 li
368.068 27.5611 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
374.908 19.1611 mo
(rail)
[3.1203 4.32004 2.04031 0 ]xsh
grestore
gsave
368.068 27.5611 mo
393.507 27.5611 li
393.507 10.7611 li
368.068 10.7611 li
368.068 27.5611 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
386.548 19.1611 mo
( )sh
grestore
414.483 20.4658 mo
389.402 17.5578 li
.21602 .207454 .209307 rgb
@
409.348 166.801 mo
371.548 166.801 li
371.548 142.761 li
409.348 142.761 li
409.348 166.801 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[38.04 0 0 24.24 284.576 -.24619 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 317 
/H 202 
/M[317 0 0 -202 0 202 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 317 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 317 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 317 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^Z,K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^Z,K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&L&ZZ~>

%%EndBinary
grestore
np
gsave
371.548 170.121 mo
409.348 170.121 li
409.348 142.641 li
371.548 142.641 li
371.548 170.121 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
382.708 150.441 mo
(gain)
[4.20294 4.32004 2.03943 0 ]xsh
grestore
gsave
371.548 170.121 mo
409.348 170.121 li
409.348 142.641 li
371.548 142.641 li
371.548 170.121 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
398.068 150.441 mo
( )sh
grestore
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
378.628 160.281 mo
(switch)
[3.48306 6.47995 2.03946 3.00064 3.83945 0 ]xsh
402.145 160.281 mo
( )sh
389.218 143.12 mo
386.22 113.767 li
@
404.101 34.7841 mo
416.098 34.7841 li
416.098 48.767 li
404.101 48.767 li
cp
ef
1.5 lw
400.435 39.1178 mo
400.435 43.4678 li
@
400.435 41.4035 mo
405.834 41.4035 li
@
410.046 46.6817 mo
374.257 41.1978 li
374.333 40.7036 li
410.122 46.1874 li
410.046 46.6817 li
f
374.068 52.6411 mo
348.748 52.6411 li
348.748 29.3611 li
374.068 29.3611 li
374.068 52.6411 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[25.56 0 0 23.52 261.776 113.874 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 213 
/H 196 
/M[213 0 0 -196 0 196 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 213 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 213 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 213 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&l2Q8
~>

%%EndBinary
grestore
np
gsave
348.748 52.5211 mo
373.948 52.5211 li
373.948 29.3611 li
348.748 29.3611 li
348.748 52.5211 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
355.588 37.0411 mo
(rail )
[3.1203 4.32004 2.04031 2.03943 0 ]xsh
grestore
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
353.428 46.8811 mo
(stop)
[3.48306 2.99976 4.79962 0 ]xsh
369.385 46.8811 mo
( )sh
.75 lw
46.7978 83.8511 mo
115.443 83.8511 li
@
1 lc
0 lj
111.443 81.351 mo
115.443 83.851 li
111.443 86.351 li
@
0 lc
1 lj
46.7978 70.6512 mo
115.443 70.6512 li
@
1 lc
0 lj
111.443 68.1511 mo
115.443 70.6511 li
111.443 73.1511 li
@
121.998 61.5641 mo
140.848 61.5641 li
140.848 94.1031 li
121.998 94.1031 li
cp
.705021 .712684 .721721 rgb
ef
1.5 lw
0 lc
1 lj
120.998 55.8511 mo
120.998 73.0451 li
.21602 .207454 .209307 rgb
@
120.998 74.9879 mo
120.998 79.337 li
@
120.998 81.4144 mo
120.998 122.351 li
@
18.1479 66.2083 mo
18.1479 70.5583 li
@
18.1479 68.494 mo
23.5479 68.494 li
@
18.1479 73.6369 mo
18.1479 77.9869 li
@
18.1479 75.7797 mo
23.5479 75.7797 li
@
18.1479 89.494 mo
23.5479 89.494 li
@
21.1479 61.3511 mo
39.9979 61.3511 li
39.9979 93.9011 li
21.1479 93.9011 li
cp
.48562 .491648 .500845 rgb
ef
gsave
266.068 91.7611 mo
212.908 91.7611 li
212.908 65.9611 li
266.068 65.9611 li
266.068 91.7611 li
clp
212.908 65.9611 mo
266.068 65.9611 li
266.068 91.7611 li
212.908 91.7611 li
cp
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 86.8521 166.635 ]ct
[53.4 0 0 26.04 125.936 74.7538 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 445 
/H 217 
/M[445 0 0 -217 0 217 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 445 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 445 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 445 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&_#Jo~>

%%EndBinary
grestore
np
grestore
gsave
212.788 91.7611 mo
265.948 91.7611 li
265.948 65.9621 li
212.788 65.9621 li
212.788 91.7611 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
222.148 74.4811 mo
(scattered)
[3.48306 3.83945 4.32001 3.00067 2.99976 4.43973 3.12027 4.43973 0 ]xsh
grestore
gsave
212.788 91.7611 mo
265.948 91.7611 li
265.948 65.9621 li
212.788 65.9621 li
212.788 91.7611 li
clp
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
256.588 74.4811 mo
( )sh
grestore
.21602 .207454 .209307 rgb
QWVADQ+Calibri*1 [9 0 0 -9 0 0 ]msf
228.988 85.4011 mo
(beam)
[4.67993 4.43701 4.32004 0 ]xsh
249.751 85.4011 mo
( )sh
.75 lw
145.398 77.0511 mo
268.043 77.0511 li
@
1 lc
0 lj
264.043 74.551 mo
268.043 77.051 li
264.043 79.551 li
@
0 lc
1 lj
145.398 81.7653 mo
268.045 91.5383 li
@
1 lc
0 lj
264.256 88.7286 mo
268.045 91.5386 li
263.859 93.7126 li
@
0 lc
1 lj
145.398 72.5582 mo
268.045 62.9632 li
@
1 lc
0 lj
264.252 65.7677 mo
268.045 62.9627 li
263.862 60.7827 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/QWVADQ+Calibri*1 uf
/QWVADQ+Calibri uf
/HIBBAA+Calibri uf
/QWVADR+Calibri-Italic*1 uf
/QWVADR+Calibri-Italic uf
/QJJAAA+Calibri-Italic uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
