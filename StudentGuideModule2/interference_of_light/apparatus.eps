%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: apparatus.pdf
%%Creator: Adobe Acrobat 11.0.18
%%For: mtrawick
%%CreationDate: 6/12/2017, 5:55:39 PM
%%BoundingBox: 0 0 472 164
%%HiResBoundingBox: 0 0 471.3194 163.0765
%%CropBox: 0 0 471.3194 163.0765
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1184 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:ModifyDate="2017-06-12T17:55:26-04:00"
   xmp:CreateDate="2017-06-12T17:53:20-04:00"
   xmp:MetadataDate="2017-06-12T17:55:26-04:00"
   xmp:CreatorTool="Acrobat PDFMaker 11 for Word"
   xmpMM:DocumentID="uuid:8b45fb09-8a2a-47c2-a342-da190e4a21e9"
   xmpMM:InstanceID="uuid:3b58e6be-bc32-4f2f-bf7f-5bef1d67a36d"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 11.0"
   pdfx:SourceModified="D:20170612215255"
   pdfx:Company="University of Richmond">
   <xmpMM:subject>
    <rdf:Seq>
     <rdf:li>9</rdf:li>
    </rdf:Seq>
   </xmpMM:subject>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Matt Trawick</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/0 
[/DeviceRGB] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 0 
/Lookup <~
!!!!~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -163.076 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 163.076 li
471.319 163.076 li
471.319 0 li
cp
clp
gsave
-.0674362 163.99 mo
471.933 163.99 li
471.933 -.00954606 li
-.0674362 -.00954606 li
-.0674362 163.99 li
clp
413.679 3.90179 mo
416.747 4.49384 li
416.747 5.6778 li
413.679 6.27081 li
cp
false sop
/1 
[/DeviceRGB] /CSA add_res
.783545 .790168 .797695 rgb
ef
413.679 7.59216 mo
416.747 8.1842 li
416.747 9.36816 li
413.679 9.96118 li
cp
ef
413.679 11.2825 mo
416.747 11.8745 li
416.747 13.0585 li
413.679 13.6515 li
cp
ef
413.679 14.9729 mo
416.747 15.5649 li
416.747 16.7489 li
413.679 17.3419 li
cp
ef
413.679 18.6632 mo
416.747 19.2552 li
416.747 20.4392 li
413.679 21.0322 li
cp
ef
413.679 22.3537 mo
416.747 22.9457 li
416.747 24.1297 li
413.679 24.7227 li
cp
ef
413.679 26.044 mo
416.747 26.636 li
416.747 27.82 li
413.679 28.413 li
cp
ef
413.679 29.7343 mo
416.747 30.3263 li
416.747 31.5103 li
413.679 32.1033 li
cp
ef
413.679 33.4247 mo
416.747 34.0167 li
416.747 35.2007 li
413.679 35.7937 li
cp
ef
413.679 37.1151 mo
416.747 37.7071 li
416.747 38.8911 li
413.679 39.4841 li
cp
ef
413.679 40.8054 mo
416.747 41.3974 li
416.747 42.5814 li
413.679 43.1744 li
cp
ef
413.679 44.4957 mo
416.747 45.0877 li
416.747 46.2717 li
413.679 46.8647 li
cp
ef
413.679 48.1862 mo
416.747 48.7782 li
416.747 49.9622 li
413.679 50.5552 li
cp
ef
413.679 51.8765 mo
416.747 52.4685 li
416.747 53.6525 li
413.679 54.2455 li
cp
ef
413.679 55.5669 mo
416.747 56.1589 li
416.747 57.3429 li
413.679 57.9359 li
cp
ef
413.679 59.2572 mo
416.747 59.8492 li
416.747 61.0332 li
413.679 61.6262 li
cp
ef
413.679 62.9476 mo
416.747 63.5396 li
416.747 64.7236 li
413.679 65.3166 li
cp
ef
413.679 66.638 mo
416.747 67.23 li
416.747 68.414 li
413.679 69.007 li
cp
ef
413.679 70.3283 mo
416.747 70.9203 li
416.747 72.1043 li
413.679 72.6973 li
cp
ef
413.679 74.0187 mo
416.747 74.6107 li
416.747 75.7947 li
413.679 76.3877 li
cp
ef
413.679 77.709 mo
416.747 78.301 li
416.747 79.485 li
413.679 80.078 li
cp
ef
413.679 81.3994 mo
416.747 81.9914 li
416.747 83.1754 li
413.679 83.7684 li
cp
ef
413.679 85.0898 mo
416.747 85.6818 li
416.747 86.8658 li
413.679 87.4588 li
cp
ef
413.679 88.7802 mo
416.747 89.3722 li
416.747 90.5562 li
413.679 91.1492 li
cp
ef
413.679 92.4704 mo
416.747 93.0624 li
416.747 94.2464 li
413.679 94.8394 li
cp
ef
413.679 96.1608 mo
416.747 96.7528 li
416.747 97.9368 li
413.679 98.5298 li
cp
ef
413.654 98.8405 mo
409.322 98.8405 li
409.322 3.59045 li
413.654 3.59045 li
cp
ef
413.694 66.6903 mo
416.783 67.2823 li
416.783 68.4663 li
413.694 69.0593 li
cp
ef
413.694 70.4056 mo
416.783 70.9976 li
416.783 72.1816 li
413.694 72.7746 li
cp
ef
413.694 74.1208 mo
416.783 74.7129 li
416.783 75.8969 li
413.694 76.4899 li
cp
ef
413.694 77.8361 mo
416.783 78.4281 li
416.783 79.6121 li
413.694 80.2051 li
cp
ef
413.694 81.5514 mo
416.783 82.1434 li
416.783 83.3274 li
413.694 83.9204 li
cp
ef
413.694 85.2666 mo
416.783 85.8586 li
416.783 87.0426 li
413.694 87.6356 li
cp
ef
413.694 88.9819 mo
416.783 89.5739 li
416.783 90.7579 li
413.694 91.3509 li
cp
ef
413.694 92.6972 mo
416.783 93.2892 li
416.783 94.4732 li
413.694 95.0662 li
cp
ef
413.694 96.4124 mo
416.783 97.0044 li
416.783 98.1884 li
413.694 98.7814 li
cp
ef
413.694 100.128 mo
416.783 100.72 li
416.783 101.904 li
413.694 102.497 li
cp
ef
413.694 103.843 mo
416.783 104.435 li
416.783 105.619 li
413.694 106.212 li
cp
ef
413.694 107.558 mo
416.783 108.15 li
416.783 109.334 li
413.694 109.927 li
cp
ef
413.694 111.273 mo
416.783 111.866 li
416.783 113.049 li
413.694 113.643 li
cp
ef
413.694 114.989 mo
416.783 115.581 li
416.783 116.765 li
413.694 117.358 li
cp
ef
413.694 118.704 mo
416.783 119.296 li
416.783 120.48 li
413.694 121.073 li
cp
ef
413.694 122.419 mo
416.783 123.011 li
416.783 124.195 li
413.694 124.788 li
cp
ef
413.694 126.134 mo
416.783 126.727 li
416.783 127.91 li
413.694 128.503 li
cp
ef
413.694 129.85 mo
416.783 130.442 li
416.783 131.626 li
413.694 132.219 li
cp
ef
413.694 133.565 mo
416.783 134.157 li
416.783 135.341 li
413.694 135.934 li
cp
ef
413.694 137.28 mo
416.783 137.872 li
416.783 139.056 li
413.694 139.649 li
cp
ef
413.694 140.996 mo
416.783 141.588 li
416.783 142.772 li
413.694 143.365 li
cp
ef
413.694 144.711 mo
416.783 145.303 li
416.783 146.487 li
413.694 147.08 li
cp
ef
413.694 148.426 mo
416.783 149.018 li
416.783 150.202 li
413.694 150.795 li
cp
ef
413.694 152.141 mo
416.783 152.733 li
416.783 153.917 li
413.694 154.51 li
cp
ef
413.694 155.857 mo
416.783 156.449 li
416.783 157.633 li
413.694 158.225 li
cp
ef
413.694 159.572 mo
416.783 160.164 li
416.783 161.348 li
413.694 161.94 li
cp
ef
413.694 161.94 mo
409.333 161.94 li
409.333 66.6905 li
413.694 66.6905 li
cp
ef
365.691 95.2345 mo
463.459 95.2345 li
463.459 129.535 li
365.691 129.535 li
365.691 95.2345 li
.705021 .712684 .721721 rgb
ef
365.691 95.2345 mo
365.691 95.1096 li
463.459 95.1096 li
463.547 95.1461 li
463.583 95.2345 li
463.583 129.535 li
463.547 129.623 li
463.459 129.659 li
365.691 129.659 li
365.602 129.623 li
365.565 129.535 li
365.565 95.2345 li
365.602 95.1461 li
365.691 95.1096 li
365.691 95.2345 li
365.816 95.2345 li
365.816 129.41 li
463.333 129.41 li
463.333 95.3595 li
365.691 95.3595 li
365.691 95.2345 li
365.816 95.2345 li
365.691 95.2345 li
.21602 .207454 .209307 rgb
f
402.693 95.2345 mo
402.693 129.535 li
403.193 129.535 li
403.193 95.2345 li
403.693 95.2345 mo
403.693 129.535 li
404.193 129.535 li
404.193 95.2345 li
f
gsave
-89.0674 668.99 mo
522.932 668.99 li
522.932 -123.01 li
-89.0674 -123.01 li
-89.0674 668.99 li
clp
405.56 111.849 mo
405.56 100.334 414.892 90.9992 426.403 90.9992 cv
437.914 90.9992 447.246 100.334 447.246 111.849 cv
447.246 123.364 437.914 132.699 426.403 132.699 cv
414.892 132.699 405.56 123.364 405.56 111.849 cv
.783545 .790168 .797695 rgb
ef
405.96 111.849 mo
406.56 111.849 li
406.56 111.679 406.562 111.506 406.566 111.336 cv
406.571 111.167 406.577 110.995 406.586 110.827 cv
406.594 110.659 406.605 110.488 406.618 110.321 cv
406.631 110.154 406.646 109.985 406.663 109.818 cv
406.662 109.818 li
406.679 109.653 406.699 109.485 406.719 109.32 cv
406.74 109.155 406.764 108.988 406.789 108.825 cv
406.814 108.662 406.841 108.496 406.87 108.334 cv
406.899 108.172 406.93 108.008 406.963 107.847 cv
406.996 107.687 407.031 107.525 407.068 107.365 cv
407.105 107.206 407.144 107.045 407.185 106.887 cv
407.225 106.73 407.268 106.571 407.313 106.414 cv
407.357 106.258 407.404 106.101 407.452 105.946 cv
407.5 105.792 407.551 105.635 407.602 105.482 cv
407.654 105.33 407.708 105.175 407.764 105.024 cv
407.819 104.873 407.877 104.72 407.936 104.571 cv
407.995 104.421 408.057 104.271 408.119 104.123 cv
408.181 103.975 408.247 103.826 408.312 103.68 cv
408.378 103.535 408.447 103.388 408.516 103.244 cv
408.586 103.1 408.658 102.955 408.73 102.813 cv
408.803 102.671 408.878 102.528 408.954 102.388 cv
409.03 102.248 409.109 102.107 409.188 101.969 cv
409.268 101.831 409.35 101.693 409.432 101.557 cv
409.515 101.421 409.6 101.284 409.686 101.151 cv
409.771 101.017 409.86 100.883 409.948 100.751 cv
410.037 100.62 410.129 100.488 410.22 100.359 cv
410.312 100.23 410.407 100.1 410.502 99.9732 cv
410.596 99.8462 410.694 99.7192 410.792 99.5942 cv
410.89 99.4702 410.99 99.3452 411.091 99.2232 cv
411.192 99.1012 411.295 98.9782 411.399 98.8592 cv
411.502 98.7392 411.609 98.6192 411.715 98.5022 cv
411.821 98.3852 411.93 98.2682 412.039 98.1542 cv
412.148 98.0392 412.26 97.9252 412.372 97.8132 cv
412.484 97.7012 412.598 97.5892 412.713 97.4802 cv
412.827 97.3712 412.945 97.2622 413.061 97.1552 cv
413.178 97.0492 413.298 96.9432 413.418 96.8392 cv
413.537 96.7362 413.66 96.6322 413.782 96.5312 cv
413.904 96.4312 414.029 96.3302 414.153 96.2322 cv
414.277 96.1342 414.405 96.0372 414.531 95.9422 cv
414.658 95.8472 414.788 95.7522 414.917 95.6612 cv
415.046 95.5692 415.178 95.4772 415.309 95.3882 cv
415.441 95.3002 415.575 95.2112 415.709 95.1262 cv
415.842 95.0402 415.979 94.9542 416.115 94.8722 cv
416.25 94.7902 416.389 94.7072 416.527 94.6282 cv
416.665 94.5492 416.806 94.4702 416.946 94.3942 cv
417.085 94.3182 417.229 94.2432 417.37 94.1702 cv
417.512 94.0972 417.657 94.0252 417.801 93.9562 cv
417.945 93.8862 418.092 93.8182 418.237 93.7522 cv
418.238 93.7522 li
418.383 93.6862 418.532 93.6212 418.68 93.5582 cv
418.827 93.4962 418.978 93.4342 419.127 93.3752 cv
419.277 93.3172 419.43 93.2582 419.581 93.2032 cv
419.732 93.1482 419.886 93.0932 420.039 93.0422 cv
420.192 92.9902 420.348 92.9392 420.502 92.8912 cv
420.657 92.8432 420.815 92.7962 420.97 92.7522 cv
421.127 92.7082 421.286 92.6642 421.443 92.6242 cv
421.601 92.5832 421.762 92.5442 421.921 92.5072 cv
422.08 92.4702 422.243 92.4352 422.403 92.4022 cv
422.564 92.3692 422.728 92.3382 422.889 92.3092 cv
423.052 92.2802 423.217 92.2532 423.38 92.2282 cv
423.544 92.2032 423.71 92.1792 423.875 92.1592 cv
424.04 92.1382 424.207 92.1182 424.373 92.1022 cv
424.539 92.0852 424.709 92.0702 424.875 92.0572 cv
425.043 92.0442 425.213 92.0332 425.381 92.0252 cv
425.55 92.0162 425.721 92.0102 425.89 92.0052 cv
425.891 92.0052 li
426.06 92.0012 426.233 91.9992 426.403 91.9992 cv
426.573 91.9992 426.746 92.0012 426.916 92.0052 cv
427.085 92.0102 427.256 92.0162 427.425 92.0252 cv
427.593 92.0332 427.763 92.0442 427.931 92.0572 cv
428.098 92.0702 428.267 92.0852 428.433 92.1022 cv
428.599 92.1182 428.767 92.1382 428.932 92.1592 cv
429.096 92.1792 429.263 92.2032 429.426 92.2282 cv
429.589 92.2532 429.755 92.2802 429.917 92.3092 cv
430.079 92.3382 430.242 92.3692 430.403 92.4022 cv
430.564 92.4352 430.726 92.4702 430.885 92.5072 cv
431.044 92.5442 431.205 92.5832 431.363 92.6242 cv
431.52 92.6642 431.68 92.7082 431.836 92.7522 cv
431.992 92.7962 432.15 92.8432 432.304 92.8912 cv
432.458 92.9392 432.614 92.9902 432.767 93.0422 cv
432.92 93.0932 433.075 93.1482 433.226 93.2032 cv
433.377 93.2582 433.529 93.3172 433.679 93.3752 cv
433.828 93.4342 433.979 93.4962 434.127 93.5582 cv
434.274 93.6212 434.423 93.6862 434.569 93.7522 cv
434.714 93.8182 434.861 93.8862 435.005 93.9562 cv
435.149 94.0252 435.294 94.0972 435.436 94.1702 cv
435.578 94.2432 435.721 94.3182 435.861 94.3942 cv
436 94.4702 436.142 94.5492 436.279 94.6282 cv
436.417 94.7072 436.556 94.7902 436.692 94.8722 cv
436.827 94.9542 436.964 95.0402 437.098 95.1262 cv
437.231 95.2112 437.365 95.3002 437.497 95.3882 cv
437.628 95.4772 437.76 95.5692 437.889 95.6612 cv
438.018 95.7522 438.148 95.8472 438.275 95.9422 cv
438.402 96.0372 438.529 96.1342 438.653 96.2322 cv
438.778 96.3302 438.903 96.4312 439.025 96.5312 cv
439.147 96.6322 439.269 96.7362 439.389 96.8392 cv
439.508 96.9432 439.628 97.0492 439.745 97.1552 cv
439.862 97.2622 439.979 97.3712 440.094 97.4802 cv
440.208 97.5892 440.323 97.7012 440.434 97.8132 cv
440.546 97.9252 440.658 98.0392 440.767 98.1542 cv
440.876 98.2682 440.985 98.3852 441.092 98.5022 cv
441.198 98.6192 441.304 98.7392 441.408 98.8592 cv
441.511 98.9782 441.615 99.1012 441.715 99.2232 cv
441.816 99.3452 441.917 99.4702 442.014 99.5942 cv
442.112 99.7192 442.21 99.8462 442.305 99.9732 cv
442.399 100.1 442.494 100.23 442.586 100.359 cv
442.678 100.488 442.769 100.62 442.858 100.751 cv
442.947 100.883 443.035 101.017 443.121 101.151 cv
443.206 101.284 443.292 101.421 443.374 101.557 cv
443.457 101.693 443.539 101.831 443.618 101.969 cv
443.697 102.107 443.776 102.248 443.852 102.388 cv
443.928 102.528 444.003 102.671 444.076 102.813 cv
444.149 102.955 444.221 103.1 444.29 103.244 cv
444.359 103.388 444.428 103.535 444.494 103.68 cv
444.56 103.826 444.625 103.975 444.687 104.123 cv
444.75 104.271 444.811 104.421 444.87 104.571 cv
444.929 104.72 444.987 104.873 445.042 105.024 cv
445.098 105.175 445.152 105.33 445.204 105.482 cv
445.256 105.635 445.306 105.792 445.354 105.946 cv
445.402 106.101 445.449 106.258 445.494 106.414 cv
445.538 106.571 445.581 106.73 445.622 106.887 cv
445.662 107.045 445.702 107.206 445.738 107.365 cv
445.775 107.525 445.81 107.687 445.843 107.847 cv
445.876 108.008 445.907 108.172 445.936 108.334 cv
445.965 108.496 445.993 108.662 446.018 108.825 cv
446.043 108.988 446.066 109.155 446.087 109.32 cv
446.108 109.485 446.127 109.653 446.144 109.818 cv
446.161 109.985 446.176 110.154 446.188 110.321 cv
446.201 110.488 446.212 110.659 446.22 110.827 cv
446.229 110.995 446.236 111.167 446.24 111.336 cv
446.244 111.506 446.246 111.679 446.246 111.849 cv
446.246 112.019 446.244 112.192 446.24 112.362 cv
446.236 112.531 446.229 112.703 446.22 112.871 cv
446.212 113.039 446.201 113.21 446.188 113.377 cv
446.176 113.544 446.161 113.714 446.144 113.88 cv
446.127 114.046 446.108 114.213 446.087 114.378 cv
446.066 114.543 446.043 114.71 446.018 114.873 cv
445.993 115.036 445.965 115.202 445.936 115.364 cv
445.907 115.526 445.876 115.69 445.843 115.851 cv
445.81 116.011 445.775 116.173 445.738 116.333 cv
445.702 116.492 445.662 116.653 445.622 116.811 cv
445.581 116.968 445.538 117.128 445.494 117.284 cv
445.449 117.44 445.402 117.598 445.354 117.752 cv
445.306 117.907 445.256 118.063 445.204 118.216 cv
445.152 118.368 445.098 118.523 445.042 118.674 cv
444.987 118.825 444.929 118.978 444.87 119.127 cv
444.811 119.277 444.75 119.428 444.687 119.575 cv
444.625 119.723 444.56 119.872 444.494 120.018 cv
444.428 120.163 444.359 120.31 444.29 120.454 cv
444.221 120.598 444.149 120.743 444.076 120.885 cv
444.003 121.027 443.928 121.17 443.852 121.31 cv
443.776 121.45 443.697 121.591 443.618 121.729 cv
443.539 121.867 443.457 122.006 443.374 122.141 cv
443.292 122.277 443.206 122.414 443.121 122.547 cv
443.035 122.681 442.947 122.815 442.858 122.947 cv
442.769 123.078 442.678 123.21 442.586 123.339 cv
442.494 123.468 442.399 123.598 442.305 123.725 cv
442.21 123.852 442.112 123.979 442.014 124.104 cv
441.917 124.228 441.816 124.353 441.715 124.475 cv
441.615 124.597 441.511 124.72 441.408 124.839 cv
441.304 124.959 441.198 125.079 441.092 125.196 cv
440.985 125.313 440.876 125.43 440.767 125.544 cv
440.658 125.659 440.546 125.773 440.434 125.885 cv
440.323 125.997 440.208 126.109 440.094 126.218 cv
439.979 126.327 439.862 126.436 439.745 126.543 cv
439.628 126.649 439.508 126.755 439.389 126.859 cv
439.269 126.962 439.147 127.066 439.025 127.167 cv
438.903 127.267 438.778 127.368 438.653 127.466 cv
438.529 127.564 438.402 127.661 438.275 127.756 cv
438.148 127.851 438.018 127.946 437.889 128.037 cv
437.76 128.129 437.628 128.221 437.497 128.31 cv
437.365 128.398 437.231 128.487 437.098 128.573 cv
436.964 128.658 436.827 128.744 436.692 128.826 cv
436.556 128.909 436.417 128.991 436.279 129.07 cv
436.142 129.149 436 129.228 435.861 129.304 cv
435.721 129.38 435.578 129.455 435.436 129.528 cv
435.294 129.601 435.149 129.673 435.005 129.742 cv
434.861 129.812 434.714 129.88 434.569 129.946 cv
434.423 130.012 434.274 130.077 434.127 130.14 cv
433.979 130.202 433.828 130.264 433.679 130.323 cv
433.529 130.382 433.377 130.44 433.226 130.495 cv
433.075 130.55 432.92 130.605 432.767 130.656 cv
432.614 130.708 432.458 130.759 432.304 130.807 cv
432.15 130.855 431.992 130.902 431.836 130.946 cv
431.68 130.991 431.52 131.034 431.363 131.074 cv
431.205 131.115 431.044 131.154 430.885 131.191 cv
430.726 131.228 430.564 131.263 430.403 131.296 cv
430.242 131.329 430.079 131.36 429.917 131.389 cv
429.755 131.418 429.589 131.445 429.426 131.47 cv
429.263 131.495 429.096 131.519 428.932 131.539 cv
428.767 131.56 428.599 131.58 428.433 131.596 cv
428.267 131.613 428.098 131.628 427.931 131.641 cv
427.763 131.654 427.593 131.665 427.425 131.673 cv
427.256 131.682 427.085 131.688 426.916 131.693 cv
426.746 131.697 426.573 131.699 426.403 131.699 cv
426.233 131.699 426.06 131.697 425.891 131.693 cv
425.89 131.693 li
425.721 131.688 425.55 131.682 425.381 131.673 cv
425.213 131.665 425.043 131.654 424.875 131.641 cv
424.709 131.628 424.539 131.613 424.373 131.596 cv
424.207 131.58 424.04 131.56 423.875 131.539 cv
423.71 131.519 423.544 131.495 423.38 131.47 cv
423.217 131.445 423.052 131.418 422.889 131.389 cv
422.728 131.36 422.564 131.329 422.403 131.296 cv
422.243 131.263 422.08 131.228 421.921 131.191 cv
421.762 131.154 421.601 131.115 421.443 131.074 cv
421.286 131.034 421.127 130.991 420.97 130.946 cv
420.815 130.902 420.657 130.855 420.502 130.807 cv
420.348 130.759 420.192 130.708 420.039 130.656 cv
419.886 130.605 419.732 130.55 419.581 130.495 cv
419.43 130.44 419.277 130.382 419.127 130.323 cv
418.978 130.264 418.827 130.202 418.68 130.14 cv
418.532 130.077 418.383 130.012 418.238 129.946 cv
418.237 129.946 li
418.092 129.88 417.945 129.812 417.801 129.742 cv
417.657 129.673 417.512 129.601 417.37 129.528 cv
417.229 129.455 417.085 129.38 416.946 129.304 cv
416.806 129.228 416.665 129.149 416.527 129.07 cv
416.389 128.991 416.25 128.909 416.115 128.826 cv
415.979 128.744 415.842 128.658 415.709 128.573 cv
415.575 128.487 415.441 128.398 415.309 128.31 cv
415.178 128.221 415.046 128.129 414.917 128.037 cv
414.788 127.946 414.658 127.851 414.531 127.756 cv
414.405 127.661 414.277 127.564 414.153 127.466 cv
414.029 127.368 413.904 127.267 413.782 127.167 cv
413.66 127.066 413.537 126.962 413.418 126.859 cv
413.298 126.755 413.178 126.649 413.061 126.543 cv
412.945 126.436 412.827 126.327 412.713 126.218 cv
412.598 126.109 412.484 125.997 412.372 125.885 cv
412.26 125.773 412.148 125.659 412.039 125.544 cv
411.93 125.43 411.821 125.313 411.715 125.196 cv
411.609 125.079 411.502 124.959 411.399 124.839 cv
411.295 124.72 411.192 124.597 411.091 124.475 cv
410.99 124.353 410.89 124.228 410.792 124.104 cv
410.694 123.979 410.596 123.852 410.502 123.725 cv
410.407 123.598 410.312 123.468 410.22 123.339 cv
410.129 123.21 410.037 123.078 409.948 122.947 cv
409.86 122.815 409.771 122.681 409.686 122.547 cv
409.6 122.414 409.515 122.277 409.432 122.141 cv
409.35 122.006 409.268 121.867 409.188 121.729 cv
409.109 121.591 409.03 121.45 408.954 121.31 cv
408.878 121.17 408.803 121.027 408.73 120.885 cv
408.658 120.743 408.586 120.598 408.516 120.454 cv
408.447 120.31 408.378 120.163 408.312 120.018 cv
408.247 119.872 408.181 119.723 408.119 119.575 cv
408.057 119.428 407.995 119.277 407.936 119.127 cv
407.877 118.978 407.819 118.825 407.764 118.674 cv
407.708 118.523 407.654 118.368 407.602 118.216 cv
407.551 118.063 407.5 117.907 407.452 117.752 cv
407.404 117.598 407.357 117.44 407.313 117.284 cv
407.268 117.128 407.225 116.968 407.185 116.811 cv
407.144 116.653 407.105 116.492 407.068 116.333 cv
407.031 116.173 406.996 116.011 406.963 115.851 cv
406.93 115.69 406.899 115.526 406.87 115.364 cv
406.841 115.202 406.814 115.036 406.789 114.873 cv
406.764 114.71 406.74 114.543 406.719 114.378 cv
406.699 114.213 406.679 114.046 406.662 113.88 cv
406.663 113.88 li
406.646 113.714 406.631 113.544 406.618 113.377 cv
406.605 113.21 406.594 113.039 406.586 112.871 cv
406.577 112.703 406.571 112.531 406.566 112.362 cv
406.562 112.192 406.56 112.019 406.56 111.849 cv
405.96 111.849 li
405.36 111.849 li
405.36 112.03 405.362 112.212 405.367 112.392 cv
405.371 112.572 405.378 112.753 405.387 112.932 cv
405.396 113.11 405.408 113.291 405.421 113.468 cv
405.435 113.646 405.451 113.825 405.469 114.001 cv
405.486 114.177 405.507 114.355 405.529 114.53 cv
405.551 114.704 405.576 114.881 405.602 115.055 cv
405.602 115.054 li
405.629 115.228 405.658 115.403 405.689 115.575 cv
405.719 115.747 405.753 115.92 405.788 116.091 cv
405.822 116.261 405.86 116.433 405.899 116.603 cv
405.938 116.771 405.979 116.942 406.022 117.11 cv
406.065 117.277 406.111 117.445 406.158 117.612 cv
406.205 117.777 406.255 117.944 406.306 118.109 cv
406.357 118.272 406.411 118.438 406.466 118.6 cv
406.521 118.762 406.578 118.926 406.637 119.087 cv
406.696 119.247 406.757 119.409 406.82 119.568 cv
406.882 119.726 406.947 119.886 407.014 120.043 cv
407.08 120.199 407.149 120.357 407.219 120.512 cv
407.289 120.667 407.362 120.822 407.435 120.975 cv
407.509 121.128 407.585 121.281 407.662 121.432 cv
407.739 121.583 407.819 121.734 407.9 121.883 cv
407.981 122.031 408.064 122.18 408.148 122.327 cv
408.232 122.473 408.319 122.62 408.407 122.764 cv
408.494 122.908 408.584 123.053 408.675 123.195 cv
408.766 123.337 408.86 123.479 408.954 123.618 cv
409.048 123.758 409.145 123.898 409.242 124.035 cv
409.34 124.172 409.44 124.309 409.541 124.444 cv
409.641 124.578 409.745 124.713 409.848 124.845 cv
409.952 124.977 410.058 125.109 410.165 125.239 cv
410.272 125.368 410.382 125.498 410.491 125.625 cv
410.601 125.751 410.714 125.878 410.827 126.003 cv
410.939 126.127 411.055 126.251 411.171 126.372 cv
411.286 126.494 411.405 126.615 411.523 126.734 cv
411.642 126.852 411.763 126.971 411.885 127.086 cv
412.006 127.202 412.13 127.318 412.254 127.431 cv
412.378 127.543 412.505 127.656 412.632 127.766 cv
412.759 127.876 412.888 127.985 413.018 128.092 cv
413.147 128.199 413.279 128.306 413.411 128.409 cv
413.543 128.513 413.678 128.616 413.813 128.717 cv
413.947 128.818 414.085 128.918 414.221 129.015 cv
414.358 129.113 414.498 129.21 414.638 129.304 cv
414.777 129.398 414.919 129.492 415.061 129.583 cv
415.203 129.674 415.347 129.764 415.491 129.851 cv
415.635 129.939 415.782 130.026 415.929 130.11 cv
416.075 130.194 416.224 130.278 416.373 130.358 cv
416.521 130.439 416.673 130.519 416.823 130.596 cv
416.974 130.673 417.127 130.75 417.28 130.823 cv
417.433 130.897 417.588 130.97 417.743 131.039 cv
417.898 131.109 418.056 131.178 418.212 131.245 cv
418.369 131.311 418.529 131.376 418.687 131.439 cv
418.846 131.502 419.008 131.563 419.168 131.622 cv
419.328 131.68 419.492 131.738 419.654 131.793 cv
419.817 131.848 419.982 131.902 420.146 131.953 cv
420.31 132.004 420.477 132.053 420.642 132.1 cv
420.808 132.148 420.977 132.193 421.144 132.236 cv
421.312 132.279 421.482 132.321 421.651 132.36 cv
421.82 132.399 421.992 132.437 422.162 132.471 cv
422.333 132.506 422.507 132.54 422.678 132.57 cv
422.851 132.601 423.026 132.63 423.199 132.656 cv
423.372 132.683 423.549 132.708 423.723 132.73 cv
423.898 132.752 424.076 132.773 424.252 132.79 cv
424.428 132.808 424.607 132.824 424.784 132.838 cv
424.962 132.851 425.142 132.863 425.32 132.872 cv
425.499 132.881 425.681 132.888 425.86 132.892 cv
426.04 132.897 426.223 132.899 426.403 132.899 cv
426.584 132.899 426.766 132.897 426.946 132.892 cv
427.126 132.888 427.307 132.881 427.486 132.872 cv
427.664 132.863 427.844 132.851 428.022 132.838 cv
428.199 132.824 428.378 132.808 428.554 132.79 cv
428.73 132.773 428.908 132.752 429.083 132.73 cv
429.258 132.708 429.434 132.683 429.608 132.656 cv
429.781 132.63 429.956 132.601 430.128 132.57 cv
430.3 132.54 430.473 132.506 430.644 132.471 cv
430.814 132.437 430.986 132.399 431.155 132.36 cv
431.324 132.321 431.494 132.279 431.662 132.236 cv
431.829 132.193 431.998 132.148 432.164 132.1 cv
432.329 132.053 432.496 132.004 432.661 131.953 cv
432.825 131.902 432.99 131.848 433.152 131.793 cv
433.314 131.738 433.478 131.68 433.639 131.622 cv
433.799 131.563 433.96 131.502 434.119 131.439 cv
434.278 131.376 434.437 131.311 434.594 131.245 cv
434.751 131.178 434.908 131.109 435.063 131.039 cv
435.218 130.97 435.374 130.897 435.526 130.823 cv
435.679 130.75 435.832 130.673 435.983 130.596 cv
436.134 130.519 436.285 130.439 436.434 130.358 cv
436.582 130.278 436.731 130.194 436.878 130.11 cv
437.024 130.026 437.171 129.939 437.315 129.851 cv
437.459 129.764 437.604 129.674 437.745 129.583 cv
437.887 129.492 438.029 129.398 438.169 129.304 cv
438.308 129.21 438.448 129.113 438.585 129.015 cv
438.722 128.918 438.859 128.818 438.994 128.717 cv
439.128 128.616 439.263 128.513 439.395 128.409 cv
439.527 128.306 439.659 128.199 439.789 128.092 cv
439.918 127.985 440.048 127.876 440.174 127.766 cv
440.301 127.656 440.428 127.543 440.552 127.431 cv
440.676 127.318 440.8 127.202 440.922 127.086 cv
441.043 126.971 441.164 126.852 441.283 126.734 cv
441.401 126.615 441.52 126.494 441.636 126.372 cv
441.751 126.251 441.867 126.127 441.98 126.003 cv
442.092 125.878 442.205 125.751 442.315 125.625 cv
442.425 125.498 442.534 125.368 442.641 125.239 cv
442.748 125.109 442.854 124.977 442.958 124.845 cv
443.062 124.713 443.165 124.578 443.266 124.444 cv
443.366 124.309 443.467 124.172 443.564 124.035 cv
443.661 123.898 443.758 123.758 443.852 123.618 cv
443.947 123.479 444.04 123.337 444.131 123.195 cv
444.222 123.053 444.312 122.908 444.4 122.764 cv
444.487 122.62 444.574 122.473 444.658 122.327 cv
444.742 122.18 444.826 122.031 444.906 121.883 cv
444.987 121.734 445.067 121.583 445.144 121.432 cv
445.221 121.281 445.298 121.128 445.371 120.975 cv
445.445 120.822 445.517 120.667 445.587 120.512 cv
445.657 120.357 445.726 120.199 445.793 120.043 cv
445.859 119.886 445.924 119.726 445.987 119.568 cv
446.049 119.409 446.111 119.247 446.169 119.087 cv
446.228 118.926 446.286 118.762 446.341 118.6 cv
446.396 118.438 446.449 118.272 446.5 118.109 cv
446.551 117.944 446.601 117.777 446.648 117.612 cv
446.695 117.445 446.741 117.277 446.784 117.11 cv
446.827 116.942 446.869 116.771 446.907 116.603 cv
446.947 116.433 446.984 116.261 447.019 116.091 cv
447.054 115.92 447.087 115.747 447.118 115.575 cv
447.148 115.403 447.177 115.228 447.204 115.054 cv
447.204 115.055 li
447.23 114.881 447.255 114.704 447.277 114.53 cv
447.299 114.355 447.32 114.177 447.338 114.001 cv
447.356 113.825 447.371 113.646 447.385 113.468 cv
447.398 113.291 447.41 113.11 447.419 112.932 cv
447.428 112.753 447.435 112.572 447.439 112.392 cv
447.444 112.212 447.446 112.03 447.446 111.849 cv
447.446 111.669 447.444 111.486 447.439 111.306 cv
447.435 111.126 447.428 110.945 447.419 110.766 cv
447.41 110.588 447.398 110.407 447.385 110.23 cv
447.371 110.053 447.356 109.874 447.338 109.697 cv
447.32 109.521 447.299 109.343 447.277 109.168 cv
447.255 108.994 447.23 108.817 447.204 108.644 cv
447.177 108.47 447.148 108.295 447.118 108.123 cv
447.087 107.951 447.054 107.778 447.019 107.607 cv
446.984 107.437 446.947 107.265 446.907 107.095 cv
446.869 106.927 446.827 106.756 446.784 106.588 cv
446.741 106.421 446.695 106.253 446.648 106.086 cv
446.601 105.921 446.551 105.754 446.5 105.589 cv
446.449 105.426 446.396 105.26 446.341 105.098 cv
446.286 104.936 446.228 104.772 446.169 104.611 cv
446.111 104.451 446.049 104.289 445.987 104.13 cv
445.924 103.972 445.859 103.812 445.793 103.655 cv
445.726 103.499 445.657 103.341 445.587 103.186 cv
445.517 103.031 445.445 102.876 445.371 102.723 cv
445.298 102.57 445.221 102.417 445.144 102.266 cv
445.067 102.115 444.987 101.964 444.906 101.815 cv
444.826 101.667 444.742 101.518 444.658 101.371 cv
444.574 101.225 444.487 101.078 444.4 100.934 cv
444.312 100.79 444.222 100.645 444.131 100.503 cv
444.04 100.362 443.947 100.219 443.852 100.08 cv
443.758 99.9402 443.661 99.8002 443.564 99.6632 cv
443.467 99.5262 443.366 99.3892 443.266 99.2542 cv
443.165 99.1202 443.062 98.9852 442.958 98.8532 cv
442.854 98.7212 442.748 98.5892 442.641 98.4592 cv
442.534 98.3302 442.425 98.2002 442.315 98.0732 cv
442.205 97.9472 442.092 97.8202 441.98 97.6952 cv
441.867 97.5712 441.751 97.4472 441.636 97.3262 cv
441.52 97.2042 441.401 97.0832 441.283 96.9642 cv
441.164 96.8462 441.043 96.7272 440.922 96.6122 cv
440.8 96.4962 440.676 96.3802 440.552 96.2682 cv
440.428 96.1552 440.301 96.0422 440.174 95.9322 cv
440.048 95.8222 439.918 95.7132 439.789 95.6062 cv
439.659 95.4992 439.527 95.3932 439.395 95.2892 cv
439.263 95.1852 439.128 95.0822 438.994 94.9812 cv
438.859 94.8802 438.722 94.7802 438.585 94.6832 cv
438.448 94.5852 438.308 94.4882 438.169 94.3942 cv
438.029 94.3002 437.887 94.2062 437.745 94.1152 cv
437.604 94.0242 437.459 93.9342 437.315 93.8472 cv
437.171 93.7592 437.024 93.6722 436.878 93.5882 cv
436.731 93.5042 436.582 93.4202 436.434 93.3402 cv
436.285 93.2592 436.134 93.1792 435.983 93.1022 cv
435.832 93.0252 435.679 92.9482 435.526 92.8752 cv
435.374 92.8012 435.218 92.7292 435.063 92.6592 cv
434.908 92.5892 434.751 92.5202 434.594 92.4532 cv
434.437 92.3872 434.278 92.3222 434.119 92.2592 cv
433.96 92.1972 433.799 92.1352 433.639 92.0762 cv
433.478 92.0182 433.314 91.9602 433.152 91.9052 cv
432.99 91.8502 432.825 91.7962 432.661 91.7452 cv
432.496 91.6942 432.329 91.6452 432.164 91.5982 cv
431.998 91.5502 431.829 91.5052 431.662 91.4622 cv
431.494 91.4192 431.324 91.3772 431.155 91.3382 cv
430.986 91.2992 430.814 91.2622 430.644 91.2272 cv
430.473 91.1922 430.3 91.1592 430.128 91.1282 cv
429.956 91.0972 429.781 91.0682 429.608 91.0422 cv
429.434 91.0152 429.258 90.9902 429.083 90.9682 cv
428.908 90.9462 428.73 90.9262 428.554 90.9082 cv
428.378 90.8902 428.199 90.8742 428.022 90.8602 cv
427.844 90.8472 427.664 90.8352 427.486 90.8262 cv
427.307 90.8172 427.126 90.8102 426.946 90.8062 cv
426.766 90.8012 426.584 90.7992 426.403 90.7992 cv
426.223 90.7992 426.04 90.8012 425.86 90.8062 cv
425.681 90.8102 425.499 90.8172 425.32 90.8262 cv
425.142 90.8352 424.962 90.8472 424.784 90.8602 cv
424.607 90.8742 424.428 90.8902 424.252 90.9082 cv
424.076 90.9262 423.898 90.9462 423.723 90.9682 cv
423.549 90.9902 423.372 91.0152 423.199 91.0422 cv
423.026 91.0682 422.851 91.0972 422.678 91.1282 cv
422.507 91.1592 422.333 91.1922 422.162 91.2272 cv
421.992 91.2622 421.82 91.2992 421.651 91.3382 cv
421.482 91.3772 421.312 91.4192 421.144 91.4622 cv
420.977 91.5052 420.808 91.5502 420.642 91.5982 cv
420.477 91.6452 420.31 91.6942 420.146 91.7452 cv
419.982 91.7962 419.817 91.8502 419.654 91.9052 cv
419.492 91.9602 419.328 92.0182 419.168 92.0762 cv
419.008 92.1352 418.846 92.1972 418.687 92.2592 cv
418.529 92.3222 418.369 92.3872 418.212 92.4532 cv
418.056 92.5202 417.898 92.5892 417.743 92.6592 cv
417.588 92.7292 417.433 92.8012 417.28 92.8752 cv
417.127 92.9482 416.974 93.0252 416.823 93.1022 cv
416.673 93.1792 416.521 93.2592 416.373 93.3402 cv
416.224 93.4202 416.075 93.5042 415.929 93.5882 cv
415.782 93.6722 415.635 93.7592 415.491 93.8472 cv
415.347 93.9342 415.203 94.0242 415.061 94.1152 cv
414.919 94.2062 414.777 94.3002 414.638 94.3942 cv
414.498 94.4882 414.358 94.5852 414.221 94.6832 cv
414.085 94.7802 413.947 94.8802 413.813 94.9812 cv
413.678 95.0822 413.543 95.1852 413.411 95.2892 cv
413.279 95.3932 413.147 95.4992 413.018 95.6062 cv
412.888 95.7132 412.759 95.8222 412.632 95.9322 cv
412.505 96.0422 412.378 96.1552 412.254 96.2682 cv
412.13 96.3802 412.006 96.4962 411.885 96.6122 cv
411.763 96.7272 411.642 96.8462 411.523 96.9642 cv
411.405 97.0832 411.286 97.2042 411.171 97.3262 cv
411.055 97.4472 410.939 97.5712 410.827 97.6952 cv
410.714 97.8202 410.601 97.9472 410.491 98.0732 cv
410.382 98.2002 410.272 98.3302 410.165 98.4592 cv
410.058 98.5892 409.952 98.7212 409.848 98.8532 cv
409.745 98.9852 409.641 99.1202 409.541 99.2542 cv
409.44 99.3892 409.34 99.5262 409.242 99.6632 cv
409.145 99.8002 409.048 99.9402 408.954 100.08 cv
408.86 100.219 408.766 100.362 408.675 100.503 cv
408.584 100.645 408.494 100.79 408.407 100.934 cv
408.319 101.078 408.232 101.225 408.148 101.371 cv
408.064 101.518 407.981 101.667 407.9 101.815 cv
407.819 101.964 407.739 102.115 407.662 102.266 cv
407.585 102.417 407.509 102.57 407.435 102.723 cv
407.362 102.876 407.289 103.031 407.219 103.186 cv
407.149 103.341 407.08 103.499 407.014 103.655 cv
406.947 103.812 406.882 103.972 406.82 104.13 cv
406.757 104.289 406.696 104.451 406.637 104.611 cv
406.578 104.772 406.521 104.936 406.466 105.098 cv
406.411 105.26 406.357 105.426 406.306 105.589 cv
406.255 105.754 406.205 105.921 406.158 106.086 cv
406.111 106.253 406.065 106.421 406.022 106.588 cv
405.979 106.756 405.938 106.927 405.899 107.095 cv
405.86 107.265 405.822 107.437 405.788 107.607 cv
405.753 107.778 405.719 107.951 405.689 108.123 cv
405.658 108.295 405.629 108.47 405.602 108.644 cv
405.576 108.817 405.551 108.994 405.529 109.168 cv
405.507 109.343 405.486 109.521 405.469 109.697 cv
405.451 109.874 405.435 110.053 405.421 110.23 cv
405.408 110.407 405.396 110.588 405.387 110.766 cv
405.378 110.945 405.371 111.126 405.367 111.306 cv
405.362 111.486 405.36 111.669 405.36 111.849 cv
cp
404.76 111.849 mo
404.96 111.849 li
404.96 111.665 404.962 111.479 404.967 111.296 cv
404.972 111.113 404.979 110.928 404.988 110.746 cv
404.997 110.564 405.009 110.38 405.023 110.199 cv
405.036 110.019 405.052 109.836 405.071 109.657 cv
405.089 109.478 405.11 109.296 405.132 109.118 cv
405.155 108.94 405.18 108.76 405.207 108.583 cv
405.234 108.407 405.264 108.228 405.295 108.053 cv
405.326 107.878 405.36 107.701 405.396 107.527 cv
405.431 107.353 405.469 107.178 405.509 107.005 cv
405.549 106.833 405.591 106.66 405.635 106.489 cv
405.679 106.319 405.726 106.146 405.774 105.977 cv
405.821 105.809 405.872 105.638 405.924 105.471 cv
405.976 105.304 406.031 105.135 406.087 104.97 cv
406.143 104.804 406.201 104.638 406.261 104.474 cv
406.321 104.311 406.384 104.146 406.448 103.984 cv
406.511 103.822 406.578 103.659 406.645 103.5 cv
406.713 103.34 406.783 103.179 406.854 103.021 cv
406.926 102.864 407 102.705 407.075 102.549 cv
407.15 102.394 407.228 102.237 407.306 102.084 cv
407.385 101.93 407.466 101.776 407.548 101.624 cv
407.63 101.473 407.716 101.321 407.801 101.172 cv
407.887 101.023 407.976 100.873 408.065 100.726 cv
408.154 100.579 408.246 100.432 408.339 100.287 cv
408.431 100.143 408.527 99.9982 408.622 99.8562 cv
408.718 99.7142 408.817 99.5712 408.916 99.4322 cv
409.016 99.2922 409.118 99.1522 409.22 99.0152 cv
409.323 98.8782 409.428 98.7402 409.534 98.6062 cv
409.639 98.4712 409.748 98.3362 409.857 98.2052 cv
409.965 98.0732 410.077 97.9412 410.189 97.8112 cv
410.301 97.6822 410.416 97.5532 410.531 97.4262 cv
410.645 97.3002 410.763 97.1732 410.881 97.0502 cv
410.999 96.9262 411.12 96.8022 411.24 96.6822 cv
411.361 96.5612 411.485 96.4402 411.609 96.3222 cv
411.732 96.2042 411.859 96.0862 411.985 95.9722 cv
412.111 95.8572 412.241 95.7422 412.37 95.6302 cv
412.499 95.5182 412.631 95.4062 412.763 95.2972 cv
412.895 95.1892 413.03 95.0802 413.164 94.9742 cv
413.298 94.8692 413.436 94.7632 413.573 94.6612 cv
413.71 94.5582 413.85 94.4562 413.99 94.3572 cv
414.129 94.2582 414.272 94.1592 414.414 94.0632 cv
414.556 93.9672 414.701 93.8712 414.845 93.7792 cv
414.989 93.6862 415.137 93.5942 415.284 93.5052 cv
415.43 93.4162 415.58 93.3272 415.729 93.2412 cv
415.878 93.1562 416.031 93.0702 416.182 92.9882 cv
416.333 92.9062 416.487 92.8252 416.641 92.7462 cv
416.794 92.6672 416.951 92.5892 417.106 92.5152 cv
417.262 92.4402 417.421 92.3652 417.578 92.2942 cv
417.736 92.2232 417.897 92.1522 418.056 92.0852 cv
418.216 92.0172 418.379 91.9512 418.54 91.8872 cv
418.702 91.8232 418.867 91.7612 419.03 91.7012 cv
419.194 91.6412 419.361 91.5822 419.526 91.5262 cv
419.691 91.4702 419.86 91.4152 420.027 91.3632 cv
420.194 91.3112 420.365 91.2612 420.533 91.2132 cv
420.702 91.1652 420.874 91.1182 421.045 91.0742 cv
421.215 91.0302 421.389 90.9882 421.561 90.9482 cv
421.733 90.9092 421.909 90.8702 422.082 90.8352 cv
422.256 90.7992 422.433 90.7652 422.608 90.7342 cv
422.784 90.7032 422.962 90.6732 423.138 90.6462 cv
423.315 90.6192 423.495 90.5942 423.673 90.5712 cv
423.851 90.5492 424.032 90.5282 424.211 90.5102 cv
424.391 90.4922 424.574 90.4752 424.754 90.4622 cv
424.935 90.4482 425.119 90.4362 425.3 90.4272 cv
425.482 90.4182 425.667 90.4112 425.85 90.4062 cv
426.033 90.4012 426.219 90.3992 426.403 90.3992 cv
426.587 90.3992 426.773 90.4012 426.956 90.4062 cv
427.139 90.4112 427.324 90.4182 427.506 90.4272 cv
427.688 90.4362 427.871 90.4482 428.052 90.4622 cv
428.233 90.4752 428.415 90.4922 428.595 90.5102 cv
428.774 90.5282 428.955 90.5492 429.134 90.5712 cv
429.311 90.5942 429.491 90.6192 429.668 90.6462 cv
429.844 90.6732 430.023 90.7032 430.198 90.7342 cv
430.373 90.7652 430.55 90.7992 430.724 90.8352 cv
430.897 90.8702 431.073 90.9092 431.245 90.9482 cv
431.417 90.9882 431.591 91.0302 431.762 91.0742 cv
431.932 91.1182 432.104 91.1652 432.273 91.2132 cv
432.442 91.2612 432.612 91.3112 432.78 91.3632 cv
432.946 91.4152 433.115 91.4702 433.281 91.5262 cv
433.446 91.5822 433.612 91.6412 433.776 91.7012 cv
433.939 91.7612 434.104 91.8232 434.266 91.8872 cv
434.427 91.9512 434.59 92.0172 434.75 92.0852 cv
434.909 92.1522 435.07 92.2232 435.228 92.2942 cv
435.386 92.3652 435.544 92.4402 435.7 92.5152 cv
435.855 92.5892 436.012 92.6672 436.166 92.7462 cv
436.319 92.8252 436.473 92.9062 436.625 92.9882 cv
436.776 93.0702 436.928 93.1562 437.077 93.2412 cv
437.226 93.3272 437.376 93.4162 437.523 93.5052 cv
437.669 93.5942 437.817 93.6862 437.961 93.7792 cv
438.106 93.8712 438.251 93.9672 438.393 94.0632 cv
438.535 94.1592 438.677 94.2582 438.817 94.3572 cv
438.956 94.4562 439.096 94.5582 439.233 94.6612 cv
439.37 94.7632 439.508 94.8692 439.642 94.9742 cv
439.777 95.0802 439.912 95.1892 440.043 95.2972 cv
440.175 95.4062 440.307 95.5182 440.436 95.6302 cv
440.565 95.7422 440.695 95.8572 440.821 95.9722 cv
440.948 96.0862 441.074 96.2042 441.198 96.3222 cv
441.321 96.4402 441.445 96.5612 441.566 96.6822 cv
441.687 96.8022 441.807 96.9262 441.925 97.0502 cv
442.043 97.1732 442.161 97.3002 442.276 97.4262 cv
442.391 97.5532 442.505 97.6822 442.617 97.8112 cv
442.729 97.9412 442.841 98.0732 442.95 98.2052 cv
443.058 98.3362 443.167 98.4712 443.273 98.6062 cv
443.378 98.7402 443.484 98.8782 443.586 99.0152 cv
443.689 99.1522 443.791 99.2922 443.89 99.4322 cv
443.989 99.5712 444.088 99.7142 444.184 99.8562 cv
444.28 99.9982 444.375 100.143 444.468 100.287 cv
444.56 100.432 444.653 100.579 444.742 100.726 cv
444.831 100.873 444.919 101.023 445.005 101.172 cv
445.091 101.321 445.176 101.473 445.258 101.624 cv
445.34 101.776 445.422 101.93 445.5 102.084 cv
445.579 102.237 445.657 102.394 445.731 102.549 cv
445.806 102.705 445.881 102.864 445.952 103.021 cv
446.023 103.179 446.094 103.34 446.161 103.5 cv
446.229 103.659 446.295 103.822 446.359 103.984 cv
446.423 104.146 446.485 104.311 446.545 104.474 cv
446.605 104.638 446.664 104.804 446.72 104.97 cv
446.776 105.135 446.83 105.304 446.882 105.471 cv
446.934 105.638 446.985 105.809 447.033 105.977 cv
447.081 106.146 447.127 106.319 447.171 106.489 cv
447.215 106.66 447.258 106.833 447.297 107.005 cv
447.337 107.178 447.375 107.353 447.411 107.527 cv
447.446 107.701 447.48 107.878 447.511 108.053 cv
447.543 108.228 447.572 108.407 447.599 108.583 cv
447.626 108.76 447.651 108.94 447.674 109.118 cv
447.697 109.296 447.717 109.478 447.736 109.657 cv
447.754 109.836 447.77 110.019 447.784 110.199 cv
447.798 110.38 447.809 110.564 447.818 110.746 cv
447.828 110.928 447.835 111.113 447.839 111.296 cv
447.844 111.479 447.846 111.665 447.846 111.849 cv
447.846 112.033 447.844 112.219 447.839 112.402 cv
447.835 112.585 447.828 112.77 447.818 112.952 cv
447.809 113.134 447.798 113.318 447.784 113.499 cv
447.77 113.679 447.754 113.862 447.736 114.041 cv
447.717 114.22 447.697 114.402 447.674 114.58 cv
447.651 114.758 447.626 114.938 447.599 115.115 cv
447.572 115.291 447.543 115.47 447.511 115.645 cv
447.48 115.82 447.446 115.997 447.411 116.171 cv
447.375 116.345 447.337 116.52 447.297 116.693 cv
447.258 116.865 447.215 117.038 447.171 117.209 cv
447.127 117.38 447.081 117.552 447.033 117.721 cv
446.985 117.889 446.934 118.06 446.882 118.227 cv
446.83 118.394 446.776 118.563 446.72 118.729 cv
446.664 118.894 446.605 119.06 446.545 119.224 cv
446.485 119.388 446.423 119.552 446.359 119.714 cv
446.295 119.876 446.229 120.039 446.161 120.198 cv
446.094 120.358 446.023 120.519 445.952 120.677 cv
445.881 120.834 445.806 120.993 445.731 121.149 cv
445.657 121.304 445.579 121.461 445.5 121.615 cv
445.422 121.768 445.34 121.922 445.258 122.074 cv
445.176 122.225 445.091 122.377 445.005 122.526 cv
444.919 122.675 444.831 122.825 444.742 122.972 cv
444.653 123.119 444.56 123.266 444.468 123.411 cv
444.375 123.555 444.28 123.7 444.184 123.842 cv
444.088 123.984 443.989 124.127 443.89 124.266 cv
443.791 124.406 443.689 124.546 443.586 124.683 cv
443.484 124.82 443.378 124.958 443.273 125.092 cv
443.167 125.227 443.058 125.362 442.95 125.493 cv
442.841 125.625 442.729 125.757 442.617 125.887 cv
442.505 126.016 442.391 126.145 442.276 126.272 cv
442.161 126.398 442.043 126.525 441.925 126.648 cv
441.807 126.772 441.687 126.896 441.566 127.016 cv
441.445 127.137 441.321 127.258 441.198 127.376 cv
441.074 127.494 440.948 127.612 440.821 127.727 cv
440.695 127.841 440.565 127.956 440.436 128.068 cv
440.307 128.18 440.175 128.292 440.043 128.401 cv
439.912 128.509 439.777 128.618 439.642 128.724 cv
439.508 128.829 439.37 128.935 439.233 129.037 cv
439.096 129.14 438.956 129.242 438.817 129.341 cv
438.677 129.44 438.535 129.539 438.393 129.635 cv
438.251 129.731 438.106 129.827 437.961 129.919 cv
437.817 130.012 437.669 130.104 437.523 130.193 cv
437.376 130.282 437.226 130.371 437.077 130.457 cv
436.928 130.542 436.776 130.628 436.625 130.71 cv
436.473 130.792 436.319 130.874 436.166 130.952 cv
436.012 131.031 435.855 131.109 435.7 131.183 cv
435.544 131.258 435.386 131.333 435.228 131.404 cv
435.07 131.475 434.909 131.546 434.75 131.613 cv
434.59 131.681 434.427 131.747 434.266 131.811 cv
434.104 131.875 433.939 131.937 433.776 131.997 cv
433.612 132.057 433.446 132.116 433.281 132.172 cv
433.115 132.228 432.946 132.283 432.78 132.335 cv
432.612 132.387 432.442 132.437 432.273 132.485 cv
432.104 132.533 431.932 132.58 431.762 132.624 cv
431.591 132.668 431.417 132.71 431.245 132.75 cv
431.073 132.79 430.897 132.828 430.724 132.863 cv
430.55 132.899 430.373 132.933 430.198 132.964 cv
430.023 132.995 429.844 133.025 429.668 133.052 cv
429.491 133.079 429.311 133.104 429.134 133.127 cv
428.955 133.149 428.774 133.17 428.595 133.188 cv
428.415 133.207 428.233 133.223 428.052 133.237 cv
427.871 133.25 427.688 133.262 427.506 133.271 cv
427.324 133.28 427.139 133.287 426.956 133.292 cv
426.773 133.297 426.587 133.299 426.403 133.299 cv
426.219 133.299 426.033 133.297 425.85 133.292 cv
425.667 133.287 425.482 133.28 425.3 133.271 cv
425.119 133.262 424.935 133.25 424.754 133.237 cv
424.574 133.223 424.391 133.207 424.211 133.188 cv
424.032 133.17 423.851 133.149 423.673 133.127 cv
423.495 133.104 423.315 133.079 423.138 133.052 cv
422.962 133.025 422.784 132.995 422.608 132.964 cv
422.433 132.933 422.256 132.899 422.082 132.863 cv
421.909 132.828 421.733 132.79 421.561 132.75 cv
421.389 132.71 421.215 132.668 421.045 132.624 cv
420.874 132.58 420.702 132.533 420.533 132.485 cv
420.365 132.437 420.194 132.387 420.027 132.335 cv
419.86 132.283 419.691 132.228 419.526 132.172 cv
419.361 132.116 419.194 132.057 419.03 131.997 cv
418.867 131.937 418.702 131.875 418.54 131.811 cv
418.379 131.747 418.216 131.681 418.056 131.613 cv
417.897 131.546 417.736 131.475 417.578 131.404 cv
417.421 131.333 417.262 131.258 417.106 131.183 cv
416.951 131.109 416.794 131.031 416.641 130.952 cv
416.487 130.874 416.333 130.792 416.182 130.71 cv
416.031 130.628 415.878 130.542 415.729 130.457 cv
415.58 130.371 415.43 130.282 415.284 130.193 cv
415.137 130.104 414.989 130.012 414.845 129.919 cv
414.701 129.827 414.556 129.731 414.414 129.635 cv
414.272 129.539 414.129 129.44 413.99 129.341 cv
413.85 129.242 413.71 129.14 413.573 129.037 cv
413.436 128.935 413.298 128.829 413.164 128.724 cv
413.03 128.618 412.895 128.509 412.763 128.401 cv
412.631 128.292 412.499 128.18 412.37 128.068 cv
412.241 127.956 412.111 127.841 411.985 127.727 cv
411.859 127.612 411.732 127.494 411.609 127.376 cv
411.485 127.258 411.361 127.137 411.24 127.016 cv
411.12 126.896 410.999 126.772 410.881 126.648 cv
410.763 126.525 410.645 126.398 410.531 126.272 cv
410.416 126.145 410.301 126.016 410.189 125.887 cv
410.077 125.757 409.965 125.625 409.857 125.493 cv
409.748 125.362 409.639 125.227 409.534 125.092 cv
409.428 124.958 409.323 124.82 409.22 124.683 cv
409.118 124.546 409.016 124.406 408.916 124.266 cv
408.817 124.127 408.718 123.984 408.622 123.842 cv
408.527 123.7 408.431 123.555 408.339 123.411 cv
408.246 123.266 408.154 123.119 408.065 122.972 cv
407.976 122.825 407.887 122.675 407.801 122.526 cv
407.716 122.377 407.63 122.225 407.548 122.074 cv
407.466 121.922 407.385 121.768 407.306 121.614 cv
407.228 121.461 407.15 121.304 407.075 121.149 cv
407 120.993 406.926 120.834 406.854 120.677 cv
406.783 120.519 406.713 120.358 406.645 120.198 cv
406.578 120.039 406.511 119.876 406.448 119.714 cv
406.384 119.552 406.321 119.388 406.261 119.224 cv
406.201 119.06 406.143 118.894 406.087 118.729 cv
406.031 118.563 405.976 118.394 405.924 118.227 cv
405.872 118.06 405.821 117.889 405.774 117.721 cv
405.726 117.552 405.679 117.38 405.635 117.209 cv
405.591 117.038 405.549 116.865 405.509 116.693 cv
405.469 116.52 405.431 116.345 405.396 116.171 cv
405.36 115.997 405.326 115.82 405.295 115.645 cv
405.264 115.47 405.234 115.291 405.207 115.115 cv
405.18 114.938 405.155 114.758 405.132 114.58 cv
405.11 114.402 405.089 114.22 405.071 114.041 cv
405.052 113.862 405.036 113.679 405.023 113.499 cv
405.009 113.318 404.997 113.134 404.988 112.952 cv
404.979 112.77 404.972 112.585 404.967 112.402 cv
404.962 112.219 404.96 112.033 404.96 111.849 cv
404.76 111.849 li
404.56 111.849 li
404.56 112.036 404.562 112.226 404.567 112.412 cv
404.572 112.599 404.579 112.787 404.588 112.973 cv
404.598 113.158 404.61 113.345 404.624 113.529 cv
404.638 113.713 404.654 113.899 404.673 114.082 cv
404.691 114.264 404.712 114.449 404.735 114.631 cv
404.758 114.812 404.784 114.995 404.812 115.175 cv
404.839 115.355 404.869 115.537 404.901 115.716 cv
404.933 115.894 404.967 116.074 405.004 116.251 cv
405.04 116.428 405.079 116.607 405.119 116.783 cv
405.16 116.958 405.203 117.135 405.248 117.309 cv
405.292 117.482 405.34 117.658 405.389 117.83 cv
405.438 118.002 405.489 118.175 405.542 118.346 cv
405.595 118.516 405.651 118.688 405.708 118.857 cv
405.765 119.025 405.825 119.195 405.886 119.362 cv
405.947 119.528 406.01 119.696 406.075 119.861 cv
406.14 120.025 406.208 120.191 406.277 120.354 cv
406.346 120.517 406.417 120.681 406.49 120.841 cv
406.563 121.002 406.638 121.164 406.714 121.322 cv
406.791 121.481 406.87 121.64 406.95 121.797 cv
407.03 121.953 407.113 122.11 407.197 122.265 cv
407.28 122.419 407.367 122.574 407.455 122.726 cv
407.542 122.877 407.632 123.03 407.723 123.18 cv
407.814 123.329 407.907 123.479 408.002 123.627 cv
408.096 123.774 408.193 123.921 408.291 124.066 cv
408.389 124.211 408.489 124.356 408.59 124.498 cv
408.691 124.64 408.795 124.783 408.9 124.923 cv
409.004 125.062 409.112 125.202 409.219 125.339 cv
409.327 125.476 409.437 125.614 409.548 125.748 cv
409.659 125.882 409.773 126.017 409.887 126.148 cv
410.001 126.28 410.118 126.412 410.235 126.541 cv
410.352 126.669 410.472 126.798 410.592 126.924 cv
410.712 127.05 410.835 127.176 410.958 127.299 cv
411.081 127.422 411.207 127.545 411.332 127.665 cv
411.458 127.785 411.587 127.905 411.716 128.022 cv
411.845 128.139 411.977 128.257 412.108 128.37 cv
412.24 128.484 412.374 128.598 412.508 128.709 cv
412.643 128.82 412.78 128.931 412.917 129.038 cv
413.054 129.146 413.194 129.253 413.333 129.358 cv
413.473 129.462 413.616 129.566 413.758 129.667 cv
413.9 129.768 414.045 129.869 414.19 129.967 cv
414.334 130.065 414.482 130.162 414.629 130.256 cv
414.776 130.35 414.926 130.444 415.076 130.535 cv
415.225 130.626 415.378 130.716 415.53 130.803 cv
415.682 130.891 415.837 130.978 415.991 131.061 cv
416.145 131.145 416.302 131.228 416.458 131.308 cv
416.615 131.388 416.774 131.467 416.933 131.544 cv
417.091 131.62 417.253 131.696 417.413 131.768 cv
417.574 131.841 417.738 131.913 417.9 131.982 cv
418.063 132.05 418.229 132.118 418.394 132.183 cv
418.558 132.248 418.726 132.312 418.893 132.373 cv
419.059 132.434 419.229 132.494 419.398 132.551 cv
419.566 132.608 419.738 132.664 419.908 132.716 cv
420.078 132.77 420.252 132.821 420.424 132.87 cv
420.596 132.919 420.771 132.966 420.945 133.011 cv
421.119 133.056 421.296 133.099 421.471 133.139 cv
421.647 133.18 421.825 133.219 422.002 133.255 cv
422.179 133.291 422.359 133.326 422.538 133.358 cv
422.717 133.39 422.898 133.42 423.078 133.447 cv
423.258 133.475 423.441 133.5 423.622 133.523 cv
423.804 133.547 423.989 133.568 424.171 133.586 cv
424.354 133.605 424.54 133.621 424.724 133.635 cv
424.908 133.649 425.095 133.661 425.28 133.671 cv
425.465 133.68 425.654 133.687 425.84 133.692 cv
426.027 133.697 426.216 133.699 426.403 133.699 cv
426.59 133.699 426.78 133.697 426.966 133.692 cv
427.153 133.687 427.341 133.68 427.526 133.671 cv
427.711 133.661 427.898 133.649 428.083 133.635 cv
428.266 133.621 428.452 133.605 428.635 133.586 cv
428.818 133.568 429.002 133.547 429.184 133.523 cv
429.365 133.5 429.548 133.475 429.728 133.447 cv
429.908 133.42 430.09 133.39 430.269 133.358 cv
430.447 133.326 430.627 133.291 430.804 133.255 cv
430.981 133.219 431.16 133.18 431.335 133.139 cv
431.51 133.099 431.687 133.056 431.861 133.011 cv
432.035 132.966 432.21 132.919 432.382 132.87 cv
432.554 132.821 432.728 132.77 432.898 132.716 cv
433.068 132.664 433.24 132.608 433.409 132.551 cv
433.577 132.494 433.747 132.434 433.914 132.373 cv
434.08 132.312 434.248 132.248 434.413 132.183 cv
434.577 132.118 434.743 132.05 434.906 131.982 cv
435.068 131.913 435.232 131.841 435.393 131.768 cv
435.553 131.696 435.715 131.62 435.874 131.544 cv
436.032 131.467 436.192 131.388 436.348 131.308 cv
436.504 131.228 436.661 131.145 436.816 131.061 cv
436.97 130.978 437.125 130.891 437.277 130.803 cv
437.428 130.716 437.581 130.626 437.731 130.535 cv
437.88 130.444 438.03 130.35 438.177 130.256 cv
438.324 130.162 438.472 130.065 438.617 129.967 cv
438.761 129.869 438.906 129.768 439.049 129.667 cv
439.191 129.566 439.333 129.462 439.473 129.358 cv
439.612 129.253 439.753 129.146 439.889 129.038 cv
440.026 128.931 440.164 128.82 440.298 128.709 cv
440.432 128.598 440.567 128.484 440.698 128.37 cv
440.83 128.257 440.962 128.139 441.09 128.022 cv
441.219 127.905 441.348 127.785 441.474 127.665 cv
441.6 127.545 441.726 127.422 441.849 127.299 cv
441.972 127.176 442.095 127.05 442.215 126.924 cv
442.335 126.798 442.455 126.669 442.572 126.541 cv
442.689 126.412 442.806 126.28 442.92 126.148 cv
443.034 126.017 443.147 125.882 443.258 125.748 cv
443.369 125.614 443.48 125.476 443.587 125.339 cv
443.695 125.202 443.802 125.062 443.906 124.923 cv
444.011 124.783 444.115 124.64 444.216 124.498 cv
444.317 124.356 444.418 124.211 444.515 124.066 cv
444.613 123.921 444.71 123.774 444.805 123.627 cv
444.899 123.479 444.993 123.329 445.083 123.18 cv
445.174 123.03 445.265 122.877 445.352 122.726 cv
445.439 122.574 445.526 122.419 445.609 122.265 cv
445.693 122.11 445.776 121.953 445.856 121.797 cv
445.936 121.64 446.016 121.481 446.092 121.322 cv
446.168 121.164 446.244 121.002 446.316 120.841 cv
446.389 120.681 446.461 120.517 446.529 120.354 cv
446.598 120.191 446.666 120.025 446.731 119.861 cv
446.796 119.696 446.86 119.528 446.921 119.362 cv
446.982 119.195 447.041 119.025 447.098 118.857 cv
447.155 118.688 447.211 118.516 447.264 118.346 cv
447.317 118.175 447.369 118.002 447.418 117.83 cv
447.467 117.658 447.514 117.482 447.559 117.309 cv
447.603 117.135 447.647 116.958 447.687 116.783 cv
447.728 116.607 447.766 116.428 447.803 116.251 cv
447.839 116.074 447.873 115.894 447.905 115.716 cv
447.937 115.537 447.967 115.355 447.995 115.175 cv
448.022 114.995 448.048 114.812 448.071 114.631 cv
448.094 114.449 448.115 114.264 448.134 114.082 cv
448.152 113.899 448.169 113.713 448.183 113.529 cv
448.197 113.345 448.209 113.158 448.218 112.973 cv
448.227 112.787 448.234 112.599 448.239 112.412 cv
448.244 112.226 448.246 112.036 448.246 111.849 cv
448.246 111.662 448.244 111.472 448.239 111.286 cv
448.234 111.099 448.227 110.911 448.218 110.725 cv
448.209 110.541 448.197 110.353 448.183 110.169 cv
448.169 109.985 448.152 109.799 448.134 109.616 cv
448.115 109.434 448.094 109.249 448.071 109.067 cv
448.048 108.886 448.022 108.703 447.995 108.523 cv
447.967 108.343 447.937 108.161 447.905 107.982 cv
447.873 107.804 447.839 107.624 447.803 107.447 cv
447.766 107.27 447.728 107.091 447.687 106.915 cv
447.647 106.74 447.603 106.563 447.559 106.389 cv
447.514 106.216 447.467 106.04 447.418 105.868 cv
447.369 105.696 447.317 105.523 447.264 105.352 cv
447.211 105.182 447.155 105.01 447.098 104.841 cv
447.041 104.673 446.982 104.503 446.921 104.336 cv
446.86 104.17 446.796 104.002 446.731 103.837 cv
446.666 103.673 446.598 103.507 446.529 103.344 cv
446.461 103.181 446.389 103.017 446.316 102.857 cv
446.244 102.696 446.168 102.534 446.092 102.376 cv
446.016 102.217 445.936 102.058 445.856 101.901 cv
445.776 101.745 445.693 101.588 445.609 101.433 cv
445.526 101.279 445.439 101.124 445.352 100.972 cv
445.265 100.821 445.174 100.668 445.083 100.518 cv
444.993 100.369 444.899 100.219 444.805 100.071 cv
444.71 99.9252 444.613 99.7772 444.515 99.6322 cv
444.418 99.4872 444.317 99.3422 444.216 99.2002 cv
444.115 99.0582 444.011 98.9152 443.906 98.7752 cv
443.802 98.6362 443.695 98.4962 443.587 98.3592 cv
443.48 98.2222 443.369 98.0842 443.258 97.9502 cv
443.147 97.8162 443.034 97.6812 442.92 97.5502 cv
442.806 97.4182 442.689 97.2862 442.572 97.1572 cv
442.455 97.0292 442.335 96.9002 442.215 96.7742 cv
442.095 96.6482 441.972 96.5222 441.849 96.3992 cv
441.726 96.2762 441.6 96.1532 441.474 96.0332 cv
441.348 95.9132 441.219 95.7932 441.09 95.6762 cv
440.962 95.5592 440.83 95.4422 440.698 95.3282 cv
440.567 95.2142 440.432 95.1002 440.298 94.9892 cv
440.164 94.8782 440.026 94.7672 439.889 94.6602 cv
439.753 94.5522 439.612 94.4452 439.473 94.3402 cv
439.333 94.2362 439.191 94.1322 439.049 94.0312 cv
438.906 93.9302 438.761 93.8292 438.617 93.7312 cv
438.472 93.6342 438.324 93.5362 438.177 93.4422 cv
438.03 93.3482 437.88 93.2542 437.731 93.1632 cv
437.581 93.0722 437.428 92.9822 437.277 92.8952 cv
437.125 92.8072 436.97 92.7212 436.816 92.6372 cv
436.661 92.5532 436.504 92.4702 436.348 92.3902 cv
436.192 92.3102 436.032 92.2312 435.874 92.1542 cv
435.715 92.0782 435.553 92.0022 435.393 91.9302 cv
435.232 91.8572 435.068 91.7852 434.906 91.7172 cv
434.743 91.6482 434.577 91.5802 434.413 91.5152 cv
434.248 91.4502 434.08 91.3862 433.914 91.3252 cv
433.747 91.2642 433.577 91.2042 433.409 91.1472 cv
433.24 91.0902 433.068 91.0342 432.898 90.9822 cv
432.728 90.9282 432.554 90.8772 432.382 90.8282 cv
432.21 90.7792 432.035 90.7322 431.861 90.6872 cv
431.687 90.6422 431.51 90.5992 431.335 90.5592 cv
431.16 90.5182 430.981 90.4792 430.804 90.4432 cv
430.627 90.4072 430.447 90.3722 430.269 90.3402 cv
430.09 90.3082 429.908 90.2782 429.728 90.2512 cv
429.548 90.2232 429.365 90.1982 429.184 90.1752 cv
429.002 90.1512 428.818 90.1302 428.635 90.1122 cv
428.452 90.0932 428.266 90.0772 428.083 90.0632 cv
427.898 90.0492 427.711 90.0372 427.526 90.0272 cv
427.341 90.0182 427.153 90.0112 426.966 90.0062 cv
426.78 90.0012 426.59 89.9992 426.403 89.9992 cv
426.216 89.9992 426.027 90.0012 425.84 90.0062 cv
425.654 90.0112 425.465 90.0182 425.28 90.0272 cv
425.095 90.0372 424.908 90.0492 424.724 90.0632 cv
424.54 90.0772 424.354 90.0932 424.171 90.1122 cv
423.989 90.1302 423.804 90.1512 423.622 90.1752 cv
423.441 90.1982 423.258 90.2232 423.078 90.2512 cv
422.898 90.2782 422.717 90.3082 422.538 90.3402 cv
422.359 90.3722 422.179 90.4072 422.002 90.4432 cv
421.825 90.4792 421.647 90.5182 421.471 90.5592 cv
421.296 90.5992 421.119 90.6422 420.945 90.6872 cv
420.771 90.7322 420.596 90.7792 420.424 90.8282 cv
420.252 90.8772 420.078 90.9282 419.908 90.9822 cv
419.738 91.0342 419.566 91.0902 419.398 91.1472 cv
419.229 91.2042 419.059 91.2642 418.893 91.3252 cv
418.726 91.3862 418.558 91.4502 418.394 91.5152 cv
418.229 91.5802 418.063 91.6482 417.9 91.7172 cv
417.738 91.7852 417.574 91.8572 417.413 91.9302 cv
417.253 92.0022 417.091 92.0782 416.933 92.1542 cv
416.774 92.2312 416.615 92.3102 416.458 92.3902 cv
416.302 92.4702 416.145 92.5532 415.991 92.6372 cv
415.837 92.7212 415.682 92.8072 415.53 92.8952 cv
415.378 92.9822 415.225 93.0722 415.076 93.1632 cv
414.926 93.2542 414.776 93.3482 414.629 93.4422 cv
414.482 93.5362 414.334 93.6342 414.19 93.7312 cv
414.045 93.8292 413.9 93.9302 413.758 94.0312 cv
413.616 94.1322 413.473 94.2362 413.333 94.3402 cv
413.194 94.4452 413.054 94.5522 412.917 94.6602 cv
412.78 94.7672 412.643 94.8782 412.508 94.9892 cv
412.374 95.1002 412.24 95.2142 412.108 95.3282 cv
411.977 95.4422 411.845 95.5592 411.716 95.6762 cv
411.587 95.7932 411.458 95.9132 411.332 96.0332 cv
411.207 96.1532 411.081 96.2762 410.958 96.3992 cv
410.835 96.5222 410.712 96.6482 410.592 96.7742 cv
410.472 96.9002 410.352 97.0292 410.235 97.1572 cv
410.118 97.2862 410.001 97.4182 409.887 97.5502 cv
409.773 97.6812 409.659 97.8162 409.548 97.9502 cv
409.437 98.0842 409.327 98.2222 409.219 98.3592 cv
409.112 98.4962 409.004 98.6362 408.9 98.7752 cv
408.795 98.9152 408.691 99.0582 408.59 99.2002 cv
408.489 99.3422 408.389 99.4872 408.291 99.6322 cv
408.193 99.7772 408.096 99.9252 408.002 100.071 cv
407.907 100.219 407.814 100.369 407.723 100.518 cv
407.632 100.668 407.542 100.821 407.455 100.972 cv
407.367 101.124 407.28 101.279 407.197 101.433 cv
407.113 101.588 407.03 101.745 406.95 101.901 cv
406.87 102.058 406.791 102.217 406.714 102.376 cv
406.638 102.534 406.563 102.696 406.49 102.857 cv
406.417 103.017 406.346 103.181 406.277 103.344 cv
406.208 103.507 406.14 103.673 406.075 103.837 cv
406.01 104.002 405.947 104.17 405.886 104.336 cv
405.825 104.503 405.765 104.673 405.708 104.841 cv
405.651 105.01 405.595 105.182 405.542 105.352 cv
405.489 105.523 405.438 105.696 405.389 105.868 cv
405.34 106.04 405.292 106.216 405.248 106.389 cv
405.203 106.563 405.16 106.74 405.119 106.915 cv
405.079 107.091 405.04 107.27 405.004 107.447 cv
404.967 107.624 404.933 107.804 404.901 107.982 cv
404.869 108.161 404.839 108.343 404.812 108.523 cv
404.784 108.703 404.758 108.886 404.735 109.067 cv
404.712 109.249 404.691 109.434 404.673 109.616 cv
404.654 109.799 404.638 109.985 404.624 110.169 cv
404.61 110.353 404.598 110.541 404.588 110.725 cv
404.579 110.911 404.572 111.099 404.567 111.286 cv
404.562 111.472 404.56 111.662 404.56 111.849 cv
cp
.21602 .207454 .209307 rgb
f
grestore
gsave
-89.0674 668.99 mo
522.932 668.99 li
522.932 -123.01 li
-89.0674 -123.01 li
-89.0674 668.99 li
clp
415.89 111.833 mo
415.89 106.034 420.589 101.333 426.387 101.333 cv
432.184 101.333 436.883 106.034 436.883 111.833 cv
436.883 117.632 432.184 122.333 426.387 122.333 cv
420.589 122.333 415.89 117.632 415.89 111.833 cv
.783545 .790168 .797695 rgb
ef
416.29 111.833 mo
416.89 111.833 li
416.893 111.587 li
416.902 111.343 li
416.918 111.101 li
416.939 110.86 li
416.966 110.622 li
416.999 110.385 li
417.038 110.15 li
417.083 109.917 li
417.133 109.687 li
417.189 109.458 li
417.25 109.232 li
417.317 109.008 li
417.317 109.007 li
417.389 108.786 li
417.466 108.566 li
417.548 108.35 li
417.636 108.135 li
417.728 107.924 li
417.826 107.715 li
417.928 107.509 li
418.036 107.305 li
418.148 107.105 li
418.264 106.908 li
418.386 106.713 li
418.511 106.522 li
418.642 106.334 li
418.776 106.149 li
418.915 105.968 li
419.058 105.79 li
419.206 105.616 li
419.357 105.445 li
419.512 105.279 li
419.672 105.115 li
419.835 104.956 li
420.002 104.801 li
420.172 104.649 li
420.346 104.502 li
420.524 104.359 li
420.705 104.22 li
420.89 104.085 li
421.078 103.955 li
421.269 103.829 li
421.463 103.708 li
421.66 103.591 li
421.861 103.479 li
422.064 103.372 li
422.27 103.269 li
422.479 103.172 li
422.69 103.079 li
422.905 102.992 li
423.121 102.909 li
423.341 102.832 li
423.562 102.76 li
423.786 102.693 li
424.013 102.632 li
424.241 102.576 li
424.472 102.526 li
424.704 102.481 li
424.939 102.442 li
425.176 102.409 li
425.414 102.382 li
425.655 102.361 li
425.897 102.345 li
426.141 102.336 li
426.387 102.333 li
426.632 102.336 li
426.876 102.345 li
427.118 102.361 li
427.359 102.382 li
427.597 102.409 li
427.834 102.442 li
428.069 102.481 li
428.301 102.526 li
428.532 102.576 li
428.761 102.632 li
428.987 102.693 li
429.211 102.76 li
429.432 102.832 li
429.652 102.909 li
429.868 102.992 li
430.083 103.079 li
430.294 103.172 li
430.503 103.269 li
430.709 103.372 li
430.912 103.479 li
431.113 103.591 li
431.31 103.708 li
431.504 103.829 li
431.695 103.955 li
431.883 104.085 li
432.068 104.22 li
432.249 104.359 li
432.427 104.502 li
432.601 104.649 li
432.771 104.801 li
432.938 104.956 li
433.101 105.115 li
433.261 105.279 li
433.416 105.445 li
433.567 105.616 li
433.715 105.79 li
433.858 105.968 li
433.997 106.149 li
434.131 106.334 li
434.262 106.522 li
434.388 106.713 li
434.509 106.908 li
434.625 107.105 li
434.737 107.305 li
434.845 107.509 li
434.947 107.715 li
435.045 107.924 li
435.137 108.135 li
435.225 108.35 li
435.307 108.566 li
435.384 108.786 li
435.456 109.007 li
435.456 109.008 li
435.523 109.232 li
435.584 109.458 li
435.64 109.687 li
435.69 109.917 li
435.735 110.15 li
435.774 110.385 li
435.807 110.622 li
435.834 110.86 li
435.855 111.101 li
435.871 111.343 li
435.88 111.587 li
435.883 111.833 li
435.88 112.079 li
435.871 112.323 li
435.855 112.565 li
435.834 112.806 li
435.807 113.044 li
435.774 113.281 li
435.735 113.516 li
435.69 113.749 li
435.64 113.979 li
435.584 114.208 li
435.523 114.434 li
435.456 114.658 li
435.456 114.659 li
435.384 114.88 li
435.307 115.1 li
435.225 115.316 li
435.137 115.531 li
435.045 115.742 li
434.947 115.951 li
434.845 116.157 li
434.737 116.361 li
434.625 116.561 li
434.509 116.758 li
434.388 116.953 li
434.262 117.144 li
434.131 117.332 li
433.997 117.517 li
433.858 117.698 li
433.715 117.876 li
433.567 118.05 li
433.416 118.221 li
433.261 118.387 li
433.101 118.551 li
432.938 118.71 li
432.771 118.865 li
432.601 119.017 li
432.427 119.164 li
432.249 119.307 li
432.068 119.446 li
431.883 119.581 li
431.695 119.711 li
431.504 119.837 li
431.31 119.958 li
431.113 120.075 li
430.912 120.187 li
430.709 120.294 li
430.503 120.397 li
430.294 120.494 li
430.083 120.587 li
429.868 120.674 li
429.652 120.757 li
429.432 120.834 li
429.211 120.906 li
428.987 120.973 li
428.761 121.034 li
428.532 121.09 li
428.301 121.14 li
428.069 121.185 li
427.834 121.224 li
427.597 121.257 li
427.359 121.284 li
427.118 121.305 li
426.876 121.321 li
426.632 121.33 li
426.387 121.333 li
426.141 121.33 li
425.897 121.321 li
425.655 121.305 li
425.414 121.284 li
425.176 121.257 li
424.939 121.224 li
424.704 121.185 li
424.472 121.14 li
424.241 121.09 li
424.013 121.034 li
423.786 120.973 li
423.562 120.906 li
423.341 120.834 li
423.121 120.757 li
422.905 120.674 li
422.69 120.587 li
422.479 120.494 li
422.27 120.397 li
422.064 120.294 li
421.861 120.187 li
421.66 120.075 li
421.463 119.958 li
421.269 119.837 li
421.078 119.711 li
420.89 119.581 li
420.705 119.446 li
420.524 119.307 li
420.346 119.164 li
420.172 119.017 li
420.002 118.865 li
419.835 118.71 li
419.672 118.551 li
419.512 118.387 li
419.357 118.221 li
419.206 118.05 li
419.058 117.876 li
418.915 117.698 li
418.776 117.517 li
418.642 117.332 li
418.511 117.144 li
418.386 116.953 li
418.264 116.758 li
418.148 116.561 li
418.036 116.361 li
417.928 116.157 li
417.826 115.951 li
417.728 115.742 li
417.636 115.531 li
417.548 115.316 li
417.466 115.1 li
417.389 114.88 li
417.317 114.659 li
417.317 114.658 li
417.25 114.434 li
417.189 114.208 li
417.133 113.979 li
417.083 113.749 li
417.038 113.516 li
416.999 113.281 li
416.966 113.044 li
416.939 112.806 li
416.918 112.565 li
416.902 112.323 li
416.893 112.079 li
416.89 111.833 li
416.29 111.833 li
415.69 111.833 li
415.69 111.925 415.691 112.017 415.694 112.109 cv
415.696 112.2 415.699 112.292 415.704 112.383 cv
415.709 112.474 415.714 112.566 415.721 112.656 cv
415.728 112.746 415.736 112.837 415.745 112.927 cv
415.754 113.016 415.765 113.106 415.776 113.196 cv
415.776 113.195 li
415.813 113.462 li
415.857 113.727 li
415.907 113.989 li
415.964 114.249 li
416.027 114.507 li
416.096 114.762 li
416.171 115.015 li
416.252 115.265 li
416.339 115.512 li
416.432 115.756 li
416.531 115.998 li
416.635 116.237 li
416.745 116.472 li
416.86 116.704 li
416.981 116.933 li
417.107 117.159 li
417.239 117.381 li
417.375 117.6 li
417.517 117.816 li
417.664 118.027 li
417.815 118.235 li
417.972 118.439 li
418.133 118.639 li
418.298 118.835 li
418.469 119.027 li
418.644 119.215 li
418.823 119.399 li
419.007 119.578 li
419.194 119.753 li
419.386 119.924 li
419.582 120.09 li
419.783 120.251 li
419.782 120.251 li
419.986 120.407 li
420.194 120.559 li
420.406 120.705 li
420.621 120.847 li
420.84 120.984 li
421.062 121.115 li
421.288 121.241 li
421.517 121.362 li
421.749 121.478 li
421.984 121.588 li
422.223 121.692 li
422.464 121.791 li
422.709 121.884 li
422.956 121.971 li
423.206 122.052 li
423.458 122.127 li
423.713 122.196 li
423.971 122.259 li
424.231 122.316 li
424.493 122.366 li
424.758 122.41 li
425.024 122.447 li
425.293 122.478 li
425.383 122.487 425.474 122.495 425.564 122.502 cv
425.654 122.509 425.746 122.514 425.836 122.519 cv
425.927 122.524 426.019 122.527 426.111 122.53 cv
426.202 122.532 426.295 122.533 426.387 122.533 cv
426.478 122.533 426.571 122.532 426.663 122.53 cv
426.754 122.527 426.846 122.524 426.937 122.519 cv
427.027 122.514 427.119 122.509 427.209 122.502 cv
427.299 122.495 427.39 122.487 427.48 122.478 cv
427.749 122.447 li
428.015 122.41 li
428.28 122.366 li
428.542 122.316 li
428.802 122.259 li
429.06 122.196 li
429.315 122.127 li
429.567 122.052 li
429.817 121.971 li
430.064 121.884 li
430.309 121.791 li
430.55 121.692 li
430.789 121.588 li
431.024 121.478 li
431.256 121.362 li
431.485 121.241 li
431.711 121.115 li
431.933 120.984 li
432.152 120.847 li
432.367 120.705 li
432.579 120.559 li
432.787 120.407 li
432.991 120.251 li
433.191 120.09 li
433.387 119.924 li
433.579 119.753 li
433.767 119.578 li
433.95 119.399 li
434.129 119.215 li
434.304 119.027 li
434.475 118.835 li
434.64 118.639 li
434.802 118.439 li
434.958 118.235 li
435.11 118.027 li
435.256 117.816 li
435.398 117.6 li
435.534 117.381 li
435.666 117.159 li
435.792 116.933 li
435.913 116.704 li
436.028 116.472 li
436.138 116.237 li
436.242 115.998 li
436.341 115.756 li
436.434 115.512 li
436.521 115.265 li
436.602 115.015 li
436.677 114.762 li
436.746 114.507 li
436.809 114.249 li
436.866 113.989 li
436.916 113.727 li
436.96 113.462 li
436.997 113.195 li
436.997 113.196 li
437.008 113.106 437.019 113.016 437.028 112.927 cv
437.037 112.837 437.045 112.746 437.052 112.656 cv
437.059 112.566 437.065 112.474 437.069 112.383 cv
437.074 112.292 437.077 112.2 437.08 112.109 cv
437.082 112.017 437.083 111.925 437.083 111.833 cv
437.083 111.741 437.082 111.649 437.08 111.557 cv
437.077 111.466 437.074 111.374 437.069 111.283 cv
437.065 111.192 437.059 111.1 437.052 111.01 cv
437.045 110.92 437.037 110.829 437.028 110.739 cv
437.019 110.65 437.008 110.56 436.997 110.47 cv
436.997 110.471 li
436.96 110.204 li
436.916 109.939 li
436.866 109.677 li
436.809 109.417 li
436.746 109.159 li
436.677 108.904 li
436.602 108.651 li
436.521 108.401 li
436.434 108.154 li
436.341 107.91 li
436.242 107.668 li
436.138 107.429 li
436.028 107.194 li
435.913 106.962 li
435.792 106.733 li
435.666 106.507 li
435.534 106.285 li
435.398 106.066 li
435.256 105.85 li
435.11 105.639 li
434.958 105.431 li
434.802 105.227 li
434.64 105.027 li
434.475 104.831 li
434.304 104.639 li
434.129 104.451 li
433.95 104.267 li
433.767 104.088 li
433.579 103.913 li
433.387 103.742 li
433.191 103.576 li
432.991 103.415 li
432.787 103.259 li
432.579 103.107 li
432.367 102.961 li
432.152 102.819 li
431.933 102.682 li
431.711 102.551 li
431.485 102.425 li
431.256 102.304 li
431.024 102.188 li
430.789 102.078 li
430.55 101.974 li
430.309 101.875 li
430.064 101.782 li
429.817 101.695 li
429.567 101.614 li
429.315 101.539 li
429.06 101.47 li
428.802 101.407 li
428.542 101.35 li
428.28 101.3 li
428.015 101.256 li
427.749 101.219 li
427.48 101.188 li
427.39 101.179 427.299 101.171 427.209 101.164 cv
427.119 101.157 427.027 101.152 426.937 101.147 cv
426.846 101.142 426.754 101.139 426.663 101.136 cv
426.571 101.134 426.478 101.133 426.387 101.133 cv
426.295 101.133 426.202 101.134 426.111 101.136 cv
426.019 101.139 425.927 101.142 425.836 101.147 cv
425.746 101.152 425.654 101.157 425.564 101.164 cv
425.474 101.171 425.383 101.179 425.293 101.188 cv
425.024 101.219 li
424.758 101.256 li
424.493 101.3 li
424.231 101.35 li
423.971 101.407 li
423.713 101.47 li
423.458 101.539 li
423.206 101.614 li
422.956 101.695 li
422.709 101.782 li
422.464 101.875 li
422.223 101.974 li
421.984 102.078 li
421.749 102.188 li
421.517 102.304 li
421.288 102.425 li
421.062 102.551 li
420.84 102.682 li
420.621 102.819 li
420.406 102.961 li
420.194 103.107 li
419.987 103.259 li
419.782 103.415 li
419.783 103.415 li
419.582 103.576 li
419.386 103.742 li
419.194 103.913 li
419.007 104.088 li
418.823 104.267 li
418.644 104.451 li
418.469 104.639 li
418.298 104.831 li
418.133 105.027 li
417.971 105.227 li
417.815 105.431 li
417.664 105.639 li
417.517 105.85 li
417.375 106.066 li
417.239 106.285 li
417.107 106.507 li
416.981 106.733 li
416.86 106.962 li
416.745 107.194 li
416.635 107.429 li
416.531 107.668 li
416.432 107.91 li
416.339 108.154 li
416.252 108.401 li
416.171 108.651 li
416.096 108.904 li
416.027 109.159 li
415.964 109.417 li
415.907 109.677 li
415.857 109.939 li
415.813 110.204 li
415.776 110.471 li
415.776 110.47 li
415.765 110.56 415.754 110.65 415.745 110.739 cv
415.736 110.829 415.728 110.92 415.721 111.01 cv
415.714 111.1 415.709 111.192 415.704 111.283 cv
415.699 111.374 415.696 111.466 415.694 111.557 cv
415.691 111.649 415.69 111.741 415.69 111.833 cv
cp
415.09 111.833 mo
415.29 111.833 li
415.29 111.738 415.291 111.642 415.294 111.547 cv
415.296 111.452 415.3 111.357 415.304 111.262 cv
415.309 111.168 415.315 111.073 415.322 110.98 cv
415.329 110.886 415.338 110.792 415.347 110.699 cv
415.357 110.606 415.367 110.512 415.379 110.42 cv
415.391 110.328 415.404 110.235 415.418 110.143 cv
415.432 110.052 415.447 109.96 415.463 109.869 cv
415.479 109.778 415.497 109.687 415.515 109.597 cv
415.534 109.507 415.554 109.416 415.574 109.327 cv
415.639 109.059 li
415.711 108.795 li
415.789 108.532 li
415.873 108.273 li
415.963 108.017 li
416.06 107.763 li
416.162 107.512 li
416.27 107.265 li
416.385 107.02 li
416.504 106.779 li
416.63 106.542 li
416.76 106.308 li
416.897 106.077 li
417.038 105.85 li
417.185 105.627 li
417.338 105.407 li
417.495 105.191 li
417.657 104.98 li
417.824 104.772 li
417.996 104.569 li
418.173 104.37 li
418.354 104.175 li
418.54 103.984 li
418.73 103.798 li
418.925 103.617 li
419.124 103.44 li
419.328 103.268 li
419.535 103.101 li
419.747 102.939 li
419.962 102.781 li
420.182 102.629 li
420.405 102.482 li
420.632 102.34 li
420.863 102.204 li
421.097 102.073 li
421.334 101.948 li
421.575 101.828 li
421.82 101.714 li
422.067 101.606 li
422.318 101.503 li
422.571 101.407 li
422.828 101.316 li
423.087 101.232 li
423.349 101.154 li
423.614 101.083 li
423.881 101.017 li
423.97 100.997 424.061 100.977 424.151 100.958 cv
424.241 100.94 424.332 100.923 424.423 100.906 cv
424.514 100.89 424.606 100.875 424.697 100.861 cv
424.789 100.847 424.882 100.834 424.974 100.822 cv
425.066 100.81 425.16 100.8 425.253 100.79 cv
425.346 100.781 425.44 100.772 425.533 100.765 cv
425.627 100.758 425.722 100.752 425.816 100.747 cv
425.91 100.743 426.006 100.739 426.1 100.737 cv
426.195 100.734 426.292 100.733 426.387 100.733 cv
426.482 100.733 426.578 100.734 426.673 100.737 cv
426.767 100.739 426.863 100.743 426.957 100.747 cv
427.051 100.752 427.146 100.758 427.24 100.765 cv
427.333 100.772 427.427 100.781 427.52 100.79 cv
427.613 100.8 427.707 100.81 427.799 100.822 cv
427.891 100.834 427.984 100.847 428.076 100.861 cv
428.167 100.875 428.259 100.89 428.35 100.906 cv
428.441 100.923 428.532 100.94 428.622 100.958 cv
428.712 100.977 428.803 100.997 428.892 101.017 cv
429.159 101.083 li
429.424 101.154 li
429.686 101.232 li
429.945 101.316 li
430.202 101.407 li
430.455 101.503 li
430.706 101.606 li
430.953 101.714 li
431.198 101.828 li
431.439 101.948 li
431.676 102.073 li
431.91 102.204 li
432.141 102.34 li
432.368 102.482 li
432.591 102.629 li
432.811 102.781 li
433.026 102.939 li
433.238 103.101 li
433.445 103.268 li
433.649 103.44 li
433.848 103.617 li
434.043 103.798 li
434.233 103.984 li
434.419 104.175 li
434.6 104.37 li
434.777 104.569 li
434.949 104.772 li
435.116 104.98 li
435.278 105.191 li
435.436 105.407 li
435.588 105.627 li
435.735 105.85 li
435.876 106.077 li
436.013 106.308 li
436.143 106.542 li
436.269 106.779 li
436.389 107.02 li
436.503 107.265 li
436.611 107.512 li
436.713 107.763 li
436.81 108.017 li
436.9 108.273 li
436.984 108.532 li
437.062 108.795 li
437.134 109.059 li
437.199 109.327 li
437.22 109.416 437.239 109.507 437.258 109.597 cv
437.276 109.687 437.294 109.778 437.31 109.869 cv
437.326 109.96 437.341 110.052 437.355 110.143 cv
437.369 110.235 437.382 110.328 437.394 110.42 cv
437.406 110.512 437.416 110.606 437.426 110.699 cv
437.435 110.792 437.444 110.886 437.451 110.98 cv
437.458 111.073 437.464 111.168 437.469 111.262 cv
437.473 111.357 437.477 111.452 437.479 111.547 cv
437.482 111.642 437.483 111.738 437.483 111.833 cv
437.483 111.928 437.482 112.024 437.479 112.119 cv
437.477 112.214 437.473 112.309 437.469 112.404 cv
437.464 112.498 437.458 112.593 437.451 112.686 cv
437.444 112.78 437.435 112.874 437.426 112.967 cv
437.416 113.06 437.406 113.154 437.394 113.246 cv
437.382 113.338 437.369 113.431 437.355 113.523 cv
437.341 113.614 437.326 113.706 437.31 113.797 cv
437.294 113.888 437.276 113.979 437.258 114.069 cv
437.239 114.159 437.22 114.25 437.199 114.339 cv
437.134 114.607 li
437.062 114.871 li
436.984 115.134 li
436.9 115.393 li
436.81 115.649 li
436.713 115.903 li
436.611 116.154 li
436.503 116.401 li
436.389 116.646 li
436.269 116.887 li
436.143 117.124 li
436.013 117.358 li
435.876 117.589 li
435.735 117.816 li
435.588 118.039 li
435.436 118.259 li
435.278 118.475 li
435.116 118.686 li
434.949 118.894 li
434.777 119.097 li
434.6 119.296 li
434.419 119.491 li
434.233 119.682 li
434.043 119.868 li
433.848 120.049 li
433.649 120.226 li
433.445 120.398 li
433.238 120.565 li
433.026 120.727 li
432.811 120.885 li
432.591 121.037 li
432.368 121.184 li
432.141 121.326 li
431.91 121.462 li
431.676 121.593 li
431.439 121.718 li
431.198 121.838 li
430.953 121.952 li
430.706 122.06 li
430.455 122.163 li
430.202 122.259 li
429.945 122.35 li
429.686 122.434 li
429.424 122.512 li
429.159 122.583 li
428.892 122.649 li
428.803 122.669 428.712 122.689 428.622 122.708 cv
428.532 122.726 428.441 122.743 428.35 122.76 cv
428.259 122.776 428.167 122.791 428.076 122.805 cv
427.984 122.819 427.891 122.832 427.799 122.844 cv
427.707 122.856 427.613 122.866 427.52 122.876 cv
427.427 122.885 427.333 122.894 427.24 122.901 cv
427.146 122.908 427.051 122.914 426.957 122.919 cv
426.863 122.923 426.767 122.927 426.673 122.929 cv
426.578 122.932 426.482 122.933 426.387 122.933 cv
426.292 122.933 426.195 122.932 426.1 122.929 cv
426.006 122.927 425.91 122.923 425.816 122.919 cv
425.722 122.914 425.627 122.908 425.533 122.901 cv
425.44 122.894 425.346 122.885 425.253 122.876 cv
425.16 122.866 425.066 122.856 424.974 122.844 cv
424.882 122.832 424.789 122.819 424.697 122.805 cv
424.606 122.791 424.514 122.776 424.423 122.76 cv
424.332 122.743 424.241 122.726 424.151 122.708 cv
424.061 122.689 423.97 122.669 423.881 122.649 cv
423.614 122.583 li
423.349 122.512 li
423.087 122.434 li
422.828 122.35 li
422.571 122.259 li
422.318 122.163 li
422.067 122.06 li
421.82 121.952 li
421.575 121.838 li
421.334 121.718 li
421.097 121.593 li
420.863 121.462 li
420.632 121.326 li
420.405 121.184 li
420.182 121.037 li
419.962 120.885 li
419.747 120.727 li
419.535 120.565 li
419.328 120.398 li
419.124 120.226 li
418.925 120.049 li
418.73 119.868 li
418.54 119.682 li
418.354 119.491 li
418.173 119.296 li
417.996 119.097 li
417.824 118.894 li
417.657 118.686 li
417.495 118.475 li
417.338 118.259 li
417.185 118.039 li
417.038 117.816 li
416.897 117.589 li
416.76 117.358 li
416.63 117.124 li
416.504 116.887 li
416.385 116.646 li
416.27 116.401 li
416.162 116.154 li
416.06 115.903 li
415.963 115.649 li
415.873 115.393 li
415.789 115.134 li
415.711 114.871 li
415.639 114.607 li
415.574 114.339 li
415.554 114.25 415.534 114.159 415.515 114.069 cv
415.497 113.979 415.479 113.888 415.463 113.797 cv
415.447 113.706 415.432 113.614 415.418 113.523 cv
415.404 113.431 415.391 113.338 415.379 113.246 cv
415.367 113.154 415.357 113.06 415.347 112.967 cv
415.338 112.874 415.329 112.78 415.322 112.686 cv
415.315 112.593 415.309 112.498 415.304 112.404 cv
415.3 112.309 415.296 112.214 415.294 112.119 cv
415.291 112.024 415.29 111.928 415.29 111.833 cv
415.09 111.833 li
414.89 111.833 li
414.89 111.931 414.891 112.031 414.894 112.129 cv
414.896 112.227 414.9 112.326 414.905 112.424 cv
414.91 112.521 414.916 112.62 414.923 112.717 cv
414.931 112.813 414.94 112.911 414.949 113.008 cv
414.959 113.104 414.97 113.201 414.982 113.296 cv
414.994 113.392 415.008 113.488 415.022 113.583 cv
415.037 113.678 415.053 113.773 415.07 113.867 cv
415.086 113.961 415.104 114.056 415.124 114.15 cv
415.143 114.243 415.163 114.337 415.184 114.429 cv
415.206 114.521 415.228 114.615 415.252 114.706 cv
415.276 114.798 415.3 114.89 415.326 114.981 cv
415.352 115.071 415.379 115.162 415.407 115.252 cv
415.435 115.342 415.464 115.432 415.494 115.521 cv
415.588 115.787 li
415.688 116.05 li
415.794 116.31 li
415.906 116.566 li
416.024 116.819 li
416.148 117.069 li
416.278 117.315 li
416.414 117.558 li
416.555 117.797 li
416.702 118.032 li
416.854 118.263 li
417.012 118.491 li
417.174 118.714 li
417.342 118.933 li
417.516 119.148 li
417.694 119.359 li
417.877 119.565 li
418.065 119.767 li
418.257 119.965 li
418.454 120.157 li
418.656 120.345 li
418.862 120.528 li
419.073 120.706 li
419.288 120.88 li
419.507 121.048 li
419.731 121.211 li
419.958 121.368 li
420.189 121.521 li
420.424 121.667 li
420.663 121.809 li
420.906 121.944 li
421.152 122.074 li
421.402 122.198 li
421.655 122.317 li
421.911 122.429 li
422.171 122.535 li
422.434 122.635 li
422.699 122.729 li
422.968 122.816 li
423.058 122.844 423.149 122.871 423.24 122.897 cv
423.33 122.922 423.423 122.947 423.514 122.971 cv
423.606 122.994 423.699 123.017 423.791 123.039 cv
423.884 123.06 423.978 123.08 424.071 123.099 cv
424.164 123.118 424.259 123.137 424.353 123.153 cv
424.447 123.17 424.542 123.186 424.637 123.201 cv
424.732 123.215 424.828 123.229 424.924 123.241 cv
425.019 123.253 425.116 123.264 425.212 123.274 cv
425.309 123.283 425.406 123.292 425.503 123.299 cv
425.6 123.307 425.698 123.313 425.796 123.318 cv
425.893 123.323 425.992 123.327 426.09 123.329 cv
426.189 123.332 426.288 123.333 426.387 123.333 cv
426.485 123.333 426.585 123.332 426.683 123.329 cv
426.781 123.327 426.88 123.323 426.977 123.318 cv
427.075 123.313 427.173 123.307 427.27 123.299 cv
427.367 123.292 427.464 123.283 427.561 123.274 cv
427.657 123.264 427.754 123.253 427.85 123.241 cv
427.945 123.229 428.041 123.215 428.136 123.201 cv
428.231 123.186 428.326 123.17 428.421 123.153 cv
428.514 123.137 428.609 123.118 428.703 123.099 cv
428.796 123.08 428.89 123.06 428.982 123.039 cv
429.074 123.017 429.167 122.994 429.259 122.971 cv
429.35 122.947 429.443 122.922 429.533 122.897 cv
429.624 122.871 429.715 122.844 429.805 122.816 cv
430.074 122.729 li
430.34 122.635 li
430.602 122.535 li
430.862 122.429 li
431.118 122.317 li
431.371 122.198 li
431.621 122.074 li
431.867 121.944 li
432.11 121.809 li
432.349 121.667 li
432.584 121.521 li
432.815 121.368 li
433.043 121.211 li
433.266 121.048 li
433.485 120.88 li
433.7 120.706 li
433.911 120.528 li
434.117 120.345 li
434.319 120.157 li
434.516 119.965 li
434.709 119.767 li
434.896 119.565 li
435.079 119.359 li
435.258 119.148 li
435.431 118.933 li
435.599 118.714 li
435.762 118.491 li
435.919 118.263 li
436.071 118.032 li
436.218 117.797 li
436.359 117.558 li
436.495 117.315 li
436.625 117.069 li
436.749 116.819 li
436.867 116.566 li
436.979 116.31 li
437.085 116.05 li
437.185 115.787 li
437.279 115.521 li
437.309 115.432 437.338 115.342 437.366 115.252 cv
437.394 115.162 437.421 115.071 437.447 114.981 cv
437.473 114.89 437.498 114.798 437.521 114.706 cv
437.545 114.615 437.567 114.521 437.589 114.429 cv
437.61 114.337 437.63 114.243 437.65 114.15 cv
437.669 114.056 437.687 113.961 437.704 113.867 cv
437.72 113.773 437.736 113.678 437.751 113.583 cv
437.765 113.488 437.779 113.392 437.791 113.296 cv
437.803 113.201 437.814 113.104 437.824 113.008 cv
437.834 112.911 437.842 112.813 437.85 112.717 cv
437.857 112.62 437.863 112.521 437.868 112.424 cv
437.873 112.326 437.877 112.227 437.879 112.129 cv
437.882 112.031 437.883 111.931 437.883 111.833 cv
437.883 111.735 437.882 111.635 437.879 111.537 cv
437.877 111.439 437.873 111.34 437.868 111.242 cv
437.863 111.145 437.857 111.046 437.85 110.949 cv
437.842 110.853 437.834 110.755 437.824 110.658 cv
437.814 110.562 437.803 110.465 437.791 110.37 cv
437.779 110.274 437.765 110.178 437.751 110.083 cv
437.736 109.988 437.72 109.893 437.704 109.799 cv
437.687 109.705 437.669 109.61 437.65 109.516 cv
437.63 109.423 437.61 109.329 437.589 109.237 cv
437.567 109.145 437.545 109.051 437.521 108.96 cv
437.498 108.868 437.473 108.776 437.447 108.685 cv
437.421 108.595 437.394 108.504 437.366 108.414 cv
437.338 108.324 437.309 108.234 437.279 108.145 cv
437.185 107.879 li
437.085 107.616 li
436.979 107.356 li
436.867 107.1 li
436.749 106.847 li
436.625 106.597 li
436.495 106.351 li
436.359 106.108 li
436.218 105.869 li
436.071 105.634 li
435.919 105.403 li
435.762 105.175 li
435.599 104.952 li
435.431 104.733 li
435.258 104.518 li
435.079 104.307 li
434.896 104.101 li
434.709 103.899 li
434.516 103.701 li
434.319 103.509 li
434.117 103.321 li
433.911 103.138 li
433.7 102.96 li
433.485 102.786 li
433.266 102.618 li
433.043 102.455 li
432.815 102.298 li
432.584 102.145 li
432.349 101.999 li
432.11 101.857 li
431.867 101.722 li
431.621 101.592 li
431.371 101.468 li
431.118 101.349 li
430.862 101.237 li
430.602 101.131 li
430.34 101.031 li
430.074 100.937 li
429.805 100.85 li
429.715 100.822 429.624 100.795 429.533 100.769 cv
429.443 100.744 429.35 100.719 429.259 100.695 cv
429.167 100.672 429.074 100.649 428.982 100.627 cv
428.89 100.606 428.796 100.586 428.703 100.567 cv
428.609 100.548 428.514 100.529 428.421 100.513 cv
428.326 100.496 428.231 100.48 428.136 100.465 cv
428.041 100.451 427.945 100.437 427.85 100.425 cv
427.754 100.413 427.657 100.402 427.561 100.392 cv
427.464 100.383 427.367 100.374 427.27 100.367 cv
427.173 100.359 427.075 100.353 426.977 100.348 cv
426.88 100.343 426.781 100.339 426.683 100.337 cv
426.585 100.334 426.485 100.333 426.387 100.333 cv
426.288 100.333 426.189 100.334 426.09 100.337 cv
425.992 100.339 425.893 100.343 425.796 100.348 cv
425.698 100.353 425.6 100.359 425.503 100.367 cv
425.406 100.374 425.309 100.383 425.212 100.392 cv
425.116 100.402 425.019 100.413 424.924 100.425 cv
424.828 100.437 424.732 100.451 424.637 100.465 cv
424.542 100.48 424.447 100.496 424.353 100.513 cv
424.259 100.529 424.164 100.548 424.071 100.567 cv
423.978 100.586 423.884 100.606 423.791 100.627 cv
423.699 100.649 423.606 100.672 423.514 100.695 cv
423.423 100.719 423.33 100.744 423.24 100.769 cv
423.149 100.795 423.058 100.822 422.968 100.85 cv
422.699 100.937 li
422.434 101.031 li
422.171 101.131 li
421.911 101.237 li
421.655 101.349 li
421.402 101.468 li
421.152 101.592 li
420.906 101.722 li
420.663 101.857 li
420.424 101.999 li
420.189 102.145 li
419.958 102.298 li
419.731 102.455 li
419.507 102.618 li
419.288 102.786 li
419.073 102.96 li
418.862 103.138 li
418.656 103.321 li
418.454 103.509 li
418.257 103.701 li
418.065 103.899 li
417.877 104.101 li
417.694 104.307 li
417.516 104.518 li
417.342 104.733 li
417.174 104.952 li
417.012 105.175 li
416.854 105.403 li
416.702 105.634 li
416.555 105.869 li
416.414 106.108 li
416.278 106.351 li
416.148 106.597 li
416.024 106.847 li
415.906 107.1 li
415.794 107.356 li
415.688 107.616 li
415.588 107.879 li
415.494 108.145 li
415.464 108.234 415.435 108.324 415.407 108.414 cv
415.379 108.504 415.352 108.595 415.326 108.685 cv
415.3 108.776 415.276 108.868 415.252 108.96 cv
415.228 109.051 415.206 109.145 415.184 109.237 cv
415.163 109.329 415.143 109.423 415.124 109.516 cv
415.104 109.61 415.086 109.705 415.07 109.799 cv
415.053 109.893 415.037 109.988 415.022 110.083 cv
415.008 110.178 414.994 110.274 414.982 110.37 cv
414.97 110.465 414.959 110.562 414.949 110.658 cv
414.94 110.755 414.931 110.853 414.923 110.949 cv
414.916 111.046 414.91 111.145 414.905 111.242 cv
414.9 111.34 414.896 111.439 414.894 111.537 cv
414.891 111.635 414.89 111.735 414.89 111.833 cv
cp
.21602 .207454 .209307 rgb
f
grestore
1.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
364.632 65.9404 mo
364.632 158.89 li
.783545 .790168 .797695 rgb
@
365.691 92.0581 mo
365.691 132.958 li
.21602 .207454 .209307 rgb
@
452.178 96.6025 mo
462.24 96.6025 li
462.24 127.932 li
452.178 127.932 li
452.178 96.6025 li
.48562 .491648 .500845 rgb
ef
461.902 127.733 mo
452.421 127.733 li
452.421 96.8929 li
461.902 96.8929 li
461.902 127.733 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[0 31.08 -9.72 0 372.954 35.2236 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 259 
/H 81 
/M[259 0 0 -81 0 81 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 259 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 259 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 259 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2b
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.[TS2bJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm#NbJm!\.Jm!\.Jm!\.nl^J~>

%%EndBinary
grestore
np
gsave
452.373 127.79 mo
461.973 127.79 li
461.973 96.9505 li
452.373 96.9505 li
452.373 127.79 li
clp
1 1 1 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Calibri-Italic def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 65 /A put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 84 /T put
dup 89 /Y put
def
/FontBBox {-725 -276 1260 1026} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/.notdef <1C60D8A8C9B7A0865786BC308F2320639BB536432D0898AEB6E2A7
5CF9EC2A9EC0700EC985467C5EB75BAFAE6BE92B47D4665D1FFB7CDD63B993D8
CAF292A657BB84C1D7B11457D454AE84F45E42136F191EC6E3B3983E5AB3335D
EC1B5DA070AA269E3098A95D700B7A877E0B90FEA50C57240FE69A623C227A24
32F0D09A0AB3B37F9929A87FD9AD5B69FC3DDBBDE0A657548A6A0CA57D1D47D5
FE926BE7FF962360C0A9B770C0895EF6EBFFA4DC6BEC37F71748863B9F794A34
58D5F95997EC1E7D14F6BEF0F24D8F15E48015D300AB35CF12A219244AC1E96B
AAD98C9FB5AA9AB620D4759046C90591AD5B5DB9058FED9B2DEAA5C289619C69
E6B8AFBA78E92BA7CAD51162C8E19B9CE3A002008E1F2E7A1C2CA8B94E16AF51
1B72C953877A73A560545823ADD0EF14F1A99CBC77A9AEB372F7F84402780C34
1A1F3B424BB5BB3D045333E21109BF0BFC6DF2C339E12B2157F8A656B74474F0
BCE53FA32D21B2F841C437CBC8FF800542665AE6B6AE1AB4D9D2CA7B4C4D6695
3BDAE1223DC341C8BCCF7DF80B0EAE877C569B5D2FC0CF06741B78357213D2C0
36105C76D1B0229545F400BC4FF0C330A129DED3A7DD021F5A29FF7E933705A9
10D64D991F85DB9CFE06DFBE23A1219DBA72230B> |-
/space <1C60D8A8C9B888C146> |-
/A <1C60D8A8C9B7F88C24E7C7C18A99AFA695E77890405AEC786C5E164127CE
DB6D0431921DDE076A91730CCF34AC8021E96CCDAEFB72FBEE35C69B7C9974AB
FE2ED042302CA1463ABE5172E3C300830C941825CFB07435A0FA431408DF0394
FC3501727BF64B001FB84519931BD81572DDACF187EAA923E7D53C077380AAA1
4C9B7BFAD56722055151EF8E4F81033FECCD0BF39EFB51DD5FABE0C67CA51A3F
ED05766CE1E7FD548D38717CCFBD53EF35936DBAB663AAB2BD8662E7EF20093C
F4F5EBB615F1F96620A4A1A8CBB74573398C245433216A> |-
/I <1C60D8A8C9B86ED904CFDA1DF007FC1CE7608A9223986CE0C40B459B7A89
A1802B675886B3F3C36D915BE5BF4C5A084993D0B749C3401939895025DCB6BA
3C4439C5D4CF362801C9B98D90056ED94FE24AA438B3E47F3170F30963E9D6A4
7540667717F3223331BC78DA4B2EA1CCD114AC1A932B129FC80C70B9B5608F5D
FF32087D0ABA> |-
/M <1C60D8A8C9B68A39A0D45F5B31123F5781C6114A619CB02A9E825FF65DBD
6C259BF8BB3F514059127C1392C9CE498FD621CC2F85C5C32CC64E040C3B6A42
4B91073EF2ECD310E0FC7AF92B525BE1C521EA1FF625263535A5EB2D2F2C360A
855CABA2DE433F8392D30722165A5FD7856A546C1B6CC50B39AEEE09441E9C7F
3B23ED7AB676C5FA86439712B3A69E4FFFF5F89DC42460A82E9A7A614DA7EF65
397856D4CD608065EB437EF3BEBC666518AA8133D2DB881A31B56B8989D3DD4E
8C3B99CCF58FD8F16835282ADF9D31DE658BDF6EB9D3EAC7D29F9D3FF03B6802
2FDADA4711E27E5F0DF50A86FCF9E238F9A3C5585C18114CC73E811E99431592
0BBB1B6882D9972EE84B53A2B687214E51C5A9966AC9BBD93553AEDF03581622
B5F546DF1FDEDE3BC36B7501CC9A44A66F22BC52F4E636A4> |-
/N <1C60D8A8C9B678BD1706B03FB791EF68EE7AE12BEF9FB15871CA1F4493B7
891F63A910B969A95DA78942400325AE1AB87F57F25ABE75B7EC669EFDAACC6E
4860BA386669D8D86B91EEFB0274AAFA5FC5AA2FDDD886FBE32FD16BC2570529
6ECC0754CACB8145F15F14B221692F038A94113A5F42F42E6A0B8742FFFC5D2B
075A5D8F907D56ABA5018E23C641C6B4EF2C0F0CEEF7383A7C19BA5D190AEBEF
6D3B206AF9C21120D19340E03B9DEC0AA84CD656E1C7D18B7C83EDFBD46FC77F
5923D4F8F9004428AC7E33766D10BDF6B5A197852DAFB6D781506361599E6C39
D2B0AE0CD1A6375E910537419786A1E50B5887C87D735C775F3E5633BE3074AB
06A63CDBC05007ABC736B37B31F4256FBE6C3260583AEB9A2643AE30873B9F47
FD74C34D6A290F84E77F32A1025F4FAEFD9967842906C6EE> |-
/O <1C60D8A8C9B643FE998BF334CB54589080B08FD047C8EA70C075C89319F3
8C208F25003D47299C0C7477FAF3F073685594BD6AA44322558C3085CC51397A
21A82A76F9A7CBC5722D5D1CDEEDD9349A598367C211B407DEEA4BEFFFC24315
61106E7D33C1B30104713DFCE7E6E005F00D88B6CE01D7928D3949541AF8E3A6
D388C0378BA08AAD05DCCA583A51B604792548B95FD35CC6D1ACAB299BA635BD
FB1B9BE9F6EFA0C0297E713824531275ADD7A5958192DD50EA74B270A483DF03
302152B8CF075A2BDC1BC647B742A15A58761822A05E2B752310A62274AA05F7
72EBB97011BE60027D095E08EA9164C87B1C5F4020A0FABC49EB27C1A3842E6F
53C7308D07EACB902B3814AD38C9656D19CF96055908197B3D0DD0BD00FE0E18
4CB704A03965AB6FCD1FD1A75970> |-
/R <1C60D8A8C9B79C5FEE5889580CAAEE06AFC223BDFFC3CA3519830EC0F9FA
B71F618C52B990E895DCD265F905758C917E27F274DEF695DF2AC4DB9BAF6D4F
8F19AB3E8AFFF7535EE236989C1449417440D48EF871EE4CD50B0390DA03C485
B41BD790673367A9F882A7917E3318EC8551DF58673348A496F1A81D7B40DA84
148053B44A66BA9C6E55BFA543DAFD9CAFAE8A3D14BC29BD44133FC3AAC403ED
63D20E308658AE90E1AA0809FB3AE94E3EEB38948FE84A72573A81491C1556CC
446CED7690076F9264E51368E32411F61F588CBBED2E664675C3DF9534D93B11
3BC405446063D8DED1ED59662EDA9C6630CB148101701DBA410D4C26547DF61E
A6C7368C97B966A5ED9CE41B9A7055179359DDB781CF1F2AE68BA08717158AE6
D98B5864EC956C0CCE0D27D5C2DE03B9A1009AED0B9FE505C318D2E1FACC0ABE
41E9212DB66C66CEF42F425CE54F9965C304FA3B7CC62939C12D> |-
/T <1C60D8A8C9B7544E0BD44792D5D51E7EFCE09B1F437A065C1ABBB5A6333E
3764B2AEA2CBC8943EE494D37AE9E8B4B022DF299781883C0B6D3E716309AB37
BB95B1A20B71E792716835C11049804FB9D451C9BCB60593CFD2929BE1D90829
B58FE7E0C726A9A55222BD86B806D9A8A1CD1C8F4F72598F356ABE24C4FD3643
E0B5D89C109685B0A70FA874F54E3E0105A6A3D6FA5D197B609699C56A509C56
2E43ADD5BD167DD184F9590E26432C7E237A2CF61565241FD0AC018081E59BBE
76C95639F729FD80CBFBE736> |-
/Y <1C60D8A8C9B7544E0BC55DA821CA16A425E06BCF85E7B080DF45C9491DCC
3E340523781B56BF6370B4920B51B181B240A0794C729CD847BC2C39BCD78769
A346E8AE54EE55078239C14ACB301941CEA4DE9EFA6BEA4EA8B9444B83B15DEF
B606488380C9D303994D3289B815B6ED75648518203305B7C94223FED7605BDC
06B34811CAC008DDC2A284AAE16913D37D24A797589D3E2E964A32770A7EA79F
18FAA6CD4C2E8F6C6273CBCDDBD47F4A289E24FB1493719F97B6031D8F6D44AC
537FBC44EDDAEFB8E5BC6C2ED70B7252B89E8C0F3EAA5D2EA87101A840CCD956
250840383F0B4B46B73CBB86> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/MDDJMC+Calibri-Italic /HIBBAA+Calibri-Italic findfont ct_VMDictPut
/MDDJMC+Calibri-Italic*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 7{/.notdef}rp /I 3{/.notdef}rp /M 
/N /O 2{/.notdef}rp /R /.notdef /T 4{/.notdef}rp /Y 
166{/.notdef}rp]
MDDJMC+Calibri-Italic nf
MDDJMC+Calibri-Italic*1 [0 -3.96 -3.96 0 0 0 ]msf
456.262 126.533 mo
(ROTARY MOTION)
[-2.15979 -2.64014 -1.92059 -2.27979 -2.16016 -1.92059 -.958313 -3.36005 -2.6402 -1.92059 -.9599 -2.76013 
0 ]ysh
grestore
gsave
452.373 127.79 mo
461.973 127.79 li
461.973 96.9505 li
452.373 96.9505 li
452.373 127.79 li
clp
1 1 1 rgb
MDDJMC+Calibri-Italic*1 [0 -3.96 -3.96 0 0 0 ]msf
456.262 98.2129 mo
( )sh
grestore
gsave
452.373 127.79 mo
461.973 127.79 li
461.973 96.9505 li
452.373 96.9505 li
452.373 127.79 li
clp
1 1 1 rgb
%ADOBeginSubsetFont: HIBBAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMC+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B75378CE3CBBB380144F94BC5021A60DCF8ED34E986D643369
621970E1429000F94D61AB696E6A4875E3D05044DEA0166E4B76E518EA03F8F7
7889339A2469718141379375D152FB9D81061EEAB6560380124BD7FE30883B23
9DCBDFB127F9F7C05C810A52E215B74BC05E2E97928ADE0AD65DE20B2C9BC003
467FE13A975F355BAE7F01C9E9477781417D28687F2228D405438AE05BAA5C7E
9CE0BAC490E483E6F72DCF515E04BCD1D45B1A027B08C636C0C506A1F264258A
9030906C155CAB692B2E5F1142339F5AD966B71A4ED86A8F593520C7755A1547
9A65C4BC14EDE3FEF0405B8CDB1D6B4E97E401067E950AE023> |-
/S <1C60D8A8C9B77771B08BEA3A0F7464497DF7400B7F87F65E3EAA75A088DF
46D5DD6ACE7EC271276F7B43215E2F56362CFDAC2104F43572239884809E79BA
8102F8F788059CECAEFB64BBAE4A2F4685046FCABB6C70ED04D005AA111FF7A6
8542555809BEA9D46D911D2E87FCAF3DAE3429054D4DB073DDABC6F47974E6F8
488C7E07052B9A51125DC88A09534EA8A3B113C49A9FE4B53317E9990F9F78D2
FF3646581ADB2CE817150EF1C51E8B177CE355209CFCF24C2D47A4F4C583B5DC
D2B353499083EA924A333D41E3CAC577CFA29813FDEB4B05C97559CEAAB65A9F
2B674E9D7B2DEC779F0E9D9D7B23B3A4E4C800ED039244ADCA60BE6E4365135E
BDC8812FD382E62909550CDE204FC5DB43C03DDD9503823CC9FE985E18918C0C
A358B99D346A46C23D379630DCC37BE2A28474DEB4A9A6CACE755017F8F375B4
A853A33198AB153D92BB684EB82952529EE9349FDD3D21140F33598C89C6ECA9
B2A2A71433FA630F550743595D18A9DC8F776E08F22002C4D0D8F0A6AFC543AF
B0666F252DF2FD8C9BA704ED744399BE2A92F9726F8995C1477016724C0B17F0
9709E81F7BFBA4816F2666F51DDC1230EAB8FBC8BE2178D85E0E1EDF9409C154
E1B6C571D477FAA49586> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMC+Calibri-Italic /Encoding get
dup 69 /E put
dup 83 /S put
pop
%ADOEndSubsetFont
/MDDJMC+Calibri-Italic*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 3{/.notdef}rp /E 3{/.notdef}rp /I 
3{/.notdef}rp /M /N /O 2{/.notdef}rp /R /S /T 
4{/.notdef}rp /Y 166{/.notdef}rp]
MDDJMC+Calibri-Italic nf
MDDJMC+Calibri-Italic*1 [0 -3.96 -3.96 0 0 0 ]msf
461.062 118.853 mo
(SENSOR)
[-1.79785 -1.92023 -2.52014 -1.79779 -2.6402 0 ]ysh
grestore
1 1 1 rgb
MDDJMC+Calibri-Italic*1 [0 -3 -3 0 0 0 ]msf
461.062 105.893 mo
( )sh
366.75 109.35 mo
379.746 109.35 li
379.746 114.15 li
366.75 114.15 li
366.75 109.35 li
.865862 .870293 .87527 rgb
ef
366.75 109.35 mo
366.75 109.226 li
379.746 109.226 li
379.834 109.262 li
379.871 109.35 li
379.871 114.15 li
379.834 114.239 li
379.746 114.275 li
366.75 114.275 li
366.661 114.239 li
366.625 114.15 li
366.625 109.35 li
366.661 109.262 li
366.75 109.226 li
366.75 109.35 li
366.874 109.35 li
366.874 114.026 li
379.62 114.026 li
379.62 109.476 li
366.75 109.475 li
366.75 109.35 li
366.874 109.35 li
366.75 109.35 li
.21602 .207454 .209307 rgb
f
400.872 109.35 mo
413.868 109.35 li
413.868 114.15 li
400.872 114.15 li
cp
.945802 .947668 .949748 rgb
ef
.25 lw
400.872 109.35 mo
413.868 109.35 li
413.868 114.15 li
400.872 114.15 li
cp
.21602 .207454 .209307 rgb
@
373.68 106.016 mo
409.668 106.016 li
409.668 117.417 li
373.68 117.417 li
373.68 106.016 li
.48562 .491648 .500845 rgb
ef
2 lw
432.861 111.083 mo
438.137 111.917 443.413 112.751 446.856 116.083 cv
450.3 119.417 450.522 127.139 453.521 131.083 cv
456.52 135.029 462.24 138.195 464.85 139.751 cv
467.461 141.306 468.322 140.862 469.182 140.417 cv
@
380.612 112.55 mo
380.612 112.425 li
389.838 112.425 li
389.927 112.462 li
389.964 112.55 li
389.964 116.25 li
389.927 116.339 li
389.838 116.376 li
380.612 116.376 li
380.523 116.339 li
380.487 116.25 li
380.487 112.55 li
380.523 112.462 li
380.612 112.425 li
380.612 112.55 li
380.737 112.55 li
380.737 116.126 li
389.714 116.126 li
389.714 112.676 li
380.612 112.676 li
380.612 112.55 li
380.737 112.55 li
380.612 112.55 li
.21602 .207454 .209307 rgb
f
381.945 113.216 mo
384.104 113.216 li
384.104 115.376 li
381.945 115.376 li
381.945 113.216 li
ef
394.594 116.188 mo
389.964 116.188 li
389.964 112.55 li
389.927 112.462 li
389.838 112.425 li
389.794 112.425 li
389.794 107.788 li
394.594 107.788 li
394.594 116.188 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[0 -8.64 5.04 0 300.607 55.4081 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 72 
/H 42 
/M[72 0 0 -42 0 42 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 72 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 72 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 72 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm"gN
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm"gN
Jm!\.Jm!\.Jm!\.Jm!t6J,~>

%%EndBinary
grestore
np
389.964 116.188 mo
389.794 116.188 li
389.794 112.425 li
389.838 112.425 li
389.927 112.462 li
389.964 112.55 li
389.964 116.188 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[0 -3.96 .36 0 300.607 50.7281 ]ct
snap_to_device
<<
/T 1
/W 33 
/H 3 
/M[33 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
gsave
389.853 116.271 mo
394.654 116.271 li
394.654 107.75 li
389.853 107.75 li
389.853 116.271 li
clp
1 1 1 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+Calibri def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 71 /G put
dup 73 /I put
dup 78 /N put
def
/FontBBox {-503 -307 1240 1026} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/A <1C60D8A8C9B7F88C2B6CB105045FB5B2B32CEE3D567021E87FFA3A108F22
F0AD769D89AF310F9FA2A63D83B348F1CD4D9158D831C2637A040F2E3D2AD1E0
C1265C252DE42DC685024335218B88110082607887337A49D14691BEEC919D91
764E7A708708CD55D39F5C43F91BAAAD2C1BF631413626FEAC47C21B08151BEA
5901545C7204664D0C76E7A812FB56764BAC701D80F5CBA63A3746A10BE794CC
B8FEAE9714EDA1C180ECED7E77C8C4917875CE0D099349356F25861C18102A30
8F1467786491B4C86DDD6D90CF5B29B935592B1FC4BC1C> |-
/G <1C60D8A8C9B66A6BA50E0427E25C5714ADB8C9B9CF0FC0CEF6EE73D1E99B
B48B900A90A8481CB0697FC364877CAB3F0BAC107A5985C7A4D22440DA86F4A9
72F9AFAD2B169D45864F0EB43DFECDDF9B48F748106257F4F8A2F98C4740F90E
153B966076108E686FDB751ED3AC53F21A2FAA2C75F9056AEA3EB40EDEB41C5F
72D0EF46D311E14708C0419D0AC71F5FE9C06FB58B47761CFB807462BB0A24A7
D0172F51822DC6883A662FC9DBBDBA3E8948059B6C4326073AC305C8231D1641
2AEBF639A030B98E67468E40FB37E8D82AB470D76A0B4CA1958F3AEDAB615CBB
F7723B110D3F305B8C697351253EF1C09371E19868671A0BEA47ECCFD73C997B
F454FFC2CF56E14355A442A5A8537BE7A8FA7927378E9DE7FF23A7517FA9A542
8764E2BD5DE89433E003ED402D46984E8DB49ADB11CDCBC4DD9C883C19F27BC2
FF3EC88E440D2AA6B8AEA249A1DEC56C08060C9516634A8A739E722F4CE20E07
C6ED145411FCB762CDFE27B9AA> |-
/I <1C60D8A8C9B86ED904793239D5A87846341C6685DE5ABE7704D2C21702B1
9492F988F7BDB944EF3CF61808A6DB9D1F22BBD335BB859C853102ABDC306BF0
344F58C180F59706796F6A9C1DD4450E8611E916B0A530128C4C5E0E96FFF301
F980705D57CD45F3B705E62B3216F34902178F51AC490CA8AF3698463F806A35
B46CD69D> |-
/N <1C60D8A8C9B67B16EC17A11C9303513193038382E210A42B5CE850AFC118
B8F8E20755C8A90C95C89303B8AF97DF2083371B19301E0DB8111A384A8E035C
8C8FD179B5FF5DEE9371CE5D28447AD71E5F20621DEE2C342616335A1AAB1669
E519E232E79C4980DE37E3F1E4DCD25C4506A181A5E635190DDA595BDDE1573C
B44863FF5A83BD7D7E515B71492920EF87FE789C8908736F38EB074EA06C50C8
F913E2E6E48D5D36311F7C911CB6784E303E758C4B3B979518975255BBF01EB8
B827E2459ECECE07A833BA1FB2794232A02C9AD337BE827A573B5E9CE89F5D6E
BE26850BF2926DF1667989BD0A0C14BF6B80D7EA27888CC10DB4AF2B2A5C69A8
F8245C9A4E02EC85AC1422B48B35F04B8FEAA16155CD67FB40B03E773C1C5BCA
284053C42517C1397CDE066EE439C5025920AAC2AF0AA2792D9E710F7897AACD
F305> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/MDDJMD+Calibri /QJJAAA+Calibri findfont ct_VMDictPut
/MDDJMD+Calibri*1 
[65{/.notdef}rp /A 5{/.notdef}rp /G /.notdef /I 4{/.notdef}rp /N 
177{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [0 3 3 0 0 0 ]msf
391.834 108.748 mo
(GAIN)
[1.91998 1.67999 .719971 0 ]ysh
grestore
1 1 1 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B888C146> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 32 /space put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 5{/.notdef}rp /G /.notdef /I 
4{/.notdef}rp /N 177{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [0 2.04 2.04 0 0 0 ]msf
391.834 115.108 mo
( )sh
389.747 106.016 mo
377.747 106.016 li
377.747 105.469 li
389.747 105.469 li
389.747 106.016 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[0 -.84 12.24 0 288.56 57.7276 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 7 
/H 102 
/M[7 0 0 -102 0 102 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 7 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 7 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 7 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
Ju4-sJu4-sJu4-sJu4-sJu4-sJu4-sJu4-sJu4-sPGWj~>

%%EndBinary
grestore
np
389.714 113.869 mo
384.104 113.869 li
384.104 113.216 li
381.945 113.216 li
381.945 113.869 li
380.737 113.869 li
380.737 112.676 li
389.714 112.676 li
389.714 113.869 li
380.487 113.869 mo
377.747 113.869 li
377.747 106.016 li
389.747 106.016 li
389.747 112.425 li
380.612 112.425 li
380.523 112.462 li
380.487 112.55 li
380.487 113.869 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[0 -8.04 12.24 0 288.56 57.1276 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 67 
/H 102 
/M[67 0 0 -102 0 102 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 67 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 67 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 67 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
l</^AJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm%AAJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.l</^AJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm%AAJm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.Jm!\.
Jm!\.Jm!\.l<1i(J,~>

%%EndBinary
grestore
np
389.747 113.869 mo
389.714 113.869 li
389.714 112.676 li
380.737 112.676 li
380.737 113.869 li
380.487 113.869 li
380.487 112.55 li
380.523 112.462 li
380.612 112.425 li
389.747 112.425 li
389.747 113.869 li
380.737 112.55 mo
380.737 112.55 li
380.612 112.55 mo
380.612 112.55 li
380.737 112.55 li
380.612 112.55 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[0 -1.68 9.48 0 291.32 50.7676 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 14 
/H 79 
/M[14 0 0 -79 0 79 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 14 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 14 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 14 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&nGn(~>

%%EndBinary
grestore
np
384.104 113.869 mo
381.945 113.869 li
381.945 113.216 li
384.104 113.216 li
384.104 113.869 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[0 -.84 2.4 0 292.76 49.9276 ]ct
snap_to_device
<<
/T 1
/W 7 
/H 20 
/M[7 0 0 -20 0 20 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
gsave
377.733 113.751 mo
389.852 113.751 li
389.852 105.35 li
377.733 105.35 li
377.733 113.751 li
clp
1 1 1 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A0860A305D7D1540DECC7BE2F83965065BA1F58088FE75
1F51768999AF3CB0CBD98712B4A20A30CFDD23F3D718AE6664545AA64C90E87A
977C061638AE7B9844BD53D39E1CD919540EC0AFC0ADDD639213BAA3C2156ECF
4D5FEFDF4B77C92C9A62F21FEF596A47F254F30F662D97990A276CD1E50761DD
9D07D78B626617E74128BC5D647B42ED807FE6DD0588AD25D211834DAC9410A0
AEBD06E6565C1DCBD86013B11A7BE0A2010B12635869FAC3323D92D6BCCC10D0
2550F431D6753E5E6C65DB63D883AF6BCE4C75C5A66BF9AE47A5570BA4B61C57
63C152A7FDEC11C0C748631E999D604A7F2938BB57220CBE02AE758E60183316
61C475AA9DED7C59> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 15{/.notdef}rp /A 5{/.notdef}rp /G 
/.notdef /I 4{/.notdef}rp /N 177{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [0 3 3 0 0 0 ]msf
387.227 108.829 mo
(1)sh
grestore
gsave
377.733 113.751 mo
389.852 113.751 li
389.852 105.35 li
377.733 105.35 li
377.733 113.751 li
clp
1 1 1 rgb
MDDJMD+Calibri*1 [0 3 3 0 0 0 ]msf
387.227 110.389 mo
( )sh
grestore
1 1 1 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A0860A0ABA2698AC8E090156BBF2C9C30ADDAE7DCB3D9
7848CC5D38A5C6D85B8937F2533AAB8D6BFA0DD62B7BCE11E4F148006AA53F16
B7661785227AEDEF098A1104625EF68DF52BAE87BC71C0E793E6FAD1A965E4D3
8BA9CF4CEDAADD0504EE4CE20EF80FE3B0F494717869AEF9FD48C1A316DF08AD
A9E5D4CE0C25CB68B43C1EB2B9FE55F89B0B22C758BDED5FDD580CE702C559F6
E1F276FBE929DD9A2C3557CE4E2CABBF3EDF814307556BE2579995A57ECC922B
3376DB39CC4DC2518F12025BDC7A3EE507BE357864FDBF8F62FBD571913B8657
13255C738D4AEB39D8820C2AC5F5D7DF55CB64B7CD192349742D481F16CF8009
5A893636D91177B06233710432F07D42A84BDDC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 4{/.notdef}rp /N 177{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [0 3 3 0 0 0 ]msf
383.987 108.109 mo
(10)
[1.56 0 ]ysh
383.987 111.109 mo
( )sh
380.627 107.389 mo
(100)
[1.56 1.56 0 ]ysh
380.627 111.949 mo
( )sh
gsave
377.733 113.751 mo
389.852 113.751 li
389.852 105.35 li
377.733 105.35 li
377.733 113.751 li
clp
MDDJMD+Calibri*1 [0 2.04 2.04 0 0 0 ]msf
378.347 109.669 mo
( )sh
grestore
411.535 108.284 mo
433.228 108.284 li
433.228 115.133 li
411.535 115.133 li
cp
.48562 .491648 .500845 rgb
ef
.25 lw
411.535 108.284 mo
433.228 108.284 li
433.228 115.133 li
411.535 115.133 li
cp
.21602 .207454 .209307 rgb
@
157.533 39.5905 mo
95.7327 39.5905 li
95.7327 5.6305 li
157.533 5.6305 li
157.533 39.5905 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[62.04 0 0 34.2 6.54522 123.366 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 517 
/H 285 
/M[517 0 0 -285 0 285 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 517 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 517 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 517 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5f
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&_Z,5fK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`^fK)^H&K)^H&q#>j~>

%%EndBinary
grestore
np
gsave
95.6126 39.5904 mo
157.533 39.5904 li
157.533 5.6295 li
95.6126 5.6295 li
95.6126 39.5904 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B68A39A0A3DD2F1EDB806B8EBA2991979DEC8D258B1A02A190
6FD2B1CA205517F0A68C4C6A5BF2AC6E6CDCF7977F45552A42319D772D059495
9118289EBC1461685C8CF4E5DD263C4C1910B7D8FD4E5500044A8F06771B257F
C21C3072148523EDBD4AE8CCE0BCF86532F61410F6C0201E2ADF6D872A8FDBBE
97EA7C8789A51927AEAFFA42E03A39CC922DAB964B6BCFFA4430A330843D8297
EBD008ACDDBEFAE9E40226AF265DABF6CE80E6C4FB13353BC50063552BC66736
0325D0B42F7528AA00A89119A771AE5A7A3F69D8025BCAB7EBC18E2CEFCB7A52
A1D8652FE7D376D9B1F2CA62FEF82187CF27562517F2AA24976B64146E2D4DD2
87500E273B12ACFFC0C2B592A5CFA9E9511593BE31B739BECC693D9698B175F6
8FEC3CF86BC604ABD82815EBA74C3E98930057A86AF494D184AB704B672B8745> |-
/e <1C60D8A8C9B7A9C0DC897A849B356D31E2254DD2E5BDA9320580C3E0839C
715C00D9D27B634D4BEEF0FE1F6AD3CCFBCCE9FDE38A84A563FB744619F62FCB
F09ACBF7337FE050BE068BCA744FAC4471C4195B7CEC353B3CAECCCEC91AAE22
E8955469041D97A8837F9398CE520ABB35C688EEF4229957FD92C79439BF99D2
4AD4D8B3CAC5B975D966AB01856E8FAEAE3BEB03E1CC76DF299391134BFB02DD
61F6D73B2AAAA0D725ABCA9FE504FB3A1EC1E2449C5D921F0DE45A9278013CF0
832F39E3771D2B318D27AFF5849066ED5A64AA8E3E404B520DE5F08BE74DD8D5
8BD1B0FA461EBCBB4DC632B680CFAE62B61DD4FC04FC017D59147CB2E0FBEAAF
A402B5BFBD0C4F13F4BD9227D1353527A23B3EF7CA3E7F599CB51DDAF43A5674
78E4C81011D9D8D5DAD9CB1F948F5FCE67> |-
/i <1C60D8A8C9B887F0644B8F9A77200B5B21E7A46843656F48CC872DF3AFB5
8D86B9B1B70DF0F8BF4F1A9D845350075385C2FAC40F64A57A633024956B42D2
D155265D68692B1DD96FCB1CFEA6F03B67B191D75D9251636A71B366F484AC7D
D61A648087A690F42FCD56728047D5F145B28180BC49A70304D616C17E08688B
C2AB34D235D029750826D6A02D57888DCAF080A15DCB2D8AE91CB7938E088D74
26B3BCAD6531F243F29763FBDE3F087E3965B6148DD52590D1BA20021D15293C
FC> |-
/l <1C60D8A8C9B887F0644B8EDF7E394B2B17D648B60040EB6DBE2B8847CEEB
752ACB6F5AD37E1FA4A050E94786AD18088ED8DC4464B0DE1BE6F00A802A61F4
A34EAA84659717045B37042963C71284B8AC29AE9E0F8305F213AE4489E2DB55
EC12AFE94E44F64596D135D1BEB997D5B9A0BB5A35AE0E0CE05B7B1F89372931
9FB81429> |-
/p <1C60D8A8C9B78E05EA9D973060387C73D1F6FC5283CF49F42B90E3572253
2C0305E99FC2B2F5E8253F0317294CB5BA6F51657EA79E1841CF363B43BBE54B
9E5F683986378119A60103220843BA6B4E1CF012F4407937B0EDEEE409EED971
ED71424C1DE9F58B3C06F2342302220C155C0C840BFB4693FFF8A2CFEEF274FF
E1F4AFBE9757FB2568EE33B9D585CBE0600A7110E1A53D85847EA919EFD9BF18
F44D7EE9518AE64D9DFE7C7267D6429C8F5FD0EF0AF9ABA737132F4E330A3308
77D5AECA1F6DF97EC1ACF219E33EDD988EC9A670EC23A43243C991A099EEE943
0EF67488C01ED11E3C4B1CEB11239FEDA600217AC3F2A3708004F1E2E90E2967
30C207690B19E7D8BB6E1920E2F46C4C2E0CC81AE0ED43696970A1FBC9D409BB
55BDECDE83A356A07B210C4055759107919A9C98A0B1493E8E6816D87FE47A8C
1A70E30E74BD97D6D39D9D984A0D52D9B81565B3C3A0B773497C465883E30959
64CC84> |-
/t <1C60D8A8C9B81D89610FFBFD2F87712D18AB3F2201A6640C86A2CD8B533C
9E9613B748962BD3321D998A13FF4A410946A55D4AE3CDBD806BF0BBD38F8435
DE762245288A30426FF012946D0E2E36D4EBD7E81C44D06926164FB6F91AA67E
EAF9AC4BC77C470E117D4634F7F90C1771292F30769DD575DD5B3F0D104730DE
CDCF41E7D59747B6A2D0EF143B06FA6BBA4F9E744BD6E4827C627C6619571415
1061BE64BA6B45A36E91B80557E1CF613697CA2B60F02790B7CBE3BBB5ABEC19
0F88D2844D8139B7D141D834706D11BA3108576C531B823977B908AC9FF80DF3
22060C351BA43A8EA770319D1AF8085E209B940EDEE1B85419EF87F01EED1C4E
0307B2BC95989AC0998A9EA8A0DFB99539E7D0B836F4EB9E9D6147AFB55082A1
E63F64D57A8E7F63465BA308FA03AEB2787221627AF8F99523DB260C> |-
/u <1C60D8A8C9B78E05EAA3CFED1A062DA00ACB6556B6D2C444D52FE211DC36
88D13631F07F87D2F0851361DDE2CB13BAE303424A55D9BD107D56D22322818F
C76F125ECA1DADD7E1E8164E2DF3A65B67CFAE338C319FC7D07BDCC1CF896B70
8E125021996E87E6805D1416B537CED172F9478027FB9FD1A978C49E725968E2
F5FFC6B56799F9B1D16FFE2085471316923AC7BFBC4E3BBEBA71950AD60EAA4B
EA84B8EB89079B6BEAD01C4E2BC5BF11F5FD2CB41D465D8AD649D765F2A952E2
2AC4EF1DF8297E4E5405180477A9E4F70BB10D787681535F61379438A6888E4F
660E2B1CD68547F69ECDD808A3CD50B9FBBDA239A40EE62332FADD878CD5F875
BAC27E0BDDA94455E030928A249A166F13D134EF255F5783> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 77 /M put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 112 /p put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 3{/.notdef}rp /M /N 22{/.notdef}rp /e 
3{/.notdef}rp /i 2{/.notdef}rp /l 3{/.notdef}rp /p 3{/.notdef}rp /t 
/u 138{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
107.853 16.0705 mo
(Multiple)
[9.48 5.75951 2.51717 3.72054 2.51717 5.7606 2.51717 0 ]xsh
grestore
gsave
95.6126 39.5904 mo
157.533 39.5904 li
157.533 5.6295 li
95.6126 5.6295 li
95.6126 39.5904 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
145.533 16.0705 mo
( )sh
grestore
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B770DA42E8D37F1E32882D4AD6464D850106A0DE7A83B47F0E
C65143E84B8F9887D8EF560BBB7DAED9582F38B6974AE06071D74243DE04377A
9E38C603D44A0AA623BF84EDE575A39EAD4593C4B3F424F5317061A5AEF0FCBD
5198E5F9AB43FD8C228E541FA391BADB0ACDBD5FBBD08EBCA2700B6A1105DB45
395D242F8C44AC433C3725A9D5F6A91B5DF820F4E2F6E66101242BAA426ABA58
4BF91A7E8CBD825612324F28F3BB6B5F4B6A98D5678C5683C423898401C97DB6
AEBB3B08F0E49015B8C09294559F0324646775C30687BA8725A301A8E7ACA559
E180CD1BA525300AD3D8DFA8A8C34309FA6E01CA0BA9F33D60D410C3785C9A35
A4D33DC4DA697FAAF83556B3BAF038631153B21CFA05AC7F6B965B6C9DD580EC
DAA5E19D631487362428CB6C15F8951776CB9C454AE2ECDA7CED1F00599F6057
8050870FD9F672ABB02F7641BFFDFC908D98DE75282B9085EDCE585EED996ACD
325E186C6CC942676730FDB64EACBC2CC9670AC8631DB84FE5F13182767EAE21
F9BC28BA89B244DFD720C9DF35E92F57747BB59E5AF5F4663BAF9B03DC716D74
DBD0D4D1BB2703443369B43A50F5B2916833184106C2158995BEF98CEF08C3DF
5A6182> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 83 /S put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 3{/.notdef}rp /M /N 4{/.notdef}rp /S 
17{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l 3{/.notdef}rp /p 
3{/.notdef}rp /t /u 138{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
111.453 29.6305 mo
(Slit Set)
[5.03424 2.52048 2.52046 3.71945 2.51711 5.03422 5.52002 0 ]xsh
141.934 29.6305 mo
( )sh
116.973 145.19 mo
77.2527 145.19 li
77.2527 122.15 li
116.973 122.15 li
116.973 145.19 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[39.96 0 0 23.28 -11.9348 17.766 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 333 
/H 194 
/M[333 0 0 -194 0 194 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 333 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 333 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 333 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_YHJ,~>

%%EndBinary
grestore
np
gsave
77.2527 145.071 mo
116.853 145.071 li
116.853 122.031 li
77.2527 122.031 li
77.2527 145.071 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/h <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4
C30D8A20FB7C70B167834EB7C5767A7762DBDEADBE99BB9DD1507EDF7CB5B44C
FB5AE7F50CE798A09AFFC2F8A1E21C8BA96A3248C2464366A8BF234A7465BA6B
08C9AB7474ED94583744D778660448C601BC1D9C2E8788B65F173F45C272BBE3
CD6AC55E870CEE94D478E3D51C8A2E608A02982A9D048914B7569407A83B9D3C
DA9FE7ECB2AF4F7816F117CC85330A774976280DEB1A8C317A8A170186F61B3F
5FC1D130A0DA1A6A5AE24C0FB08191CD76F47EDEDB0EAC8DE369D515B3B14661
497F94A2412A37D63D31ABC4AE50DD37B3DDB58CFDBCD2A17246A6058BA85E12
DAD2711083774A128264C809F70CFC31D164703798D4642E5D> |-
/w <1C60D8A8C9B63EE6FBAC6FE430D4C472A6935E9E4E2C9D9C4ACB16C71B03
2F18FE575C6256D49A59D28FA55A64B8F4250FF7EF0F6440082EA55E50C72515
DB779850B563F18307F56C5AA0381D53908E3AA5F7BCF9144924A2084F07EBED
39B22484214EF3445C58E2A31D32B14DA61C85069056233A7D69EDE7D6EAE909
5E582A487ACDCAAEC9B696D9F56177DFCBED54097D97E802545B35B3AFF09395
2061133C2164E4C99E14CC43C1C5FB57627E18AF07CB58B73BD1200A30349006
897A1314704F9560B7EE765A767050BD02ED4C3CB6891E5FA019219CAF9310B1
24D9AF8C5E5547F89705BF1E11BA18C8C6F80D46BFB4F08BBC66AE29B2E81702
937C5AB98472DEAC74C8794C288DBFA220B7F896E2B36F9ECF06883A45930B94
0AFF017D9F3C209761AB734C6F3F199505CD5974FFC0917AC4E2B317FA15146D
5F8C2D8B2A0366984D71D35A1EAF824F2AB69DDEEC3EC469FA5796A63F524D8E
C40E97981C19E148BD51BA03455ACA08443ED8962BD3AB9091> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 104 /h put
dup 119 /w put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 3{/.notdef}rp /M /N 4{/.notdef}rp /S 
17{/.notdef}rp /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l 3{/.notdef}rp 
/p 3{/.notdef}rp /t /u /.notdef /w 136{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
85.8926 130.67 mo
(wheel)
[6.47997 4.67995 4.43971 4.44061 0 ]xsh
grestore
gsave
77.2527 145.071 mo
116.853 145.071 li
116.853 122.031 li
77.2527 122.031 li
77.2527 145.071 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
108.093 130.67 mo
( )sh
grestore
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/s <1C60D8A8C9B7347873EC11B675AA6F6B461106EA2C61A0AE571750A08267
9294B529694EFA74202690239BCD02BDE93B33BD8DE0F0F0056B04093EE6C4E8
3D6F00E22E61E0A53509E628E3614EF2EF2CA3A8502F22A560E46ED3E4AED0BF
D271CCE464114B6332D17C4A046EF74FFF1283283A642C8C06B85A0D72357B56
65CD862A8E3D30EFFEE242F88B9C12DF917A74252DB462B49970474974786963
8F8FD8E70AF4405F95B11DFD154B7101933A31068AA1E65CC021277CCB9EC0EA
A7B978A081D1A4252A6693984AAF2CEC4413666DCF8B310A71A67C6E7B1DB954
E186EA16C83551DD0516966C156876A3DE36ED7253FFBBC1504668DC98301370
300A04E6753189718288CD7EF0ED409765A888272FDB25977C8A74BC113E188B
3DF6A69F7851A7E60496291AA0B15532572787EAC7F32F09F1E72589E0E74E03
49313472D872E64E7DB78BAB05598FE04B70E52D818F2F7B0B56A5688299352E
62F16B011595A7D7701FD641BB2FCFCADB2E33263B8A208C4183E753AD5C2586
1BF542F2009EA70BB7A67B3BE61085D37469DCDCB97CB2B41A0E2B4DB3BE67C2
BA9A1482E51611AB708AAB8BC978B06758006F3287DD3A3CABA09A9F59A21B0D
386F88> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 115 /s put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 3{/.notdef}rp /M /N 4{/.notdef}rp /S 
17{/.notdef}rp /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l 3{/.notdef}rp 
/p 2{/.notdef}rp /s /t /u /.notdef /w 136{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
80.7326 141.59 mo
(with slits)
[6.47997 2.04034 2.99976 4.67995 2.04298 3.48035 2.03944 2.04033 3.12036 0 ]xsh
113.25 141.59 mo
( )sh
.5 lw
101.442 121.359 mo
115.84 90.4692 li
@
44.4926 30.9505 mo
5.37264 30.9505 li
5.37264 10.7906 li
44.4926 10.7906 li
44.4926 30.9505 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[39.36 0 0 20.4 -83.8148 132.006 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 328 
/H 170 
/M[328 0 0 -170 0 170 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 328 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 328 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 328 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
KE$Q'K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&KE$Q'K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^K'K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)`^fJ,~>

%%EndBinary
grestore
np
gsave
5.37264 30.8304 mo
44.4926 30.8304 li
44.4926 10.7916 li
5.37264 10.7916 li
5.37264 30.8304 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B7171E8B1A8E6313E3398209E3D260B6F15325DCB45ECD7736
181F507CB4487F34F0C59AFEB0721592A12F0589FA4C3A7603462313C63656B0
9A8D44D0BD8D70558844CA341A4EE2AC79F611A3ED366B2D2FE339B138BAAEB8
D89A1F21C50A63D7C75CB2B4AF444273F3D83A0ACE429472C68390F392B236C4
85C1D89000FF66B1CD626A7276BDCB191387CD8BEAF0A2AA6552> |-
/a <1C60D8A8C9B75CBB53379352952B97D633633CE49B1F5650B8155AFDFA57
F94D359804093E4912F3B89577762AB5877203F1CDAD240C521DE74183EDA105
01967DB6487C182138B12C453C5DB9629F7EF021028117511EFEAB941896E32D
9CC68D6E66540771999A4E30C4826A52D7536EDDF7E00016C895CE43408B44BE
33E2D9A6163827E05AB8B1144BC909A74F6D7828DE6E08164A25E320920E3540
20A41D59E9E3B008A20EC107F9E18745DE21F9AF293EB0F319B529D840D8BA93
19522EDDCACA13336C059581181C082BF0D7F4117FAEB429D871E099AEE4394F
ED2FB3A1C712D1799055BA832AD846B95DA8BB4E63B103C908FA309FAA3B7814
0CE2A22AE06B2A1EA5BD3AA13DD1ED75DA4AD37493780FE662EF5D1B53C4AF41
845C0C77655CE94F0C9DEBE29248A1EAAF3A6EA79D5BB5C090457B818DD62F70
E197CEA94F90229AB4FD685A1ADB5E4E4C1DBDB28AA3854323EE2FD22692EC70> |-
/r <1C60D8A8C9B80F37F21112BA81A46E1A1A16E843530DEF66F6901DB9A722
A358478F1B0799F6041BFFF7D05EE602307D474F1DB84BF73C4EC1FF13A4D2D5
B370042C9A314A700782F944BCE36786AFBD72FA62259FABABA90F1F2BE008B7
993D5E1813324C60BD953524A1040FB1A790007846FA5DED6ACE6C7D436FF1C0
B97E4BBDDDA28F066E204B37F8321753E1473DDD8EE76C12A0011B04832F5C47
D3FF30EE31FE70EF82623D628622FAE52A70984ACD43F9718BC02CE5AA3F5832
FAB343FD6D53F2375C811D54E6B415E257D8BB3A2542930D7E0D6DF96FAA0688
822B6655966904164F87FA904C272BFAD51FAFF11CA14EBB5F6472235CA20889
D111211CF90F83807D99EF12B3B6827C1CA4720D03729BEEEA22A1313C4BDCE8
78453F5E6DCAD449D1F3B7D54D32C49DA0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 76 /L put
dup 97 /a put
dup 114 /r put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 2{/.notdef}rp /L /M /N 4{/.notdef}rp 
/S 13{/.notdef}rp /a 3{/.notdef}rp /e 2{/.notdef}rp /h /i 
2{/.notdef}rp /l 3{/.notdef}rp /p /.notdef /r /s /t 
/u /.notdef /w 136{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
12.5726 21.4705 mo
(Laser)
[4.67983 5.27717 4.32002 5.52001 0 ]xsh
grestore
gsave
5.37264 30.8304 mo
44.4926 30.8304 li
44.4926 10.7916 li
5.37264 10.7916 li
5.37264 30.8304 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
36.0926 21.4705 mo
( )sh
grestore
55.0525 60.5905 mo
2.0126 60.5905 li
2.0126 35.9905 li
55.0525 35.9905 li
55.0525 60.5905 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[53.28 0 0 24.84 -87.1748 102.366 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 444 
/H 207 
/M[444 0 0 -207 0 207 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 444 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 444 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 444 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`jj
J,~>

%%EndBinary
grestore
np
gsave
1.89268 60.5905 mo
54.9326 60.5905 li
54.9326 35.9905 li
1.89268 35.9905 li
1.89268 60.5905 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B78E05EAA3CECCCC7ABA6A35E55F211820F669BFFF2D107F3F
003F84456D947B5557966A2009812B81B51372EB70EB729C8C82B63A473DB516
1C83385AAD04B71C9D388B2F86E7C2E91E06E59E76C532F8A600B530589A218B
CA1E889366120C885033631C7850C65A7F9274D24F9BF6FA89E174B53B0E1A2C
F6D783F32D4C0BE4ACD3EEAF66A8BEC8DB7AC7ADBF3C9CDF5485D002662D310A
CCD320AD0234A2F2251E7C0B1667BFFC7E10EE40C7CB623518E3E168137CE699
E133B767C86E16CACCA64A58BD9D7F6E66BED6D6FE5D80E0381141549FFB2FBF
94ECD2D262EB097909F9092B71E3573FC9B4FD273505C685B327AE9095A2A155
45986A397AE2796BDB3888D16AF3DD82BF32621BC8C1393814540227FC926F77
872F2FAF5DD33717EB461ACFE3EE5C279294EBB5AADC09C8B10C3F2CB25CCD97
C6> |-
/j <1C60D8A8C9B87DE052CBE8EA1F435A396D74A156D684A1B719256AFD088D
E495AA86AB7CCD817A938296CF0F8399FCEE3662F575F22BC642EE0CBF88CC1C
A4E7C552C32B03DACABF153EC87432328A1B586B939F59CFDC9731F30AA1A68D
B84B1EFDC126626FAA4641C6597CC22073BC4D69999C5D6D474DD6908804D154
4FDE037D86AE8A6C3A9927A20091D90229324CDD9FA2941F8BE3C5B43DD929A0
6AA1AD6E0B73E9E2E606C9A69DE2B4F2C6A9FE4A4F1F9F102378426C65CF9936
58CBD59E49F9CFE61F443718943CF94BE0B4F9059A84581CE3CF237B076901A7
8460D8D22ECAD343A9B673E5DB1B8CDBC20B31ADB6632AE6BB266CC352037837
A50F2914B3EF21D046A7AF8296D6E8210A2059C31E> |-
/m <1C60D8A8C9B6D24F7D3842850F4949AEB6B9100F2B78F4C8889450CED823
786FEB32A1B63E88AD56EE02413123CB64791A93EF92133FE4595DA2691E3035
F9F72C6031AE554C5E100D6D83A5170AEAC660F3CD2D2E423C32E393EEDCE69B
38CE6373F6B6777FFB71A30474298882FF21A6474EA00B23874CB701D4949FDA
B683EF52B401CF01FBFB5320858391C36D1B0A5131B6AD88B31FBA5AF7369B53
8683192205F94F973772FC0D1A80750F5CA55E65F4A8760D9FFB5A3E462EB76A
F894987A3AB123C31C6F61A2DE381C11A73194BB9FA663DEB4E0E047953FDCCB
40254C512459EA81EABD29705BEDA8917220B4CD736962EC932D0F91B2A5DC80
8623631D3854D7B6297589945BF94293721596CC4C62C71F5A8040654672D59A
8C73FC39F2C6919502A1FD8EB49A6BB72701DD42520B2F6CD223AC11A22A5CED
8614ABBE01C624D0AED39BB3AE4E8B513F61C37C6BA440280E139545B39C87A0
6867746DDC81F39BACA8E048A7276011988ACE081223D841AEA6DE2418F28BD5
9A30A454BE8DAE3786DDCC7D1BEEFB13E445F279EE7EA8CB61C194C9B25497E6
925AF3BEE4F64F897F4A57BD4C4A1E06EBC8223C35049061> |-
/n <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4
C30D8A20FB7C70B167834EB1FCB2A451DA55CBA774B9C40CA48F3B7AD8E41B3F
0C2665E2AF85619561E070ABE3E4EFEC9983825210D2A0599E48D162F3133798
2CE0D843D2D41F1F7924A343E37439CC75937984C88A0080C28B8BFBFB8F444A
FA11CBAA4BCF4C8D3087770F88F26B0A8B30E46AE29C6BF9720949C50E19D624
8BB58DE961D63651843F9B3B8EE9AA75CDE28D1F95D7703116FE7AA23945B580
8B97F9947888D114BE2523F872057145410E975A2CA83D430B49A7CAE2661901
2C2444BEBF6DC1397EFC38FADD0435CE6D4A1478744BC983827B31CF502C4487
AF1E48BBC2EB6153C1C5367B96A212BCD3FEE3B9DEC12C4E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 100 /d put
dup 106 /j put
dup 109 /m put
dup 110 /n put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 2{/.notdef}rp /L /M /N 4{/.notdef}rp 
/S 13{/.notdef}rp /a 2{/.notdef}rp /d /e 2{/.notdef}rp /h 
/i /j /.notdef /l /m /n /.notdef /p 
/.notdef /r /s /t /u /.notdef /w 136{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
2.01261 44.5105 mo
(adjustment)
[4.32004 4.67995 2.15998 4.67995 3.48035 2.99976 7.19996 4.56032 4.67993 0 ]xsh
grestore
gsave
1.89268 60.5905 mo
54.9326 60.5905 li
54.9326 35.9905 li
1.89268 35.9905 li
1.89268 60.5905 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
43.8926 44.5105 mo
( )sh
grestore
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B714A578818061920CBD3BB0F0FEC7EB28869C0269DBFC0262
5554E339FA8F23FF202BF6BBA51F73386176CF41E41162B391BD65C46864E1ED
BE38C4A175836382F89D1B282918F37F6A98A1C310371E84DC05CA4D214BBF40
D0904F28663CAA2B1AF41B75D4680E3731D792C10C395648F8CE6283B6D2EA4E
A25EB0077385CC26E37C0D4F9F091C8BC196661820383DC1CFC26D318A92B139
8AE8D24532A475AF0A93A6DC660BFF9F07C9678F9C3412071B0DAC612FC7D6B5
FAE3214E7C7AB18E3145411FCE0CA8B75D2C8C25C05252A375257E1693A2B9D1
1EE377C95BA1746CBCD896C9D8284A96EC1B8BEF12D6460B6828EC26350E91CC
593B47372BD95FFBF8C2322BFC435A5494ED398AAAE3E6E4293369CDCFAC0147
8225F7C60BA6A2722907E6FF92F4B9457F52836FAB37F27C55593B43AB457EA2
91D6DE23> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 99 /c put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 2{/.notdef}rp /L /M /N 4{/.notdef}rp 
/S 13{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp 
/h /i /j /.notdef /l /m /n /.notdef 
/p /.notdef /r /s /t /u /.notdef /w 
136{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
2.01261 55.4305 mo
(screws)
[3.48306 3.83944 3.12029 4.4397 6.47997 0 ]xsh
26.8581 55.4305 mo
( )sh
46.2926 140.511 mo
-.0674362 140.511 li
-.0674362 113.87 li
46.2926 113.87 li
46.2926 140.511 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[46.56 0 0 26.88 -89.2148 22.4459 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 388 
/H 224 
/M[388 0 0 -224 0 224 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 388 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 388 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 388 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)`I_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
]DmK_K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`I_K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&]DmK_K)^H&
K)^H&K)bHBJ,~>

%%EndBinary
grestore
np
gsave
-2.7874 140.63 mo
46.2926 140.63 li
46.2926 113.87 li
-2.7874 113.87 li
-2.7874 140.63 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B78C66ECF3075BCC0F7D87F2E9EA9E473D66D53E6D1735C12E
AC0562A2F6FB428E7F7051A3A7B2D4CA6ED90F77808579359B7E539B5388F6F5
4555E1422B5F329989100C1CD5239E87FECD85E14E914ADC27391A1F5624B31E
E69A68B9016D73D6A01A100E004523AC53318A2FC2260E74BA80D4ABD1433EC6
7800CC9F77763DCF8156EA5CA478ABF1FAF7864EAD55939BE7FA4A9E8660CE98
DDE8CBC35F3FFF4E5C2DA4A292CE30D82057E70A8562AFB17C90FC331A4C46B4
8C7BBCED55DB7F94D559D534C59FF211B5A85F0207876BD8D6B2C7BBBC06964A
16F72BBAE841F001B71209E6C81DC64817ADE625E8FF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 111 /o put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 2{/.notdef}rp /L /M /N 4{/.notdef}rp 
/S 13{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp 
/h /i /j /.notdef /l /m /n /o 
/p /.notdef /r /s /t /u /.notdef /w 
136{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
4.41261 122.51 mo
(power)
[4.67995 4.79964 6.47997 4.43701 0 ]xsh
grestore
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
4.41261 133.43 mo
(switch)
[3.48306 6.47997 2.03944 3.00066 3.83943 0 ]xsh
27.9296 133.43 mo
( )sh
8.54521 115.044 mo
15.8142 91.7477 li
@
13.7627 70.4047 mo
11.1147 59.6047 li
@
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
63.4526 74.0305 mo
(incident)
[2.04033 4.67995 3.83945 2.04033 4.67995 4.5603 4.67995 0 ]xsh
93.0896 74.0305 mo
( )sh
gsave
58.6526 87.3505 mo
98.0137 87.3505 li
98.0137 62.2715 li
58.6526 62.2715 li
58.6526 87.3505 li
clp
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B78E05EA9D9733F4614DDE4F3CCBD772458631C06B9585CEC3
067196C085285D4EBCA830523DBA980A7903E7CCB9545952E933EA287D309550
0A08B5FF1250FB2472C48AA643F9948B713834174A32233FFD00CE8E2A02CD92
CD0EB36D86747ABA3C4EE4A7096B26460185FCF827CE5E1862348B87101A5C9D
384541120A40C8C71F0748956E48EF5E095EAD17FBE5B28249366E6BEAFC298E
E015C31B731D6166501448A2851B390CD5E1032DCB65F726222BA5085B034CFC
917DC36E2C73558D1FCD108B1B305D16C97136B39697A594C46D2F068CC61EBC
8B61EEBACA2E9B9971F359DB93A6910B3669C04870AE086A03B453BCE1E9F2C9
24C2B94631466A458EB1B3FD708C18C058A8B05845E2D231DD130E2BCA4DCE6C
A2C90256ED106A2B8A867758EB2E1D464AB1AA657324F30AFED658994E772592
420FD616D7BD6885B5350E3F2A59010B037CCEDD5B3D83A476690BED59BBD82D
D2D74F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 5{/.notdef}rp 
/G /.notdef /I 2{/.notdef}rp /L /M /N 4{/.notdef}rp 
/S 13{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp 
/h /i /j /.notdef /l /m /n /o 
/p /.notdef /r /s /t /u /.notdef /w 
136{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
67.8926 84.9505 mo
(beam)
[4.67995 4.43701 4.32004 0 ]xsh
grestore
gsave
58.6526 87.3505 mo
98.0137 87.3505 li
98.0137 62.2715 li
58.6526 62.2715 li
58.6526 87.3505 li
clp
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
88.6526 84.9505 mo
( )sh
grestore
.75 lw
44.5825 76.7405 mo
113.19 76.7405 li
@
1 lc
0 lj
107.19 73.2403 mo
113.19 76.7403 li
107.19 80.2403 li
@
gsave
411.333 62.9904 mo
473.133 62.9904 li
473.133 31.7904 li
411.333 31.7904 li
411.333 62.9904 li
clp
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B7D4743405E233890E0A55534F43CA9133B29299791AB3DBBE
2A168EA78A7CB17DB0B060289D007AE138DDD7A874C20C0D1520156DF13FACE4
9220AECA91409AE8B52232B88DA851C2DCC83FF3926F0A798122A50015C04B7E
00C749CF9804781F643848BCD8EE92B57CB757A23284ECD5E56D8CA18327E984
54C09854624F1CB0E6F9646D20C4617F03B71EB8405F3505A5816E6439DF15D9
1294CE077BD16B66305872E9E54213ED4B2F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 68 /D put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 2{/.notdef}rp 
/D 2{/.notdef}rp /G /.notdef /I 2{/.notdef}rp /L /M 
/N 4{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d 
/e 2{/.notdef}rp /h /i /j /.notdef /l /m 
/n /o /p /.notdef /r /s /t /u 
/.notdef /w 136{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
422.613 42.2305 mo
(Detector)
[6.84045 5.52002 3.59912 5.51996 4.67993 3.59912 5.87982 0 ]xsh
grestore
gsave
411.333 62.9904 mo
473.133 62.9904 li
473.133 31.7904 li
411.333 31.7904 li
411.333 62.9904 li
clp
MDDJMD+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
461.973 42.2305 mo
( )sh
grestore
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B776A06C625D9575F6DBFFEE93EC1CB9A335325BD9E365428E
EA1BD5B7A305D96437BF24D2E59BF0DFE2360EDCA01120D4DA769624265DE986
6EA970971BD84B20E81D769B1F13D7A21674FB5E8C4844518680BB1DE710B743
8090302965C932285C6A137B1923CFCED74D1C71B686BDF1263BE348B2F06F53
4EDA8A2856376F820F03A76FD878686946B3B179B9CD823AA55541A535E0CCC6
D2D21B3D6A73597DDD43BBEFD829B55A26664F2F8221FA6814449CF6D0CFA134
92A2A7CF82E9D18F6E0413> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 2{/.notdef}rp 
/D 2{/.notdef}rp /G /.notdef /I 2{/.notdef}rp /L /M 
/N 4{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d 
/e 2{/.notdef}rp /h /i /j /.notdef /l /m 
/n /o /p /.notdef /r /s /t /u 
/.notdef /w /.notdef /y 134{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [11.04 0 0 -11.04 0 0 ]msf
421.053 55.9105 mo
(Assembly)
[6.36011 4.31671 4.31671 5.52002 8.87939 5.76062 2.40015 0 ]xsh
463.535 55.9105 mo
( )sh
0 lc
1 lj
362.233 61.9904 mo
362.233 60.8724 363.451 59.9654 364.953 59.9654 cv
432.08 59.9654 li
433.582 59.9654 434.8 59.0584 434.8 57.9404 cv
434.8 59.0584 436.017 59.9654 437.519 59.9654 cv
459.313 59.9654 li
460.815 59.9654 462.033 60.8724 462.033 61.9904 cv
@
119.783 60.7535 mo
138.633 60.7535 li
138.633 93.2925 li
119.783 93.2925 li
cp
.705021 .712684 .721721 rgb
ef
1.5 lw
118.783 55.0405 mo
118.783 72.2345 li
.21602 .207454 .209307 rgb
@
118.783 74.1773 mo
118.783 78.5264 li
@
118.783 80.6038 mo
118.783 121.541 li
@
15.9326 65.3977 mo
15.9326 69.7477 li
@
15.9326 67.6833 mo
21.3326 67.6833 li
@
15.9326 72.8263 mo
15.9326 77.1763 li
@
15.9326 74.9691 mo
21.3326 74.9691 li
@
15.9326 88.6833 mo
21.3326 88.6833 li
@
18.9326 60.5405 mo
37.7826 60.5405 li
37.7826 93.0905 li
18.9326 93.0905 li
cp
.48562 .491648 .500845 rgb
ef
263.853 90.9505 mo
210.693 90.9505 li
210.693 65.1505 li
263.853 65.1505 li
263.853 90.9505 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[53.4 0 0 26.04 121.505 72.006 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 445 
/H 217 
/M[445 0 0 -217 0 217 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 445 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 445 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 445 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`Oa
K)^H&K)^H&K)^H&K)^H&K)^H&_#Jo~>

%%EndBinary
grestore
np
gsave
210.573 90.9505 mo
263.733 90.9505 li
263.733 65.1515 li
210.573 65.1515 li
210.573 90.9505 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
219.933 73.6705 mo
(scattered)
[3.48306 3.83945 4.32001 3.00067 2.99976 4.43973 3.12027 4.43973 0 ]xsh
grestore
gsave
210.573 90.9505 mo
263.733 90.9505 li
263.733 65.1515 li
210.573 65.1515 li
210.573 90.9505 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
254.373 73.6705 mo
( )sh
grestore
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
226.773 84.5905 mo
(beam)
[4.67993 4.43701 4.32004 0 ]xsh
247.536 84.5905 mo
( )sh
.75 lw
143.183 76.2405 mo
265.79 76.2405 li
@
1 lc
0 lj
259.79 72.7403 mo
265.79 76.2403 li
259.79 79.7403 li
@
0 lc
1 lj
143.183 80.9547 mo
265.793 90.7247 li
@
1 lc
0 lj
260.09 86.7592 mo
265.793 90.7252 li
259.534 93.7372 li
@
0 lc
1 lj
143.183 71.7476 mo
265.793 62.1556 li
@
1 lc
0 lj
260.084 66.1131 mo
265.793 62.1552 li
259.538 59.1342 li
@
348.693 163.99 mo
308.493 163.99 li
308.493 137.991 li
348.693 137.991 li
348.693 163.99 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[40.44 0 0 26.28 219.305 -1.07403 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 337 
/H 219 
/M[337 0 0 -219 0 219 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 337 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 337 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 337 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_/:
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^u5J,~>

%%EndBinary
grestore
np
gsave
308.493 164.15 mo
348.693 164.15 li
348.693 137.991 li
308.493 137.991 li
308.493 164.15 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
312.573 145.67 mo
(aperture )
[4.32004 4.67993 4.43701 3.1203 3.00067 4.67993 3.23999 4.43701 0 ]xsh
grestore
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
317.493 155.63 mo
(wheel)
[6.47998 4.67993 4.4397 4.44061 0 ]xsh
339.696 155.63 mo
( )sh
471.933 88.4304 mo
423.933 88.4304 li
423.933 63.7104 li
471.933 63.7104 li
471.933 88.4304 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[48.24 0 0 24.96 334.745 74.526 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 402 
/H 208 
/M[402 0 0 -208 0 208 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 402 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 402 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 402 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)`"R
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&XoEn~>

%%EndBinary
grestore
np
gsave
423.813 88.3105 mo
477.093 88.3105 li
477.093 63.5905 li
423.813 63.5905 li
423.813 88.3105 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
442.653 71.3905 mo
(turn )
[2.99976 4.67993 3.1203 4.67993 0 ]xsh
grestore
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
439.293 81.4705 mo
(wheel)
[6.47998 4.67993 4.4397 4.4397 0 ]xsh
461.496 81.4705 mo
( )sh
405.093 87.8305 mo
369.333 87.8305 li
369.333 64.7905 li
405.093 64.7905 li
405.093 87.8305 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[36 0 0 23.28 280.145 75.126 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 300 
/H 194 
/M[300 0 0 -194 0 194 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 300 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 300 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 300 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAK
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bK
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAK
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&VuMAKK)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_bKK)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)`.VJ,~>

%%EndBinary
grestore
np
gsave
369.213 87.8305 mo
405.093 87.8305 li
405.093 64.7905 li
369.213 64.7905 li
369.213 87.8305 li
clp
.21602 .207454 .209307 rgb
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
MDDJMD+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B7445140600976780BBEB6A3D2658D3A4C7F919C88C52D412C
8E364C5F7636792196FD221C121AC8A143979AFAA3A09359F0F2A21E651450F6
F05ACC0E82C2760ECA4A653600DE52AE0D5358458AF930D6BDEB0904E4313A0C
BCA78B5C6EE35CCCF928264F350C0A023EDD3B664C736748E408C524202A3326
D95C7DCABC59764E7D97C53C3E04189FF055F0A0F707215CE9EBCE6A5429EBED
17A701726A8DEDD69C85101530BFD06F1546D47732DA28D5440C29DB9FD39281
2122E25828F7402340CB2AAD1BBC054F22EBE3B4068E1189E1BBFDEDCE3380BE
2A1BC64D61665F8EA89BD12E55203D2F412C82771F2C0ABF3E56A249110A5F4D
FD7E943B7CBB3957D78564ABEBC14037C62116307C9CC2770007504568A496F0
E371B5E27EA91CE4ED6B158CDD56E512A87B38DA763ADE44907E57CB7229D283
C8A7D867519E31285088BE518A70B9193ED1297DE2FF3E929169124C3A44E72E
DA1A3B2C0E0DA57F0E79BC1C7BEFED8509DD8CC00683DBCDE9C2A776B95D5831
197913BF75A301F1EB13F5C4E48D99B31FDB0B54BB7B640060AFF7A1619C4EE7
C3CA0DE734198387C7205D8F2F952A1BC7A9DB628AB7F298888007AA604549FA
9EA5ECD6ED4A814A52FD636085B1A8D57F31E70472C30EB60858254A7B95E2F6
778797B84C60B2ED0823FE7265B0CE1B1A64D8F159C443134DC16E39D207947A
0FD5903276> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MDDJMD+Calibri /Encoding get
dup 103 /g put
pop
%ADOEndSubsetFont
/MDDJMD+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 15{/.notdef}rp /A 2{/.notdef}rp 
/D 2{/.notdef}rp /G /.notdef /I 2{/.notdef}rp /L /M 
/N 4{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d 
/e /.notdef /g /h /i /j /.notdef /l 
/m /n /o /p /.notdef /r /s /t 
/u /.notdef /w /.notdef /y 134{/.notdef}rp]
MDDJMD+Calibri nf
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
379.173 72.4705 mo
(light)
[2.04034 2.03943 4.20023 4.67996 0 ]xsh
grestore
gsave
369.213 87.8305 mo
405.093 87.8305 li
405.093 64.7905 li
369.213 64.7905 li
369.213 87.8305 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
395.253 72.4705 mo
( )sh
grestore
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
375.213 82.4305 mo
(sensor)
[3.48306 4.4397 4.67996 3.48306 4.79962 0 ]xsh
399.333 82.4305 mo
( )sh
.5 lw
0 lc
1 lj
346.91 141.446 mo
364.405 119.625 li
@
377.508 111.489 mo
378.052 85.9652 li
@
433.148 97.495 mo
445.373 82.073 li
@
391.173 26.6305 mo
365.853 26.6305 li
365.853 9.83043 li
391.173 9.83043 li
391.173 26.6305 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[25.56 0 0 17.04 276.665 136.326 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 213 
/H 142 
/M[213 0 0 -142 0 142 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 213 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 213 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 213 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)a'pJ,~>

%%EndBinary
grestore
np
gsave
365.732 26.5104 mo
391.173 26.5104 li
391.173 9.83043 li
365.732 9.83043 li
365.732 26.5104 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
372.693 18.3505 mo
(rail)
[3.1203 4.32004 2.04031 0 ]xsh
grestore
gsave
365.732 26.5104 mo
391.173 26.5104 li
391.173 9.83043 li
365.732 9.83043 li
365.732 26.5104 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
384.333 18.3505 mo
( )sh
grestore
412.207 19.5052 mo
387.117 16.5973 li
.21602 .207454 .209307 rgb
@
407.013 163.99 mo
369.333 163.99 li
369.333 141.831 li
407.013 141.831 li
407.013 163.99 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[37.92 0 0 22.44 280.145 -1.07404 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 316 
/H 187 
/M[316 0 0 -187 0 187 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 316 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 316 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 316 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)_)8K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&ci8L~>

%%EndBinary
grestore
np
gsave
369.333 169.191 mo
407.133 169.191 li
407.133 141.709 li
369.333 141.709 li
369.333 169.191 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
380.493 149.51 mo
(gain)
[4.20294 4.32004 2.03943 0 ]xsh
grestore
gsave
369.333 169.191 mo
407.133 169.191 li
407.133 141.709 li
369.333 141.709 li
369.333 169.191 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
395.853 149.51 mo
( )sh
grestore
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
376.413 159.35 mo
(switch)
[3.48306 6.47995 2.03946 3.00064 3.83945 0 ]xsh
399.93 159.35 mo
( )sh
386.933 142.16 mo
383.934 112.806 li
@
401.886 33.9734 mo
413.883 33.9734 li
413.883 47.9564 li
401.886 47.9564 li
cp
ef
1.5 lw
398.22 38.3072 mo
398.22 42.6572 li
@
398.22 40.5929 mo
403.619 40.5929 li
@
407.831 45.871 mo
372.042 40.3872 li
372.118 39.893 li
407.907 45.377 li
407.831 45.871 li
f
371.853 51.8304 mo
346.533 51.8304 li
346.533 28.5506 li
371.853 28.5506 li
371.853 51.8304 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 89.0674 163.076 ]ct
[25.56 0 0 23.52 257.345 111.126 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 213 
/H 196 
/M[213 0 0 -196 0 196 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 213 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 213 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 213 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)_&7
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&l2Q8
~>

%%EndBinary
grestore
np
gsave
346.533 51.7105 mo
371.733 51.7105 li
371.733 28.5504 li
346.533 28.5504 li
346.533 51.7105 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
353.373 36.2305 mo
(r)sh
grestore
gsave
346.533 51.7105 mo
371.733 51.7105 li
371.733 28.5504 li
346.533 28.5504 li
346.533 51.7105 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
356.493 36.2305 mo
(ail)
[4.32004 2.04034 0 ]xsh
grestore
gsave
346.533 51.7105 mo
371.733 51.7105 li
371.733 28.5504 li
346.533 28.5504 li
346.533 51.7105 li
clp
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
364.893 36.2305 mo
( )sh
grestore
.21602 .207454 .209307 rgb
MDDJMD+Calibri*1 [9 0 0 -9 0 0 ]msf
351.213 46.0705 mo
(stop)
[3.48306 2.99976 4.79962 0 ]xsh
367.17 46.0705 mo
( )sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/MDDJMC+Calibri-Italic*1 uf
/MDDJMC+Calibri-Italic uf
/HIBBAA+Calibri-Italic uf
/MDDJMD+Calibri*1 uf
/MDDJMD+Calibri uf
/QJJAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
